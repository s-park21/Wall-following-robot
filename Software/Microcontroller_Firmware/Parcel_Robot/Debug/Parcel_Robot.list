
Parcel_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000838c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08008498  08008498  00018498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008504  08008504  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08008504  08008504  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008504  08008504  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008504  08008504  00018504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008508  08008508  00018508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800850c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001318  2000017c  08008688  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001494  08008688  00021494  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001187b  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f0f  00000000  00000000  00031a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  00034930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea0  00000000  00000000  00035938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000047c0  00000000  00000000  000367d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013092  00000000  00000000  0003af98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d9dc  00000000  00000000  0004e02a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dba06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041a0  00000000  00000000  000dba58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08008480 	.word	0x08008480

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08008480 	.word	0x08008480

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb7a 	bl	8000848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80d 	bl	8000172 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f9da 	bl	8000510 <MX_GPIO_Init>
  MX_TIM1_Init();
 800015c:	f000 f864 	bl	8000228 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000160:	f000 f8ba 	bl	80002d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000164:	f000 f932 	bl	80003cc <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000168:	f007 fce8 	bl	8007b3c <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 800016c:	f000 f97c 	bl	8000468 <MX_TIM4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000170:	e7fe      	b.n	8000170 <main+0x24>

08000172 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000172:	b580      	push	{r7, lr}
 8000174:	b094      	sub	sp, #80	; 0x50
 8000176:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000178:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800017c:	2228      	movs	r2, #40	; 0x28
 800017e:	2100      	movs	r1, #0
 8000180:	4618      	mov	r0, r3
 8000182:	f008 f975 	bl	8008470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000186:	f107 0314 	add.w	r3, r7, #20
 800018a:	2200      	movs	r2, #0
 800018c:	601a      	str	r2, [r3, #0]
 800018e:	605a      	str	r2, [r3, #4]
 8000190:	609a      	str	r2, [r3, #8]
 8000192:	60da      	str	r2, [r3, #12]
 8000194:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]
 800019c:	605a      	str	r2, [r3, #4]
 800019e:	609a      	str	r2, [r3, #8]
 80001a0:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001a2:	2301      	movs	r3, #1
 80001a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ac:	2300      	movs	r3, #0
 80001ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b0:	2301      	movs	r3, #1
 80001b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b4:	2302      	movs	r3, #2
 80001b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001c8:	4618      	mov	r0, r3
 80001ca:	f002 fb9f 	bl	800290c <HAL_RCC_OscConfig>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d001      	beq.n	80001d8 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001d4:	f000 f9ca 	bl	800056c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d8:	230f      	movs	r3, #15
 80001da:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001dc:	2302      	movs	r3, #2
 80001de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001ee:	f107 0314 	add.w	r3, r7, #20
 80001f2:	2102      	movs	r1, #2
 80001f4:	4618      	mov	r0, r3
 80001f6:	f002 fe0b 	bl	8002e10 <HAL_RCC_ClockConfig>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d001      	beq.n	8000204 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000200:	f000 f9b4 	bl	800056c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000204:	2310      	movs	r3, #16
 8000206:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000208:	2300      	movs	r3, #0
 800020a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	4618      	mov	r0, r3
 8000210:	f002 ff5a 	bl	80030c8 <HAL_RCCEx_PeriphCLKConfig>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <SystemClock_Config+0xac>
  {
    Error_Handler();
 800021a:	f000 f9a7 	bl	800056c <Error_Handler>
  }
}
 800021e:	bf00      	nop
 8000220:	3750      	adds	r7, #80	; 0x50
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
	...

08000228 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b08c      	sub	sp, #48	; 0x30
 800022c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800022e:	f107 030c 	add.w	r3, r7, #12
 8000232:	2224      	movs	r2, #36	; 0x24
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f008 f91a 	bl	8008470 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000244:	4b22      	ldr	r3, [pc, #136]	; (80002d0 <MX_TIM1_Init+0xa8>)
 8000246:	4a23      	ldr	r2, [pc, #140]	; (80002d4 <MX_TIM1_Init+0xac>)
 8000248:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800024a:	4b21      	ldr	r3, [pc, #132]	; (80002d0 <MX_TIM1_Init+0xa8>)
 800024c:	2200      	movs	r2, #0
 800024e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000250:	4b1f      	ldr	r3, [pc, #124]	; (80002d0 <MX_TIM1_Init+0xa8>)
 8000252:	2200      	movs	r2, #0
 8000254:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000256:	4b1e      	ldr	r3, [pc, #120]	; (80002d0 <MX_TIM1_Init+0xa8>)
 8000258:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800025c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800025e:	4b1c      	ldr	r3, [pc, #112]	; (80002d0 <MX_TIM1_Init+0xa8>)
 8000260:	2200      	movs	r2, #0
 8000262:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000264:	4b1a      	ldr	r3, [pc, #104]	; (80002d0 <MX_TIM1_Init+0xa8>)
 8000266:	2200      	movs	r2, #0
 8000268:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800026a:	4b19      	ldr	r3, [pc, #100]	; (80002d0 <MX_TIM1_Init+0xa8>)
 800026c:	2280      	movs	r2, #128	; 0x80
 800026e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000270:	2303      	movs	r3, #3
 8000272:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000274:	2300      	movs	r3, #0
 8000276:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000278:	2301      	movs	r3, #1
 800027a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000280:	230a      	movs	r3, #10
 8000282:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000284:	2300      	movs	r3, #0
 8000286:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000288:	2301      	movs	r3, #1
 800028a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000290:	230a      	movs	r3, #10
 8000292:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000294:	f107 030c 	add.w	r3, r7, #12
 8000298:	4619      	mov	r1, r3
 800029a:	480d      	ldr	r0, [pc, #52]	; (80002d0 <MX_TIM1_Init+0xa8>)
 800029c:	f003 f868 	bl	8003370 <HAL_TIM_Encoder_Init>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80002a6:	f000 f961 	bl	800056c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002aa:	2300      	movs	r3, #0
 80002ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002ae:	2300      	movs	r3, #0
 80002b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4619      	mov	r1, r3
 80002b6:	4806      	ldr	r0, [pc, #24]	; (80002d0 <MX_TIM1_Init+0xa8>)
 80002b8:	f003 fd06 	bl	8003cc8 <HAL_TIMEx_MasterConfigSynchronization>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80002c2:	f000 f953 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80002c6:	bf00      	nop
 80002c8:	3730      	adds	r7, #48	; 0x30
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	20000198 	.word	0x20000198
 80002d4:	40012c00 	.word	0x40012c00

080002d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08a      	sub	sp, #40	; 0x28
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002de:	f107 0320 	add.w	r3, r7, #32
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]
 80002f6:	615a      	str	r2, [r3, #20]
 80002f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002fa:	4b33      	ldr	r3, [pc, #204]	; (80003c8 <MX_TIM2_Init+0xf0>)
 80002fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000300:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3600-1;
 8000302:	4b31      	ldr	r3, [pc, #196]	; (80003c8 <MX_TIM2_Init+0xf0>)
 8000304:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000308:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800030a:	4b2f      	ldr	r3, [pc, #188]	; (80003c8 <MX_TIM2_Init+0xf0>)
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000310:	4b2d      	ldr	r3, [pc, #180]	; (80003c8 <MX_TIM2_Init+0xf0>)
 8000312:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000316:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000318:	4b2b      	ldr	r3, [pc, #172]	; (80003c8 <MX_TIM2_Init+0xf0>)
 800031a:	2200      	movs	r2, #0
 800031c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800031e:	4b2a      	ldr	r3, [pc, #168]	; (80003c8 <MX_TIM2_Init+0xf0>)
 8000320:	2200      	movs	r2, #0
 8000322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000324:	4828      	ldr	r0, [pc, #160]	; (80003c8 <MX_TIM2_Init+0xf0>)
 8000326:	f002 ffd4 	bl	80032d2 <HAL_TIM_PWM_Init>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000330:	f000 f91c 	bl	800056c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000334:	2300      	movs	r3, #0
 8000336:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000338:	2300      	movs	r3, #0
 800033a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800033c:	f107 0320 	add.w	r3, r7, #32
 8000340:	4619      	mov	r1, r3
 8000342:	4821      	ldr	r0, [pc, #132]	; (80003c8 <MX_TIM2_Init+0xf0>)
 8000344:	f003 fcc0 	bl	8003cc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800034e:	f000 f90d 	bl	800056c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000352:	2360      	movs	r3, #96	; 0x60
 8000354:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000356:	2300      	movs	r3, #0
 8000358:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800035a:	2300      	movs	r3, #0
 800035c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800035e:	2300      	movs	r3, #0
 8000360:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	2200      	movs	r2, #0
 8000366:	4619      	mov	r1, r3
 8000368:	4817      	ldr	r0, [pc, #92]	; (80003c8 <MX_TIM2_Init+0xf0>)
 800036a:	f003 f8a3 	bl	80034b4 <HAL_TIM_PWM_ConfigChannel>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000374:	f000 f8fa 	bl	800056c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2204      	movs	r2, #4
 800037c:	4619      	mov	r1, r3
 800037e:	4812      	ldr	r0, [pc, #72]	; (80003c8 <MX_TIM2_Init+0xf0>)
 8000380:	f003 f898 	bl	80034b4 <HAL_TIM_PWM_ConfigChannel>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800038a:	f000 f8ef 	bl	800056c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	2208      	movs	r2, #8
 8000392:	4619      	mov	r1, r3
 8000394:	480c      	ldr	r0, [pc, #48]	; (80003c8 <MX_TIM2_Init+0xf0>)
 8000396:	f003 f88d 	bl	80034b4 <HAL_TIM_PWM_ConfigChannel>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80003a0:	f000 f8e4 	bl	800056c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	220c      	movs	r2, #12
 80003a8:	4619      	mov	r1, r3
 80003aa:	4807      	ldr	r0, [pc, #28]	; (80003c8 <MX_TIM2_Init+0xf0>)
 80003ac:	f003 f882 	bl	80034b4 <HAL_TIM_PWM_ConfigChannel>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 80003b6:	f000 f8d9 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003ba:	4803      	ldr	r0, [pc, #12]	; (80003c8 <MX_TIM2_Init+0xf0>)
 80003bc:	f000 f9b6 	bl	800072c <HAL_TIM_MspPostInit>

}
 80003c0:	bf00      	nop
 80003c2:	3728      	adds	r7, #40	; 0x28
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	200001e0 	.word	0x200001e0

080003cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b086      	sub	sp, #24
 80003d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003d2:	f107 0308 	add.w	r3, r7, #8
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e0:	463b      	mov	r3, r7
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003e8:	4b1d      	ldr	r3, [pc, #116]	; (8000460 <MX_TIM3_Init+0x94>)
 80003ea:	4a1e      	ldr	r2, [pc, #120]	; (8000464 <MX_TIM3_Init+0x98>)
 80003ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36-1;
 80003ee:	4b1c      	ldr	r3, [pc, #112]	; (8000460 <MX_TIM3_Init+0x94>)
 80003f0:	2223      	movs	r2, #35	; 0x23
 80003f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f4:	4b1a      	ldr	r3, [pc, #104]	; (8000460 <MX_TIM3_Init+0x94>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80003fa:	4b19      	ldr	r3, [pc, #100]	; (8000460 <MX_TIM3_Init+0x94>)
 80003fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000400:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000402:	4b17      	ldr	r3, [pc, #92]	; (8000460 <MX_TIM3_Init+0x94>)
 8000404:	2200      	movs	r2, #0
 8000406:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000408:	4b15      	ldr	r3, [pc, #84]	; (8000460 <MX_TIM3_Init+0x94>)
 800040a:	2200      	movs	r2, #0
 800040c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800040e:	4814      	ldr	r0, [pc, #80]	; (8000460 <MX_TIM3_Init+0x94>)
 8000410:	f002 ff10 	bl	8003234 <HAL_TIM_Base_Init>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800041a:	f000 f8a7 	bl	800056c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800041e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000422:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000424:	f107 0308 	add.w	r3, r7, #8
 8000428:	4619      	mov	r1, r3
 800042a:	480d      	ldr	r0, [pc, #52]	; (8000460 <MX_TIM3_Init+0x94>)
 800042c:	f003 f904 	bl	8003638 <HAL_TIM_ConfigClockSource>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000436:	f000 f899 	bl	800056c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800043a:	2300      	movs	r3, #0
 800043c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800043e:	2300      	movs	r3, #0
 8000440:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000442:	463b      	mov	r3, r7
 8000444:	4619      	mov	r1, r3
 8000446:	4806      	ldr	r0, [pc, #24]	; (8000460 <MX_TIM3_Init+0x94>)
 8000448:	f003 fc3e 	bl	8003cc8 <HAL_TIMEx_MasterConfigSynchronization>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000452:	f000 f88b 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000456:	bf00      	nop
 8000458:	3718      	adds	r7, #24
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	20000228 	.word	0x20000228
 8000464:	40000400 	.word	0x40000400

08000468 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b08c      	sub	sp, #48	; 0x30
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800046e:	f107 030c 	add.w	r3, r7, #12
 8000472:	2224      	movs	r2, #36	; 0x24
 8000474:	2100      	movs	r1, #0
 8000476:	4618      	mov	r0, r3
 8000478:	f007 fffa 	bl	8008470 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000484:	4b20      	ldr	r3, [pc, #128]	; (8000508 <MX_TIM4_Init+0xa0>)
 8000486:	4a21      	ldr	r2, [pc, #132]	; (800050c <MX_TIM4_Init+0xa4>)
 8000488:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800048a:	4b1f      	ldr	r3, [pc, #124]	; (8000508 <MX_TIM4_Init+0xa0>)
 800048c:	2200      	movs	r2, #0
 800048e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000490:	4b1d      	ldr	r3, [pc, #116]	; (8000508 <MX_TIM4_Init+0xa0>)
 8000492:	2200      	movs	r2, #0
 8000494:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000496:	4b1c      	ldr	r3, [pc, #112]	; (8000508 <MX_TIM4_Init+0xa0>)
 8000498:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800049c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800049e:	4b1a      	ldr	r3, [pc, #104]	; (8000508 <MX_TIM4_Init+0xa0>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004a4:	4b18      	ldr	r3, [pc, #96]	; (8000508 <MX_TIM4_Init+0xa0>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80004aa:	2303      	movs	r3, #3
 80004ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80004ae:	2300      	movs	r3, #0
 80004b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004b2:	2301      	movs	r3, #1
 80004b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80004b6:	2300      	movs	r3, #0
 80004b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80004ba:	230a      	movs	r3, #10
 80004bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80004be:	2300      	movs	r3, #0
 80004c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80004c2:	2301      	movs	r3, #1
 80004c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80004ca:	230a      	movs	r3, #10
 80004cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80004ce:	f107 030c 	add.w	r3, r7, #12
 80004d2:	4619      	mov	r1, r3
 80004d4:	480c      	ldr	r0, [pc, #48]	; (8000508 <MX_TIM4_Init+0xa0>)
 80004d6:	f002 ff4b 	bl	8003370 <HAL_TIM_Encoder_Init>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80004e0:	f000 f844 	bl	800056c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e4:	2300      	movs	r3, #0
 80004e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004e8:	2300      	movs	r3, #0
 80004ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	4619      	mov	r1, r3
 80004f0:	4805      	ldr	r0, [pc, #20]	; (8000508 <MX_TIM4_Init+0xa0>)
 80004f2:	f003 fbe9 	bl	8003cc8 <HAL_TIMEx_MasterConfigSynchronization>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80004fc:	f000 f836 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000500:	bf00      	nop
 8000502:	3730      	adds	r7, #48	; 0x30
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000270 	.word	0x20000270
 800050c:	40000800 	.word	0x40000800

08000510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000516:	4b14      	ldr	r3, [pc, #80]	; (8000568 <MX_GPIO_Init+0x58>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	4a13      	ldr	r2, [pc, #76]	; (8000568 <MX_GPIO_Init+0x58>)
 800051c:	f043 0320 	orr.w	r3, r3, #32
 8000520:	6193      	str	r3, [r2, #24]
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <MX_GPIO_Init+0x58>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	f003 0320 	and.w	r3, r3, #32
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <MX_GPIO_Init+0x58>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	4a0d      	ldr	r2, [pc, #52]	; (8000568 <MX_GPIO_Init+0x58>)
 8000534:	f043 0304 	orr.w	r3, r3, #4
 8000538:	6193      	str	r3, [r2, #24]
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <MX_GPIO_Init+0x58>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	f003 0304 	and.w	r3, r3, #4
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <MX_GPIO_Init+0x58>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	4a07      	ldr	r2, [pc, #28]	; (8000568 <MX_GPIO_Init+0x58>)
 800054c:	f043 0308 	orr.w	r3, r3, #8
 8000550:	6193      	str	r3, [r2, #24]
 8000552:	4b05      	ldr	r3, [pc, #20]	; (8000568 <MX_GPIO_Init+0x58>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	f003 0308 	and.w	r3, r3, #8
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]

}
 800055e:	bf00      	nop
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr
 8000568:	40021000 	.word	0x40021000

0800056c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000570:	b672      	cpsid	i
}
 8000572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000574:	e7fe      	b.n	8000574 <Error_Handler+0x8>
	...

08000578 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800057e:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <HAL_MspInit+0x5c>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	4a14      	ldr	r2, [pc, #80]	; (80005d4 <HAL_MspInit+0x5c>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6193      	str	r3, [r2, #24]
 800058a:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <HAL_MspInit+0x5c>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <HAL_MspInit+0x5c>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	4a0e      	ldr	r2, [pc, #56]	; (80005d4 <HAL_MspInit+0x5c>)
 800059c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a0:	61d3      	str	r3, [r2, #28]
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <HAL_MspInit+0x5c>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <HAL_MspInit+0x60>)
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <HAL_MspInit+0x60>)
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40010000 	.word	0x40010000

080005dc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	f107 0318 	add.w	r3, r7, #24
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a2b      	ldr	r2, [pc, #172]	; (80006a4 <HAL_TIM_Encoder_MspInit+0xc8>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d125      	bne.n	8000648 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80005fc:	4b2a      	ldr	r3, [pc, #168]	; (80006a8 <HAL_TIM_Encoder_MspInit+0xcc>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a29      	ldr	r2, [pc, #164]	; (80006a8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000602:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b27      	ldr	r3, [pc, #156]	; (80006a8 <HAL_TIM_Encoder_MspInit+0xcc>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000610:	617b      	str	r3, [r7, #20]
 8000612:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000614:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	4a23      	ldr	r2, [pc, #140]	; (80006a8 <HAL_TIM_Encoder_MspInit+0xcc>)
 800061a:	f043 0304 	orr.w	r3, r3, #4
 800061e:	6193      	str	r3, [r2, #24]
 8000620:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	f003 0304 	and.w	r3, r3, #4
 8000628:	613b      	str	r3, [r7, #16]
 800062a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = RWheel_A_Pin|RWheel_B_Pin;
 800062c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063a:	f107 0318 	add.w	r3, r7, #24
 800063e:	4619      	mov	r1, r3
 8000640:	481a      	ldr	r0, [pc, #104]	; (80006ac <HAL_TIM_Encoder_MspInit+0xd0>)
 8000642:	f000 fa71 	bl	8000b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000646:	e028      	b.n	800069a <HAL_TIM_Encoder_MspInit+0xbe>
  else if(htim_encoder->Instance==TIM4)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a18      	ldr	r2, [pc, #96]	; (80006b0 <HAL_TIM_Encoder_MspInit+0xd4>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d123      	bne.n	800069a <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000658:	f043 0304 	orr.w	r3, r3, #4
 800065c:	61d3      	str	r3, [r2, #28]
 800065e:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	f003 0304 	and.w	r3, r3, #4
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <HAL_TIM_Encoder_MspInit+0xcc>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000670:	f043 0308 	orr.w	r3, r3, #8
 8000674:	6193      	str	r3, [r2, #24]
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	f003 0308 	and.w	r3, r3, #8
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LWheel_A_Pin|LWheel_B_Pin;
 8000682:	23c0      	movs	r3, #192	; 0xc0
 8000684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068e:	f107 0318 	add.w	r3, r7, #24
 8000692:	4619      	mov	r1, r3
 8000694:	4807      	ldr	r0, [pc, #28]	; (80006b4 <HAL_TIM_Encoder_MspInit+0xd8>)
 8000696:	f000 fa47 	bl	8000b28 <HAL_GPIO_Init>
}
 800069a:	bf00      	nop
 800069c:	3728      	adds	r7, #40	; 0x28
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40012c00 	.word	0x40012c00
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40010800 	.word	0x40010800
 80006b0:	40000800 	.word	0x40000800
 80006b4:	40010c00 	.word	0x40010c00

080006b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006c8:	d10b      	bne.n	80006e2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <HAL_TIM_PWM_MspInit+0x34>)
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	4a07      	ldr	r2, [pc, #28]	; (80006ec <HAL_TIM_PWM_MspInit+0x34>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	61d3      	str	r3, [r2, #28]
 80006d6:	4b05      	ldr	r3, [pc, #20]	; (80006ec <HAL_TIM_PWM_MspInit+0x34>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006e2:	bf00      	nop
 80006e4:	3714      	adds	r7, #20
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	40021000 	.word	0x40021000

080006f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a09      	ldr	r2, [pc, #36]	; (8000724 <HAL_TIM_Base_MspInit+0x34>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d10b      	bne.n	800071a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <HAL_TIM_Base_MspInit+0x38>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	4a08      	ldr	r2, [pc, #32]	; (8000728 <HAL_TIM_Base_MspInit+0x38>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	61d3      	str	r3, [r2, #28]
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_TIM_Base_MspInit+0x38>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800071a:	bf00      	nop
 800071c:	3714      	adds	r7, #20
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	40000400 	.word	0x40000400
 8000728:	40021000 	.word	0x40021000

0800072c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800074a:	d117      	bne.n	800077c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074c:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <HAL_TIM_MspPostInit+0x58>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a0c      	ldr	r2, [pc, #48]	; (8000784 <HAL_TIM_MspPostInit+0x58>)
 8000752:	f043 0304 	orr.w	r3, r3, #4
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <HAL_TIM_MspPostInit+0x58>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f003 0304 	and.w	r3, r3, #4
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin|PWM3_Pin|PWM4_Pin;
 8000764:	230f      	movs	r3, #15
 8000766:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000768:	2302      	movs	r3, #2
 800076a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2302      	movs	r3, #2
 800076e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	f107 0310 	add.w	r3, r7, #16
 8000774:	4619      	mov	r1, r3
 8000776:	4804      	ldr	r0, [pc, #16]	; (8000788 <HAL_TIM_MspPostInit+0x5c>)
 8000778:	f000 f9d6 	bl	8000b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800077c:	bf00      	nop
 800077e:	3720      	adds	r7, #32
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40021000 	.word	0x40021000
 8000788:	40010800 	.word	0x40010800

0800078c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <NMI_Handler+0x4>

08000792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <HardFault_Handler+0x4>

08000798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800079c:	e7fe      	b.n	800079c <MemManage_Handler+0x4>

0800079e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <BusFault_Handler+0x4>

080007a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <UsageFault_Handler+0x4>

080007aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr

080007b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr

080007c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr

080007ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d2:	f000 f87f 	bl	80008d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007e0:	4802      	ldr	r0, [pc, #8]	; (80007ec <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80007e2:	f000 fc4a 	bl	800107a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000f84 	.word	0x20000f84

080007f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007fc:	f7ff fff8 	bl	80007f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000800:	480b      	ldr	r0, [pc, #44]	; (8000830 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000802:	490c      	ldr	r1, [pc, #48]	; (8000834 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000804:	4a0c      	ldr	r2, [pc, #48]	; (8000838 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000808:	e002      	b.n	8000810 <LoopCopyDataInit>

0800080a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800080c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080e:	3304      	adds	r3, #4

08000810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000814:	d3f9      	bcc.n	800080a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000816:	4a09      	ldr	r2, [pc, #36]	; (800083c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000818:	4c09      	ldr	r4, [pc, #36]	; (8000840 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800081c:	e001      	b.n	8000822 <LoopFillZerobss>

0800081e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000820:	3204      	adds	r2, #4

08000822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000824:	d3fb      	bcc.n	800081e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000826:	f007 fdff 	bl	8008428 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800082a:	f7ff fc8f 	bl	800014c <main>
  bx lr
 800082e:	4770      	bx	lr
  ldr r0, =_sdata
 8000830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000834:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000838:	0800850c 	.word	0x0800850c
  ldr r2, =_sbss
 800083c:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000840:	20001494 	.word	0x20001494

08000844 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000844:	e7fe      	b.n	8000844 <ADC1_2_IRQHandler>
	...

08000848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <HAL_Init+0x28>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a07      	ldr	r2, [pc, #28]	; (8000870 <HAL_Init+0x28>)
 8000852:	f043 0310 	orr.w	r3, r3, #16
 8000856:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000858:	2003      	movs	r0, #3
 800085a:	f000 f923 	bl	8000aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800085e:	200f      	movs	r0, #15
 8000860:	f000 f808 	bl	8000874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000864:	f7ff fe88 	bl	8000578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40022000 	.word	0x40022000

08000874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_InitTick+0x54>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_InitTick+0x58>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	4619      	mov	r1, r3
 8000886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088a:	fbb3 f3f1 	udiv	r3, r3, r1
 800088e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f93b 	bl	8000b0e <HAL_SYSTICK_Config>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	e00e      	b.n	80008c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2b0f      	cmp	r3, #15
 80008a6:	d80a      	bhi.n	80008be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a8:	2200      	movs	r2, #0
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	f04f 30ff 	mov.w	r0, #4294967295
 80008b0:	f000 f903 	bl	8000aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b4:	4a06      	ldr	r2, [pc, #24]	; (80008d0 <HAL_InitTick+0x5c>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ba:	2300      	movs	r3, #0
 80008bc:	e000      	b.n	80008c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000000 	.word	0x20000000
 80008cc:	20000008 	.word	0x20000008
 80008d0:	20000004 	.word	0x20000004

080008d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <HAL_IncTick+0x1c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	461a      	mov	r2, r3
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <HAL_IncTick+0x20>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4413      	add	r3, r2
 80008e4:	4a03      	ldr	r2, [pc, #12]	; (80008f4 <HAL_IncTick+0x20>)
 80008e6:	6013      	str	r3, [r2, #0]
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	20000008 	.word	0x20000008
 80008f4:	200002b8 	.word	0x200002b8

080008f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return uwTick;
 80008fc:	4b02      	ldr	r3, [pc, #8]	; (8000908 <HAL_GetTick+0x10>)
 80008fe:	681b      	ldr	r3, [r3, #0]
}
 8000900:	4618      	mov	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	200002b8 	.word	0x200002b8

0800090c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f003 0307 	and.w	r3, r3, #7
 800091a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <__NVIC_SetPriorityGrouping+0x44>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000928:	4013      	ands	r3, r2
 800092a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000934:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800093c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800093e:	4a04      	ldr	r2, [pc, #16]	; (8000950 <__NVIC_SetPriorityGrouping+0x44>)
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	60d3      	str	r3, [r2, #12]
}
 8000944:	bf00      	nop
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000958:	4b04      	ldr	r3, [pc, #16]	; (800096c <__NVIC_GetPriorityGrouping+0x18>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	0a1b      	lsrs	r3, r3, #8
 800095e:	f003 0307 	and.w	r3, r3, #7
}
 8000962:	4618      	mov	r0, r3
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800097a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097e:	2b00      	cmp	r3, #0
 8000980:	db0b      	blt.n	800099a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	f003 021f 	and.w	r2, r3, #31
 8000988:	4906      	ldr	r1, [pc, #24]	; (80009a4 <__NVIC_EnableIRQ+0x34>)
 800098a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098e:	095b      	lsrs	r3, r3, #5
 8000990:	2001      	movs	r0, #1
 8000992:	fa00 f202 	lsl.w	r2, r0, r2
 8000996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	e000e100 	.word	0xe000e100

080009a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	6039      	str	r1, [r7, #0]
 80009b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	db0a      	blt.n	80009d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	490c      	ldr	r1, [pc, #48]	; (80009f4 <__NVIC_SetPriority+0x4c>)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	0112      	lsls	r2, r2, #4
 80009c8:	b2d2      	uxtb	r2, r2
 80009ca:	440b      	add	r3, r1
 80009cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d0:	e00a      	b.n	80009e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4908      	ldr	r1, [pc, #32]	; (80009f8 <__NVIC_SetPriority+0x50>)
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	f003 030f 	and.w	r3, r3, #15
 80009de:	3b04      	subs	r3, #4
 80009e0:	0112      	lsls	r2, r2, #4
 80009e2:	b2d2      	uxtb	r2, r2
 80009e4:	440b      	add	r3, r1
 80009e6:	761a      	strb	r2, [r3, #24]
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000e100 	.word	0xe000e100
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b089      	sub	sp, #36	; 0x24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f003 0307 	and.w	r3, r3, #7
 8000a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	f1c3 0307 	rsb	r3, r3, #7
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	bf28      	it	cs
 8000a1a:	2304      	movcs	r3, #4
 8000a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	3304      	adds	r3, #4
 8000a22:	2b06      	cmp	r3, #6
 8000a24:	d902      	bls.n	8000a2c <NVIC_EncodePriority+0x30>
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	3b03      	subs	r3, #3
 8000a2a:	e000      	b.n	8000a2e <NVIC_EncodePriority+0x32>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a30:	f04f 32ff 	mov.w	r2, #4294967295
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	43da      	mvns	r2, r3
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	401a      	ands	r2, r3
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a44:	f04f 31ff 	mov.w	r1, #4294967295
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4e:	43d9      	mvns	r1, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a54:	4313      	orrs	r3, r2
         );
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3724      	adds	r7, #36	; 0x24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a70:	d301      	bcc.n	8000a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a72:	2301      	movs	r3, #1
 8000a74:	e00f      	b.n	8000a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <SysTick_Config+0x40>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a7e:	210f      	movs	r1, #15
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	f7ff ff90 	bl	80009a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <SysTick_Config+0x40>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8e:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <SysTick_Config+0x40>)
 8000a90:	2207      	movs	r2, #7
 8000a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	e000e010 	.word	0xe000e010

08000aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff ff2d 	bl	800090c <__NVIC_SetPriorityGrouping>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b086      	sub	sp, #24
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
 8000ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000acc:	f7ff ff42 	bl	8000954 <__NVIC_GetPriorityGrouping>
 8000ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	68b9      	ldr	r1, [r7, #8]
 8000ad6:	6978      	ldr	r0, [r7, #20]
 8000ad8:	f7ff ff90 	bl	80009fc <NVIC_EncodePriority>
 8000adc:	4602      	mov	r2, r0
 8000ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff5f 	bl	80009a8 <__NVIC_SetPriority>
}
 8000aea:	bf00      	nop
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	4603      	mov	r3, r0
 8000afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff35 	bl	8000970 <__NVIC_EnableIRQ>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff ffa2 	bl	8000a60 <SysTick_Config>
 8000b1c:	4603      	mov	r3, r0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b08b      	sub	sp, #44	; 0x2c
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b3a:	e169      	b.n	8000e10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	69fa      	ldr	r2, [r7, #28]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	f040 8158 	bne.w	8000e0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	4a9a      	ldr	r2, [pc, #616]	; (8000dc8 <HAL_GPIO_Init+0x2a0>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d05e      	beq.n	8000c22 <HAL_GPIO_Init+0xfa>
 8000b64:	4a98      	ldr	r2, [pc, #608]	; (8000dc8 <HAL_GPIO_Init+0x2a0>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d875      	bhi.n	8000c56 <HAL_GPIO_Init+0x12e>
 8000b6a:	4a98      	ldr	r2, [pc, #608]	; (8000dcc <HAL_GPIO_Init+0x2a4>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d058      	beq.n	8000c22 <HAL_GPIO_Init+0xfa>
 8000b70:	4a96      	ldr	r2, [pc, #600]	; (8000dcc <HAL_GPIO_Init+0x2a4>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d86f      	bhi.n	8000c56 <HAL_GPIO_Init+0x12e>
 8000b76:	4a96      	ldr	r2, [pc, #600]	; (8000dd0 <HAL_GPIO_Init+0x2a8>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d052      	beq.n	8000c22 <HAL_GPIO_Init+0xfa>
 8000b7c:	4a94      	ldr	r2, [pc, #592]	; (8000dd0 <HAL_GPIO_Init+0x2a8>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d869      	bhi.n	8000c56 <HAL_GPIO_Init+0x12e>
 8000b82:	4a94      	ldr	r2, [pc, #592]	; (8000dd4 <HAL_GPIO_Init+0x2ac>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d04c      	beq.n	8000c22 <HAL_GPIO_Init+0xfa>
 8000b88:	4a92      	ldr	r2, [pc, #584]	; (8000dd4 <HAL_GPIO_Init+0x2ac>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d863      	bhi.n	8000c56 <HAL_GPIO_Init+0x12e>
 8000b8e:	4a92      	ldr	r2, [pc, #584]	; (8000dd8 <HAL_GPIO_Init+0x2b0>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d046      	beq.n	8000c22 <HAL_GPIO_Init+0xfa>
 8000b94:	4a90      	ldr	r2, [pc, #576]	; (8000dd8 <HAL_GPIO_Init+0x2b0>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d85d      	bhi.n	8000c56 <HAL_GPIO_Init+0x12e>
 8000b9a:	2b12      	cmp	r3, #18
 8000b9c:	d82a      	bhi.n	8000bf4 <HAL_GPIO_Init+0xcc>
 8000b9e:	2b12      	cmp	r3, #18
 8000ba0:	d859      	bhi.n	8000c56 <HAL_GPIO_Init+0x12e>
 8000ba2:	a201      	add	r2, pc, #4	; (adr r2, 8000ba8 <HAL_GPIO_Init+0x80>)
 8000ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba8:	08000c23 	.word	0x08000c23
 8000bac:	08000bfd 	.word	0x08000bfd
 8000bb0:	08000c0f 	.word	0x08000c0f
 8000bb4:	08000c51 	.word	0x08000c51
 8000bb8:	08000c57 	.word	0x08000c57
 8000bbc:	08000c57 	.word	0x08000c57
 8000bc0:	08000c57 	.word	0x08000c57
 8000bc4:	08000c57 	.word	0x08000c57
 8000bc8:	08000c57 	.word	0x08000c57
 8000bcc:	08000c57 	.word	0x08000c57
 8000bd0:	08000c57 	.word	0x08000c57
 8000bd4:	08000c57 	.word	0x08000c57
 8000bd8:	08000c57 	.word	0x08000c57
 8000bdc:	08000c57 	.word	0x08000c57
 8000be0:	08000c57 	.word	0x08000c57
 8000be4:	08000c57 	.word	0x08000c57
 8000be8:	08000c57 	.word	0x08000c57
 8000bec:	08000c05 	.word	0x08000c05
 8000bf0:	08000c19 	.word	0x08000c19
 8000bf4:	4a79      	ldr	r2, [pc, #484]	; (8000ddc <HAL_GPIO_Init+0x2b4>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d013      	beq.n	8000c22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bfa:	e02c      	b.n	8000c56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	623b      	str	r3, [r7, #32]
          break;
 8000c02:	e029      	b.n	8000c58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	3304      	adds	r3, #4
 8000c0a:	623b      	str	r3, [r7, #32]
          break;
 8000c0c:	e024      	b.n	8000c58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	3308      	adds	r3, #8
 8000c14:	623b      	str	r3, [r7, #32]
          break;
 8000c16:	e01f      	b.n	8000c58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	330c      	adds	r3, #12
 8000c1e:	623b      	str	r3, [r7, #32]
          break;
 8000c20:	e01a      	b.n	8000c58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d102      	bne.n	8000c30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	623b      	str	r3, [r7, #32]
          break;
 8000c2e:	e013      	b.n	8000c58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d105      	bne.n	8000c44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c38:	2308      	movs	r3, #8
 8000c3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	69fa      	ldr	r2, [r7, #28]
 8000c40:	611a      	str	r2, [r3, #16]
          break;
 8000c42:	e009      	b.n	8000c58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c44:	2308      	movs	r3, #8
 8000c46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	69fa      	ldr	r2, [r7, #28]
 8000c4c:	615a      	str	r2, [r3, #20]
          break;
 8000c4e:	e003      	b.n	8000c58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c50:	2300      	movs	r3, #0
 8000c52:	623b      	str	r3, [r7, #32]
          break;
 8000c54:	e000      	b.n	8000c58 <HAL_GPIO_Init+0x130>
          break;
 8000c56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	2bff      	cmp	r3, #255	; 0xff
 8000c5c:	d801      	bhi.n	8000c62 <HAL_GPIO_Init+0x13a>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	e001      	b.n	8000c66 <HAL_GPIO_Init+0x13e>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	3304      	adds	r3, #4
 8000c66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	2bff      	cmp	r3, #255	; 0xff
 8000c6c:	d802      	bhi.n	8000c74 <HAL_GPIO_Init+0x14c>
 8000c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	e002      	b.n	8000c7a <HAL_GPIO_Init+0x152>
 8000c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c76:	3b08      	subs	r3, #8
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	210f      	movs	r1, #15
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	fa01 f303 	lsl.w	r3, r1, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	6a39      	ldr	r1, [r7, #32]
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	fa01 f303 	lsl.w	r3, r1, r3
 8000c94:	431a      	orrs	r2, r3
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f000 80b1 	beq.w	8000e0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ca8:	4b4d      	ldr	r3, [pc, #308]	; (8000de0 <HAL_GPIO_Init+0x2b8>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a4c      	ldr	r2, [pc, #304]	; (8000de0 <HAL_GPIO_Init+0x2b8>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6193      	str	r3, [r2, #24]
 8000cb4:	4b4a      	ldr	r3, [pc, #296]	; (8000de0 <HAL_GPIO_Init+0x2b8>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cc0:	4a48      	ldr	r2, [pc, #288]	; (8000de4 <HAL_GPIO_Init+0x2bc>)
 8000cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc4:	089b      	lsrs	r3, r3, #2
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ccc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	220f      	movs	r2, #15
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a40      	ldr	r2, [pc, #256]	; (8000de8 <HAL_GPIO_Init+0x2c0>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d013      	beq.n	8000d14 <HAL_GPIO_Init+0x1ec>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a3f      	ldr	r2, [pc, #252]	; (8000dec <HAL_GPIO_Init+0x2c4>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d00d      	beq.n	8000d10 <HAL_GPIO_Init+0x1e8>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a3e      	ldr	r2, [pc, #248]	; (8000df0 <HAL_GPIO_Init+0x2c8>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d007      	beq.n	8000d0c <HAL_GPIO_Init+0x1e4>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a3d      	ldr	r2, [pc, #244]	; (8000df4 <HAL_GPIO_Init+0x2cc>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d101      	bne.n	8000d08 <HAL_GPIO_Init+0x1e0>
 8000d04:	2303      	movs	r3, #3
 8000d06:	e006      	b.n	8000d16 <HAL_GPIO_Init+0x1ee>
 8000d08:	2304      	movs	r3, #4
 8000d0a:	e004      	b.n	8000d16 <HAL_GPIO_Init+0x1ee>
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	e002      	b.n	8000d16 <HAL_GPIO_Init+0x1ee>
 8000d10:	2301      	movs	r3, #1
 8000d12:	e000      	b.n	8000d16 <HAL_GPIO_Init+0x1ee>
 8000d14:	2300      	movs	r3, #0
 8000d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d18:	f002 0203 	and.w	r2, r2, #3
 8000d1c:	0092      	lsls	r2, r2, #2
 8000d1e:	4093      	lsls	r3, r2
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d26:	492f      	ldr	r1, [pc, #188]	; (8000de4 <HAL_GPIO_Init+0x2bc>)
 8000d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2a:	089b      	lsrs	r3, r3, #2
 8000d2c:	3302      	adds	r3, #2
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d006      	beq.n	8000d4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d40:	4b2d      	ldr	r3, [pc, #180]	; (8000df8 <HAL_GPIO_Init+0x2d0>)
 8000d42:	689a      	ldr	r2, [r3, #8]
 8000d44:	492c      	ldr	r1, [pc, #176]	; (8000df8 <HAL_GPIO_Init+0x2d0>)
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	608b      	str	r3, [r1, #8]
 8000d4c:	e006      	b.n	8000d5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d4e:	4b2a      	ldr	r3, [pc, #168]	; (8000df8 <HAL_GPIO_Init+0x2d0>)
 8000d50:	689a      	ldr	r2, [r3, #8]
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	43db      	mvns	r3, r3
 8000d56:	4928      	ldr	r1, [pc, #160]	; (8000df8 <HAL_GPIO_Init+0x2d0>)
 8000d58:	4013      	ands	r3, r2
 8000d5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d006      	beq.n	8000d76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d68:	4b23      	ldr	r3, [pc, #140]	; (8000df8 <HAL_GPIO_Init+0x2d0>)
 8000d6a:	68da      	ldr	r2, [r3, #12]
 8000d6c:	4922      	ldr	r1, [pc, #136]	; (8000df8 <HAL_GPIO_Init+0x2d0>)
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	60cb      	str	r3, [r1, #12]
 8000d74:	e006      	b.n	8000d84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d76:	4b20      	ldr	r3, [pc, #128]	; (8000df8 <HAL_GPIO_Init+0x2d0>)
 8000d78:	68da      	ldr	r2, [r3, #12]
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	491e      	ldr	r1, [pc, #120]	; (8000df8 <HAL_GPIO_Init+0x2d0>)
 8000d80:	4013      	ands	r3, r2
 8000d82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d006      	beq.n	8000d9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d90:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <HAL_GPIO_Init+0x2d0>)
 8000d92:	685a      	ldr	r2, [r3, #4]
 8000d94:	4918      	ldr	r1, [pc, #96]	; (8000df8 <HAL_GPIO_Init+0x2d0>)
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	604b      	str	r3, [r1, #4]
 8000d9c:	e006      	b.n	8000dac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <HAL_GPIO_Init+0x2d0>)
 8000da0:	685a      	ldr	r2, [r3, #4]
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	43db      	mvns	r3, r3
 8000da6:	4914      	ldr	r1, [pc, #80]	; (8000df8 <HAL_GPIO_Init+0x2d0>)
 8000da8:	4013      	ands	r3, r2
 8000daa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d021      	beq.n	8000dfc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000db8:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <HAL_GPIO_Init+0x2d0>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	490e      	ldr	r1, [pc, #56]	; (8000df8 <HAL_GPIO_Init+0x2d0>)
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	600b      	str	r3, [r1, #0]
 8000dc4:	e021      	b.n	8000e0a <HAL_GPIO_Init+0x2e2>
 8000dc6:	bf00      	nop
 8000dc8:	10320000 	.word	0x10320000
 8000dcc:	10310000 	.word	0x10310000
 8000dd0:	10220000 	.word	0x10220000
 8000dd4:	10210000 	.word	0x10210000
 8000dd8:	10120000 	.word	0x10120000
 8000ddc:	10110000 	.word	0x10110000
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40010000 	.word	0x40010000
 8000de8:	40010800 	.word	0x40010800
 8000dec:	40010c00 	.word	0x40010c00
 8000df0:	40011000 	.word	0x40011000
 8000df4:	40011400 	.word	0x40011400
 8000df8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <HAL_GPIO_Init+0x304>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	43db      	mvns	r3, r3
 8000e04:	4909      	ldr	r1, [pc, #36]	; (8000e2c <HAL_GPIO_Init+0x304>)
 8000e06:	4013      	ands	r3, r2
 8000e08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e16:	fa22 f303 	lsr.w	r3, r2, r3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f47f ae8e 	bne.w	8000b3c <HAL_GPIO_Init+0x14>
  }
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	372c      	adds	r7, #44	; 0x2c
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	40010400 	.word	0x40010400

08000e30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e32:	b08b      	sub	sp, #44	; 0x2c
 8000e34:	af06      	add	r7, sp, #24
 8000e36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e0f1      	b.n	8001026 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d106      	bne.n	8000e5c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f007 f83c 	bl	8007ed4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2203      	movs	r2, #3
 8000e60:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f002 ffb1 	bl	8003dd0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	687e      	ldr	r6, [r7, #4]
 8000e76:	466d      	mov	r5, sp
 8000e78:	f106 0410 	add.w	r4, r6, #16
 8000e7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e80:	6823      	ldr	r3, [r4, #0]
 8000e82:	602b      	str	r3, [r5, #0]
 8000e84:	1d33      	adds	r3, r6, #4
 8000e86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e88:	6838      	ldr	r0, [r7, #0]
 8000e8a:	f002 ff7b 	bl	8003d84 <USB_CoreInit>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d005      	beq.n	8000ea0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2202      	movs	r2, #2
 8000e98:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e0c2      	b.n	8001026 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f002 ffac 	bl	8003e04 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]
 8000eb0:	e040      	b.n	8000f34 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	1c5a      	adds	r2, r3, #1
 8000eb8:	4613      	mov	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	440b      	add	r3, r1
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	1c5a      	adds	r2, r3, #1
 8000ece:	4613      	mov	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	440b      	add	r3, r1
 8000ed8:	7bfa      	ldrb	r2, [r7, #15]
 8000eda:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	1c5a      	adds	r2, r3, #1
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	440b      	add	r3, r1
 8000eec:	3303      	adds	r3, #3
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ef2:	7bfa      	ldrb	r2, [r7, #15]
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	440b      	add	r3, r1
 8000f00:	3338      	adds	r3, #56	; 0x38
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f06:	7bfa      	ldrb	r2, [r7, #15]
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	440b      	add	r3, r1
 8000f14:	333c      	adds	r3, #60	; 0x3c
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f1a:	7bfa      	ldrb	r2, [r7, #15]
 8000f1c:	6879      	ldr	r1, [r7, #4]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	440b      	add	r3, r1
 8000f28:	3340      	adds	r3, #64	; 0x40
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	3301      	adds	r3, #1
 8000f32:	73fb      	strb	r3, [r7, #15]
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d3b9      	bcc.n	8000eb2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73fb      	strb	r3, [r7, #15]
 8000f42:	e044      	b.n	8000fce <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f44:	7bfa      	ldrb	r2, [r7, #15]
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	440b      	add	r3, r1
 8000f52:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	440b      	add	r3, r1
 8000f68:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000f6c:	7bfa      	ldrb	r2, [r7, #15]
 8000f6e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f70:	7bfa      	ldrb	r2, [r7, #15]
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	4613      	mov	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	440b      	add	r3, r1
 8000f7e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f86:	7bfa      	ldrb	r2, [r7, #15]
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	440b      	add	r3, r1
 8000f94:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f9c:	7bfa      	ldrb	r2, [r7, #15]
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	440b      	add	r3, r1
 8000faa:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000fb2:	7bfa      	ldrb	r2, [r7, #15]
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	73fb      	strb	r3, [r7, #15]
 8000fce:	7bfa      	ldrb	r2, [r7, #15]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d3b5      	bcc.n	8000f44 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	687e      	ldr	r6, [r7, #4]
 8000fe0:	466d      	mov	r5, sp
 8000fe2:	f106 0410 	add.w	r4, r6, #16
 8000fe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	602b      	str	r3, [r5, #0]
 8000fee:	1d33      	adds	r3, r6, #4
 8000ff0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ff2:	6838      	ldr	r0, [r7, #0]
 8000ff4:	f002 ff12 	bl	8003e1c <USB_DevInit>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d005      	beq.n	800100a <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2202      	movs	r2, #2
 8001002:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e00d      	b.n	8001026 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2201      	movs	r2, #1
 8001016:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f005 f993 	bl	800634a <USB_DevDisconnect>

  return HAL_OK;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800102e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800103c:	2b01      	cmp	r3, #1
 800103e:	d101      	bne.n	8001044 <HAL_PCD_Start+0x16>
 8001040:	2302      	movs	r3, #2
 8001042:	e016      	b.n	8001072 <HAL_PCD_Start+0x44>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2201      	movs	r2, #1
 8001048:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f002 fea7 	bl	8003da4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001056:	2101      	movs	r1, #1
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f007 f9ae 	bl	80083ba <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f005 f967 	bl	8006336 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b088      	sub	sp, #32
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f005 f969 	bl	800635e <USB_ReadInterrupts>
 800108c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 fb1b 	bl	80016d4 <PCD_EP_ISR_Handler>

    return;
 800109e:	e119      	b.n	80012d4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d013      	beq.n	80010d2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010bc:	b292      	uxth	r2, r2
 80010be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f006 ff81 	bl	8007fca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80010c8:	2100      	movs	r1, #0
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f000 f905 	bl	80012da <HAL_PCD_SetAddress>

    return;
 80010d0:	e100      	b.n	80012d4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d00c      	beq.n	80010f6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80010ee:	b292      	uxth	r2, r2
 80010f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80010f4:	e0ee      	b.n	80012d4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00c      	beq.n	800111a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001108:	b29a      	uxth	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001112:	b292      	uxth	r2, r2
 8001114:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001118:	e0dc      	b.n	80012d4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d027      	beq.n	8001174 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800112c:	b29a      	uxth	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 0204 	bic.w	r2, r2, #4
 8001136:	b292      	uxth	r2, r2
 8001138:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001144:	b29a      	uxth	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 0208 	bic.w	r2, r2, #8
 800114e:	b292      	uxth	r2, r2
 8001150:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f006 ff71 	bl	800803c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001162:	b29a      	uxth	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800116c:	b292      	uxth	r2, r2
 800116e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001172:	e0af      	b.n	80012d4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 8083 	beq.w	8001286 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001180:	2300      	movs	r3, #0
 8001182:	77fb      	strb	r3, [r7, #31]
 8001184:	e010      	b.n	80011a8 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	7ffb      	ldrb	r3, [r7, #31]
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	441a      	add	r2, r3
 8001192:	7ffb      	ldrb	r3, [r7, #31]
 8001194:	8812      	ldrh	r2, [r2, #0]
 8001196:	b292      	uxth	r2, r2
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	3320      	adds	r3, #32
 800119c:	443b      	add	r3, r7
 800119e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80011a2:	7ffb      	ldrb	r3, [r7, #31]
 80011a4:	3301      	adds	r3, #1
 80011a6:	77fb      	strb	r3, [r7, #31]
 80011a8:	7ffb      	ldrb	r3, [r7, #31]
 80011aa:	2b07      	cmp	r3, #7
 80011ac:	d9eb      	bls.n	8001186 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f042 0201 	orr.w	r2, r2, #1
 80011c0:	b292      	uxth	r2, r2
 80011c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f022 0201 	bic.w	r2, r2, #1
 80011d8:	b292      	uxth	r2, r2
 80011da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80011de:	bf00      	nop
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f6      	beq.n	80011e0 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001204:	b292      	uxth	r2, r2
 8001206:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800120a:	2300      	movs	r3, #0
 800120c:	77fb      	strb	r3, [r7, #31]
 800120e:	e00f      	b.n	8001230 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001210:	7ffb      	ldrb	r3, [r7, #31]
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	6812      	ldr	r2, [r2, #0]
 8001216:	4611      	mov	r1, r2
 8001218:	7ffa      	ldrb	r2, [r7, #31]
 800121a:	0092      	lsls	r2, r2, #2
 800121c:	440a      	add	r2, r1
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	3320      	adds	r3, #32
 8001222:	443b      	add	r3, r7
 8001224:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001228:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800122a:	7ffb      	ldrb	r3, [r7, #31]
 800122c:	3301      	adds	r3, #1
 800122e:	77fb      	strb	r3, [r7, #31]
 8001230:	7ffb      	ldrb	r3, [r7, #31]
 8001232:	2b07      	cmp	r3, #7
 8001234:	d9ec      	bls.n	8001210 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800123e:	b29a      	uxth	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f042 0208 	orr.w	r2, r2, #8
 8001248:	b292      	uxth	r2, r2
 800124a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001256:	b29a      	uxth	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001260:	b292      	uxth	r2, r2
 8001262:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800126e:	b29a      	uxth	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f042 0204 	orr.w	r2, r2, #4
 8001278:	b292      	uxth	r2, r2
 800127a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f006 fec2 	bl	8008008 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001284:	e026      	b.n	80012d4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800128c:	2b00      	cmp	r3, #0
 800128e:	d00f      	beq.n	80012b0 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001298:	b29a      	uxth	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012a2:	b292      	uxth	r2, r2
 80012a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f006 fe80 	bl	8007fae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80012ae:	e011      	b.n	80012d4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00c      	beq.n	80012d4 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012cc:	b292      	uxth	r2, r2
 80012ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80012d2:	bf00      	nop
  }
}
 80012d4:	3720      	adds	r7, #32
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	460b      	mov	r3, r1
 80012e4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d101      	bne.n	80012f4 <HAL_PCD_SetAddress+0x1a>
 80012f0:	2302      	movs	r3, #2
 80012f2:	e013      	b.n	800131c <HAL_PCD_SetAddress+0x42>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	78fa      	ldrb	r2, [r7, #3]
 8001300:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	78fa      	ldrb	r2, [r7, #3]
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f004 ffff 	bl	8006310 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	4608      	mov	r0, r1
 800132e:	4611      	mov	r1, r2
 8001330:	461a      	mov	r2, r3
 8001332:	4603      	mov	r3, r0
 8001334:	70fb      	strb	r3, [r7, #3]
 8001336:	460b      	mov	r3, r1
 8001338:	803b      	strh	r3, [r7, #0]
 800133a:	4613      	mov	r3, r2
 800133c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001342:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001346:	2b00      	cmp	r3, #0
 8001348:	da0e      	bge.n	8001368 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800134a:	78fb      	ldrb	r3, [r7, #3]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	4613      	mov	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2201      	movs	r2, #1
 8001364:	705a      	strb	r2, [r3, #1]
 8001366:	e00e      	b.n	8001386 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001368:	78fb      	ldrb	r3, [r7, #3]
 800136a:	f003 0207 	and.w	r2, r3, #7
 800136e:	4613      	mov	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2200      	movs	r2, #0
 8001384:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001386:	78fb      	ldrb	r3, [r7, #3]
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	b2da      	uxtb	r2, r3
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001392:	883a      	ldrh	r2, [r7, #0]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	78ba      	ldrb	r2, [r7, #2]
 800139c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800139e:	78bb      	ldrb	r3, [r7, #2]
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d102      	bne.n	80013aa <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2200      	movs	r2, #0
 80013a8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d101      	bne.n	80013b8 <HAL_PCD_EP_Open+0x94>
 80013b4:	2302      	movs	r3, #2
 80013b6:	e00e      	b.n	80013d6 <HAL_PCD_EP_Open+0xb2>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	68f9      	ldr	r1, [r7, #12]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f002 fd48 	bl	8003e5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80013d4:	7afb      	ldrb	r3, [r7, #11]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b084      	sub	sp, #16
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	460b      	mov	r3, r1
 80013e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	da0e      	bge.n	8001410 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013f2:	78fb      	ldrb	r3, [r7, #3]
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	1c5a      	adds	r2, r3, #1
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2201      	movs	r2, #1
 800140c:	705a      	strb	r2, [r3, #1]
 800140e:	e00e      	b.n	800142e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001410:	78fb      	ldrb	r3, [r7, #3]
 8001412:	f003 0207 	and.w	r2, r3, #7
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2200      	movs	r2, #0
 800142c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800142e:	78fb      	ldrb	r3, [r7, #3]
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	b2da      	uxtb	r2, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001440:	2b01      	cmp	r3, #1
 8001442:	d101      	bne.n	8001448 <HAL_PCD_EP_Close+0x6a>
 8001444:	2302      	movs	r3, #2
 8001446:	e00e      	b.n	8001466 <HAL_PCD_EP_Close+0x88>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68f9      	ldr	r1, [r7, #12]
 8001456:	4618      	mov	r0, r3
 8001458:	f003 f8c0 	bl	80045dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b086      	sub	sp, #24
 8001472:	af00      	add	r7, sp, #0
 8001474:	60f8      	str	r0, [r7, #12]
 8001476:	607a      	str	r2, [r7, #4]
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	460b      	mov	r3, r1
 800147c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800147e:	7afb      	ldrb	r3, [r7, #11]
 8001480:	f003 0207 	and.w	r2, r3, #7
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	4413      	add	r3, r2
 8001494:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	2200      	movs	r2, #0
 80014a6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	2200      	movs	r2, #0
 80014ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014ae:	7afb      	ldrb	r3, [r7, #11]
 80014b0:	f003 0307 	and.w	r3, r3, #7
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6979      	ldr	r1, [r7, #20]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f003 fa77 	bl	80049b4 <USB_EPStartXfer>

  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80014dc:	78fb      	ldrb	r3, [r7, #3]
 80014de:	f003 0207 	and.w	r2, r3, #7
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	440b      	add	r3, r1
 80014ee:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr

080014fe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
 8001504:	60f8      	str	r0, [r7, #12]
 8001506:	607a      	str	r2, [r7, #4]
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	460b      	mov	r3, r1
 800150c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800150e:	7afb      	ldrb	r3, [r7, #11]
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	1c5a      	adds	r2, r3, #1
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	4413      	add	r3, r2
 8001522:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	2200      	movs	r2, #0
 8001542:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	2201      	movs	r2, #1
 8001548:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800154a:	7afb      	ldrb	r3, [r7, #11]
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	b2da      	uxtb	r2, r3
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6979      	ldr	r1, [r7, #20]
 800155c:	4618      	mov	r0, r3
 800155e:	f003 fa29 	bl	80049b4 <USB_EPStartXfer>

  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001578:	78fb      	ldrb	r3, [r7, #3]
 800157a:	f003 0207 	and.w	r2, r3, #7
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	429a      	cmp	r2, r3
 8001584:	d901      	bls.n	800158a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e04c      	b.n	8001624 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800158a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800158e:	2b00      	cmp	r3, #0
 8001590:	da0e      	bge.n	80015b0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001592:	78fb      	ldrb	r3, [r7, #3]
 8001594:	f003 0307 	and.w	r3, r3, #7
 8001598:	1c5a      	adds	r2, r3, #1
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2201      	movs	r2, #1
 80015ac:	705a      	strb	r2, [r3, #1]
 80015ae:	e00c      	b.n	80015ca <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80015b0:	78fa      	ldrb	r2, [r7, #3]
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2201      	movs	r2, #1
 80015ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015d0:	78fb      	ldrb	r3, [r7, #3]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d101      	bne.n	80015ea <HAL_PCD_EP_SetStall+0x7e>
 80015e6:	2302      	movs	r3, #2
 80015e8:	e01c      	b.n	8001624 <HAL_PCD_EP_SetStall+0xb8>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2201      	movs	r2, #1
 80015ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68f9      	ldr	r1, [r7, #12]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f004 fd8c 	bl	8006116 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015fe:	78fb      	ldrb	r3, [r7, #3]
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	2b00      	cmp	r3, #0
 8001606:	d108      	bne.n	800161a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001612:	4619      	mov	r1, r3
 8001614:	4610      	mov	r0, r2
 8001616:	f004 feb1 	bl	800637c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	f003 020f 	and.w	r2, r3, #15
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	429a      	cmp	r2, r3
 8001644:	d901      	bls.n	800164a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e040      	b.n	80016cc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800164a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800164e:	2b00      	cmp	r3, #0
 8001650:	da0e      	bge.n	8001670 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001652:	78fb      	ldrb	r3, [r7, #3]
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	1c5a      	adds	r2, r3, #1
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2201      	movs	r2, #1
 800166c:	705a      	strb	r2, [r3, #1]
 800166e:	e00e      	b.n	800168e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	f003 0207 	and.w	r2, r3, #7
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2200      	movs	r2, #0
 8001692:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001694:	78fb      	ldrb	r3, [r7, #3]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	b2da      	uxtb	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d101      	bne.n	80016ae <HAL_PCD_EP_ClrStall+0x82>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e00e      	b.n	80016cc <HAL_PCD_EP_ClrStall+0xa0>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2201      	movs	r2, #1
 80016b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68f9      	ldr	r1, [r7, #12]
 80016bc:	4618      	mov	r0, r3
 80016be:	f004 fd7a 	bl	80061b6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b096      	sub	sp, #88	; 0x58
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80016dc:	e3bf      	b.n	8001e5e <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80016ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	f003 030f 	and.w	r3, r3, #15
 80016f4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80016f8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f040 8179 	bne.w	80019f4 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001702:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001706:	f003 0310 	and.w	r3, r3, #16
 800170a:	2b00      	cmp	r3, #0
 800170c:	d152      	bne.n	80017b4 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	b29b      	uxth	r3, r3
 8001716:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800171a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800171e:	81fb      	strh	r3, [r7, #14]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	89fb      	ldrh	r3, [r7, #14]
 8001726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800172a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800172e:	b29b      	uxth	r3, r3
 8001730:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3328      	adds	r3, #40	; 0x28
 8001736:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001740:	b29b      	uxth	r3, r3
 8001742:	461a      	mov	r2, r3
 8001744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	4413      	add	r3, r2
 800174c:	3302      	adds	r3, #2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	4413      	add	r3, r2
 8001756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001762:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001766:	695a      	ldr	r2, [r3, #20]
 8001768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	441a      	add	r2, r3
 800176e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001770:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001772:	2100      	movs	r1, #0
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f006 fc00 	bl	8007f7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 836b 	beq.w	8001e5e <PCD_EP_ISR_Handler+0x78a>
 8001788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	2b00      	cmp	r3, #0
 800178e:	f040 8366 	bne.w	8001e5e <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001798:	b2db      	uxtb	r3, r3
 800179a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	b292      	uxth	r2, r2
 80017a6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80017b2:	e354      	b.n	8001e5e <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017ba:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80017c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80017ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d034      	beq.n	800183c <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017da:	b29b      	uxth	r3, r3
 80017dc:	461a      	mov	r2, r3
 80017de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4413      	add	r3, r2
 80017e6:	3306      	adds	r3, #6
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017fc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6818      	ldr	r0, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800180a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800180c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800180e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001810:	b29b      	uxth	r3, r3
 8001812:	f004 fe03 	bl	800641c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	b29a      	uxth	r2, r3
 800181e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001822:	4013      	ands	r3, r2
 8001824:	823b      	strh	r3, [r7, #16]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	8a3a      	ldrh	r2, [r7, #16]
 800182c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001830:	b292      	uxth	r2, r2
 8001832:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f006 fb73 	bl	8007f20 <HAL_PCD_SetupStageCallback>
 800183a:	e310      	b.n	8001e5e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800183c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001840:	2b00      	cmp	r3, #0
 8001842:	f280 830c 	bge.w	8001e5e <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	b29a      	uxth	r2, r3
 800184e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001852:	4013      	ands	r3, r2
 8001854:	83fb      	strh	r3, [r7, #30]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	8bfa      	ldrh	r2, [r7, #30]
 800185c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001860:	b292      	uxth	r2, r2
 8001862:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800186c:	b29b      	uxth	r3, r3
 800186e:	461a      	mov	r2, r3
 8001870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	4413      	add	r3, r2
 8001878:	3306      	adds	r3, #6
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	4413      	add	r3, r2
 8001882:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800188c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800188e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d019      	beq.n	80018cc <PCD_EP_ISR_Handler+0x1f8>
 8001898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d015      	beq.n	80018cc <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6818      	ldr	r0, [r3, #0]
 80018a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018a6:	6959      	ldr	r1, [r3, #20]
 80018a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018aa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80018ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ae:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	f004 fdb3 	bl	800641c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80018b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018b8:	695a      	ldr	r2, [r3, #20]
 80018ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	441a      	add	r2, r3
 80018c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018c2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80018c4:	2100      	movs	r1, #0
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f006 fb3c 	bl	8007f44 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80018d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f040 82bd 	bne.w	8001e5e <PCD_EP_ISR_Handler+0x78a>
 80018e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018e8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80018ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80018f0:	f000 82b5 	beq.w	8001e5e <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	61bb      	str	r3, [r7, #24]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001902:	b29b      	uxth	r3, r3
 8001904:	461a      	mov	r2, r3
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	4413      	add	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	b29b      	uxth	r3, r3
 800191a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800191e:	b29a      	uxth	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	801a      	strh	r2, [r3, #0]
 8001924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	2b3e      	cmp	r3, #62	; 0x3e
 800192a:	d91d      	bls.n	8001968 <PCD_EP_ISR_Handler+0x294>
 800192c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	095b      	lsrs	r3, r3, #5
 8001932:	647b      	str	r3, [r7, #68]	; 0x44
 8001934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	f003 031f 	and.w	r3, r3, #31
 800193c:	2b00      	cmp	r3, #0
 800193e:	d102      	bne.n	8001946 <PCD_EP_ISR_Handler+0x272>
 8001940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001942:	3b01      	subs	r3, #1
 8001944:	647b      	str	r3, [r7, #68]	; 0x44
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	b29a      	uxth	r2, r3
 800194c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800194e:	b29b      	uxth	r3, r3
 8001950:	029b      	lsls	r3, r3, #10
 8001952:	b29b      	uxth	r3, r3
 8001954:	4313      	orrs	r3, r2
 8001956:	b29b      	uxth	r3, r3
 8001958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800195c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001960:	b29a      	uxth	r2, r3
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	801a      	strh	r2, [r3, #0]
 8001966:	e026      	b.n	80019b6 <PCD_EP_ISR_Handler+0x2e2>
 8001968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10a      	bne.n	8001986 <PCD_EP_ISR_Handler+0x2b2>
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	b29b      	uxth	r3, r3
 8001976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800197a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800197e:	b29a      	uxth	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	801a      	strh	r2, [r3, #0]
 8001984:	e017      	b.n	80019b6 <PCD_EP_ISR_Handler+0x2e2>
 8001986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	085b      	lsrs	r3, r3, #1
 800198c:	647b      	str	r3, [r7, #68]	; 0x44
 800198e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	d002      	beq.n	80019a0 <PCD_EP_ISR_Handler+0x2cc>
 800199a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800199c:	3301      	adds	r3, #1
 800199e:	647b      	str	r3, [r7, #68]	; 0x44
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	029b      	lsls	r3, r3, #10
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	4313      	orrs	r3, r2
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019c6:	827b      	strh	r3, [r7, #18]
 80019c8:	8a7b      	ldrh	r3, [r7, #18]
 80019ca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80019ce:	827b      	strh	r3, [r7, #18]
 80019d0:	8a7b      	ldrh	r3, [r7, #18]
 80019d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80019d6:	827b      	strh	r3, [r7, #18]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	8a7b      	ldrh	r3, [r7, #18]
 80019de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80019e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80019e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	8013      	strh	r3, [r2, #0]
 80019f2:	e234      	b.n	8001e5e <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a08:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f280 80fc 	bge.w	8001c0a <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a28:	4013      	ands	r3, r2
 8001a2a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001a40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a44:	b292      	uxth	r2, r2
 8001a46:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001a48:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a60:	7b1b      	ldrb	r3, [r3, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d125      	bne.n	8001ab2 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	461a      	mov	r2, r3
 8001a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	4413      	add	r3, r2
 8001a7a:	3306      	adds	r3, #6
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6812      	ldr	r2, [r2, #0]
 8001a82:	4413      	add	r3, r2
 8001a84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a88:	881b      	ldrh	r3, [r3, #0]
 8001a8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a8e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001a92:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 8092 	beq.w	8001bc0 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6818      	ldr	r0, [r3, #0]
 8001aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa2:	6959      	ldr	r1, [r3, #20]
 8001aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa6:	88da      	ldrh	r2, [r3, #6]
 8001aa8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001aac:	f004 fcb6 	bl	800641c <USB_ReadPMA>
 8001ab0:	e086      	b.n	8001bc0 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab4:	78db      	ldrb	r3, [r3, #3]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d10a      	bne.n	8001ad0 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001aba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001abe:	461a      	mov	r2, r3
 8001ac0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f9d9 	bl	8001e7a <HAL_PCD_EP_DB_Receive>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001ace:	e077      	b.n	8001bc0 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aea:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	441a      	add	r2, r3
 8001afc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001b00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d024      	beq.n	8001b78 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4413      	add	r3, r2
 8001b42:	3302      	adds	r3, #2
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6812      	ldr	r2, [r2, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b56:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001b5a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d02e      	beq.n	8001bc0 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6818      	ldr	r0, [r3, #0]
 8001b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b68:	6959      	ldr	r1, [r3, #20]
 8001b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6c:	891a      	ldrh	r2, [r3, #8]
 8001b6e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b72:	f004 fc53 	bl	800641c <USB_ReadPMA>
 8001b76:	e023      	b.n	8001bc0 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	461a      	mov	r2, r3
 8001b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3306      	adds	r3, #6
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	4413      	add	r3, r2
 8001b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ba0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001ba4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d009      	beq.n	8001bc0 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb2:	6959      	ldr	r1, [r3, #20]
 8001bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb6:	895a      	ldrh	r2, [r3, #10]
 8001bb8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bbc:	f004 fc2e 	bl	800641c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc2:	69da      	ldr	r2, [r3, #28]
 8001bc4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bc8:	441a      	add	r2, r3
 8001bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bcc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd0:	695a      	ldr	r2, [r3, #20]
 8001bd2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bd6:	441a      	add	r2, r3
 8001bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bda:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d005      	beq.n	8001bf0 <PCD_EP_ISR_Handler+0x51c>
 8001be4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d206      	bcs.n	8001bfe <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f006 f9a4 	bl	8007f44 <HAL_PCD_DataOutStageCallback>
 8001bfc:	e005      	b.n	8001c0a <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c04:	4618      	mov	r0, r3
 8001c06:	f002 fed5 	bl	80049b4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001c0a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 8123 	beq.w	8001e5e <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001c18:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	881b      	ldrh	r3, [r3, #0]
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c46:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	441a      	add	r2, r3
 8001c58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001c5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c6a:	78db      	ldrb	r3, [r3, #3]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	f040 80a2 	bne.w	8001db6 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c7a:	7b1b      	ldrb	r3, [r3, #12]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 8093 	beq.w	8001da8 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c82:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d046      	beq.n	8001d1c <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c90:	785b      	ldrb	r3, [r3, #1]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d126      	bne.n	8001ce4 <PCD_EP_ISR_Handler+0x610>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	4413      	add	r3, r2
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
 8001cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	011a      	lsls	r2, r3, #4
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	4413      	add	r3, r2
 8001cb8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001cbc:	623b      	str	r3, [r7, #32]
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	801a      	strh	r2, [r3, #0]
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	801a      	strh	r2, [r3, #0]
 8001ce2:	e061      	b.n	8001da8 <PCD_EP_ISR_Handler+0x6d4>
 8001ce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce6:	785b      	ldrb	r3, [r3, #1]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d15d      	bne.n	8001da8 <PCD_EP_ISR_Handler+0x6d4>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d00:	4413      	add	r3, r2
 8001d02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	011a      	lsls	r2, r3, #4
 8001d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d12:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d16:	2200      	movs	r2, #0
 8001d18:	801a      	strh	r2, [r3, #0]
 8001d1a:	e045      	b.n	8001da8 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d24:	785b      	ldrb	r3, [r3, #1]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d126      	bne.n	8001d78 <PCD_EP_ISR_Handler+0x6a4>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d3e:	4413      	add	r3, r2
 8001d40:	637b      	str	r3, [r7, #52]	; 0x34
 8001d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	011a      	lsls	r2, r3, #4
 8001d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d50:	633b      	str	r3, [r7, #48]	; 0x30
 8001d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d60:	801a      	strh	r2, [r3, #0]
 8001d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d74:	801a      	strh	r2, [r3, #0]
 8001d76:	e017      	b.n	8001da8 <PCD_EP_ISR_Handler+0x6d4>
 8001d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d7a:	785b      	ldrb	r3, [r3, #1]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d113      	bne.n	8001da8 <PCD_EP_ISR_Handler+0x6d4>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d8e:	4413      	add	r3, r2
 8001d90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	011a      	lsls	r2, r3, #4
 8001d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001da0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001da4:	2200      	movs	r2, #0
 8001da6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	4619      	mov	r1, r3
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f006 f8e3 	bl	8007f7a <HAL_PCD_DataInStageCallback>
 8001db4:	e053      	b.n	8001e5e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001db6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d146      	bne.n	8001e50 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	461a      	mov	r2, r3
 8001dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3302      	adds	r3, #2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	4413      	add	r3, r2
 8001de0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df0:	699a      	ldr	r2, [r3, #24]
 8001df2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d907      	bls.n	8001e0a <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dfc:	699a      	ldr	r2, [r3, #24]
 8001dfe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e02:	1ad2      	subs	r2, r2, r3
 8001e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e06:	619a      	str	r2, [r3, #24]
 8001e08:	e002      	b.n	8001e10 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d106      	bne.n	8001e26 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f006 f8ab 	bl	8007f7a <HAL_PCD_DataInStageCallback>
 8001e24:	e01b      	b.n	8001e5e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e28:	695a      	ldr	r2, [r3, #20]
 8001e2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e2e:	441a      	add	r2, r3
 8001e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e32:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e36:	69da      	ldr	r2, [r3, #28]
 8001e38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e3c:	441a      	add	r2, r3
 8001e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e40:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f002 fdb3 	bl	80049b4 <USB_EPStartXfer>
 8001e4e:	e006      	b.n	8001e5e <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001e50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e54:	461a      	mov	r2, r3
 8001e56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f91b 	bl	8002094 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	b21b      	sxth	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f6ff ac37 	blt.w	80016de <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3758      	adds	r7, #88	; 0x58
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b088      	sub	sp, #32
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	60f8      	str	r0, [r7, #12]
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	4613      	mov	r3, r2
 8001e86:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e88:	88fb      	ldrh	r3, [r7, #6]
 8001e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d07e      	beq.n	8001f90 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eba:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	699a      	ldr	r2, [r3, #24]
 8001ec0:	8b7b      	ldrh	r3, [r7, #26]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d306      	bcc.n	8001ed4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	699a      	ldr	r2, [r3, #24]
 8001eca:	8b7b      	ldrh	r3, [r7, #26]
 8001ecc:	1ad2      	subs	r2, r2, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	619a      	str	r2, [r3, #24]
 8001ed2:	e002      	b.n	8001eda <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d123      	bne.n	8001f2a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001efc:	833b      	strh	r3, [r7, #24]
 8001efe:	8b3b      	ldrh	r3, [r7, #24]
 8001f00:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f04:	833b      	strh	r3, [r7, #24]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	441a      	add	r2, r3
 8001f14:	8b3b      	ldrh	r3, [r7, #24]
 8001f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f2a:	88fb      	ldrh	r3, [r7, #6]
 8001f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d01f      	beq.n	8001f74 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f4e:	82fb      	strh	r3, [r7, #22]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	461a      	mov	r2, r3
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	441a      	add	r2, r3
 8001f5e:	8afb      	ldrh	r3, [r7, #22]
 8001f60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f74:	8b7b      	ldrh	r3, [r7, #26]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 8087 	beq.w	800208a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	6959      	ldr	r1, [r3, #20]
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	891a      	ldrh	r2, [r3, #8]
 8001f88:	8b7b      	ldrh	r3, [r7, #26]
 8001f8a:	f004 fa47 	bl	800641c <USB_ReadPMA>
 8001f8e:	e07c      	b.n	800208a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3306      	adds	r3, #6
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fb8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	699a      	ldr	r2, [r3, #24]
 8001fbe:	8b7b      	ldrh	r3, [r7, #26]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d306      	bcc.n	8001fd2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	699a      	ldr	r2, [r3, #24]
 8001fc8:	8b7b      	ldrh	r3, [r7, #26]
 8001fca:	1ad2      	subs	r2, r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	619a      	str	r2, [r3, #24]
 8001fd0:	e002      	b.n	8001fd8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d123      	bne.n	8002028 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ffa:	83fb      	strh	r3, [r7, #30]
 8001ffc:	8bfb      	ldrh	r3, [r7, #30]
 8001ffe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002002:	83fb      	strh	r3, [r7, #30]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	441a      	add	r2, r3
 8002012:	8bfb      	ldrh	r3, [r7, #30]
 8002014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800201c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002024:	b29b      	uxth	r3, r3
 8002026:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002028:	88fb      	ldrh	r3, [r7, #6]
 800202a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202e:	2b00      	cmp	r3, #0
 8002030:	d11f      	bne.n	8002072 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	b29b      	uxth	r3, r3
 8002044:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800204c:	83bb      	strh	r3, [r7, #28]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	441a      	add	r2, r3
 800205c:	8bbb      	ldrh	r3, [r7, #28]
 800205e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002062:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800206a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800206e:	b29b      	uxth	r3, r3
 8002070:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002072:	8b7b      	ldrh	r3, [r7, #26]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d008      	beq.n	800208a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6818      	ldr	r0, [r3, #0]
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	6959      	ldr	r1, [r3, #20]
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	895a      	ldrh	r2, [r3, #10]
 8002084:	8b7b      	ldrh	r3, [r7, #26]
 8002086:	f004 f9c9 	bl	800641c <USB_ReadPMA>
    }
  }

  return count;
 800208a:	8b7b      	ldrh	r3, [r7, #26]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3720      	adds	r7, #32
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b0a4      	sub	sp, #144	; 0x90
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	4613      	mov	r3, r2
 80020a0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 81dd 	beq.w	8002468 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	461a      	mov	r2, r3
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4413      	add	r3, r2
 80020c2:	3302      	adds	r3, #2
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	4413      	add	r3, r2
 80020cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020d6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	699a      	ldr	r2, [r3, #24]
 80020de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d907      	bls.n	80020f6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	699a      	ldr	r2, [r3, #24]
 80020ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80020ee:	1ad2      	subs	r2, r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	619a      	str	r2, [r3, #24]
 80020f4:	e002      	b.n	80020fc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	2200      	movs	r2, #0
 80020fa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	2b00      	cmp	r3, #0
 8002102:	f040 80b9 	bne.w	8002278 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	785b      	ldrb	r3, [r3, #1]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d126      	bne.n	800215c <HAL_PCD_EP_DB_Transmit+0xc8>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800211c:	b29b      	uxth	r3, r3
 800211e:	461a      	mov	r2, r3
 8002120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002122:	4413      	add	r3, r2
 8002124:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	011a      	lsls	r2, r3, #4
 800212c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800212e:	4413      	add	r3, r2
 8002130:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002134:	62bb      	str	r3, [r7, #40]	; 0x28
 8002136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	b29b      	uxth	r3, r3
 800213c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002140:	b29a      	uxth	r2, r3
 8002142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002144:	801a      	strh	r2, [r3, #0]
 8002146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	b29b      	uxth	r3, r3
 800214c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002154:	b29a      	uxth	r2, r3
 8002156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002158:	801a      	strh	r2, [r3, #0]
 800215a:	e01a      	b.n	8002192 <HAL_PCD_EP_DB_Transmit+0xfe>
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	785b      	ldrb	r3, [r3, #1]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d116      	bne.n	8002192 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	637b      	str	r3, [r7, #52]	; 0x34
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002172:	b29b      	uxth	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002178:	4413      	add	r3, r2
 800217a:	637b      	str	r3, [r7, #52]	; 0x34
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	011a      	lsls	r2, r3, #4
 8002182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002184:	4413      	add	r3, r2
 8002186:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800218a:	633b      	str	r3, [r7, #48]	; 0x30
 800218c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218e:	2200      	movs	r2, #0
 8002190:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	785b      	ldrb	r3, [r3, #1]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d126      	bne.n	80021ee <HAL_PCD_EP_DB_Transmit+0x15a>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	61fb      	str	r3, [r7, #28]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	461a      	mov	r2, r3
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	4413      	add	r3, r2
 80021b6:	61fb      	str	r3, [r7, #28]
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	011a      	lsls	r2, r3, #4
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	4413      	add	r3, r2
 80021c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80021c6:	61bb      	str	r3, [r7, #24]
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	801a      	strh	r2, [r3, #0]
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	801a      	strh	r2, [r3, #0]
 80021ec:	e017      	b.n	800221e <HAL_PCD_EP_DB_Transmit+0x18a>
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	785b      	ldrb	r3, [r3, #1]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d113      	bne.n	800221e <HAL_PCD_EP_DB_Transmit+0x18a>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021fe:	b29b      	uxth	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	4413      	add	r3, r2
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	011a      	lsls	r2, r3, #4
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	4413      	add	r3, r2
 8002212:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002216:	623b      	str	r3, [r7, #32]
 8002218:	6a3b      	ldr	r3, [r7, #32]
 800221a:	2200      	movs	r2, #0
 800221c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	4619      	mov	r1, r3
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f005 fea8 	bl	8007f7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800222a:	88fb      	ldrh	r3, [r7, #6]
 800222c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 82fc 	beq.w	800282e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	461a      	mov	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	b29b      	uxth	r3, r3
 8002248:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800224c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002250:	82fb      	strh	r3, [r7, #22]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	441a      	add	r2, r3
 8002260:	8afb      	ldrh	r3, [r7, #22]
 8002262:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800226a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800226e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002272:	b29b      	uxth	r3, r3
 8002274:	8013      	strh	r3, [r2, #0]
 8002276:	e2da      	b.n	800282e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002278:	88fb      	ldrh	r3, [r7, #6]
 800227a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d021      	beq.n	80022c6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	b29b      	uxth	r3, r3
 8002294:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800229c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	461a      	mov	r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	441a      	add	r2, r3
 80022ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80022b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	f040 82ae 	bne.w	800282e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80022da:	441a      	add	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	69da      	ldr	r2, [r3, #28]
 80022e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80022e8:	441a      	add	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	6a1a      	ldr	r2, [r3, #32]
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d30b      	bcc.n	8002312 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	6a1a      	ldr	r2, [r3, #32]
 8002306:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800230a:	1ad2      	subs	r2, r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	621a      	str	r2, [r3, #32]
 8002310:	e017      	b.n	8002342 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d108      	bne.n	800232c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800231a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800231e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800232a:	e00a      	b.n	8002342 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2200      	movs	r2, #0
 8002340:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	785b      	ldrb	r3, [r3, #1]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d165      	bne.n	8002416 <HAL_PCD_EP_DB_Transmit+0x382>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002358:	b29b      	uxth	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800235e:	4413      	add	r3, r2
 8002360:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	011a      	lsls	r2, r3, #4
 8002368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800236a:	4413      	add	r3, r2
 800236c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002370:	63bb      	str	r3, [r7, #56]	; 0x38
 8002372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	b29b      	uxth	r3, r3
 8002378:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800237c:	b29a      	uxth	r2, r3
 800237e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002380:	801a      	strh	r2, [r3, #0]
 8002382:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002386:	2b3e      	cmp	r3, #62	; 0x3e
 8002388:	d91d      	bls.n	80023c6 <HAL_PCD_EP_DB_Transmit+0x332>
 800238a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800238e:	095b      	lsrs	r3, r3, #5
 8002390:	64bb      	str	r3, [r7, #72]	; 0x48
 8002392:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002396:	f003 031f 	and.w	r3, r3, #31
 800239a:	2b00      	cmp	r3, #0
 800239c:	d102      	bne.n	80023a4 <HAL_PCD_EP_DB_Transmit+0x310>
 800239e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023a0:	3b01      	subs	r3, #1
 80023a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80023a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	029b      	lsls	r3, r3, #10
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	4313      	orrs	r3, r2
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023be:	b29a      	uxth	r2, r3
 80023c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c2:	801a      	strh	r2, [r3, #0]
 80023c4:	e044      	b.n	8002450 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80023c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10a      	bne.n	80023e4 <HAL_PCD_EP_DB_Transmit+0x350>
 80023ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023dc:	b29a      	uxth	r2, r3
 80023de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e0:	801a      	strh	r2, [r3, #0]
 80023e2:	e035      	b.n	8002450 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80023e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023e8:	085b      	lsrs	r3, r3, #1
 80023ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80023ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d002      	beq.n	80023fe <HAL_PCD_EP_DB_Transmit+0x36a>
 80023f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023fa:	3301      	adds	r3, #1
 80023fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80023fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	b29a      	uxth	r2, r3
 8002404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002406:	b29b      	uxth	r3, r3
 8002408:	029b      	lsls	r3, r3, #10
 800240a:	b29b      	uxth	r3, r3
 800240c:	4313      	orrs	r3, r2
 800240e:	b29a      	uxth	r2, r3
 8002410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002412:	801a      	strh	r2, [r3, #0]
 8002414:	e01c      	b.n	8002450 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	785b      	ldrb	r3, [r3, #1]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d118      	bne.n	8002450 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	647b      	str	r3, [r7, #68]	; 0x44
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800242c:	b29b      	uxth	r3, r3
 800242e:	461a      	mov	r2, r3
 8002430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002432:	4413      	add	r3, r2
 8002434:	647b      	str	r3, [r7, #68]	; 0x44
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	011a      	lsls	r2, r3, #4
 800243c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800243e:	4413      	add	r3, r2
 8002440:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002444:	643b      	str	r3, [r7, #64]	; 0x40
 8002446:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800244a:	b29a      	uxth	r2, r3
 800244c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800244e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6818      	ldr	r0, [r3, #0]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	6959      	ldr	r1, [r3, #20]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	891a      	ldrh	r2, [r3, #8]
 800245c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002460:	b29b      	uxth	r3, r3
 8002462:	f003 ff96 	bl	8006392 <USB_WritePMA>
 8002466:	e1e2      	b.n	800282e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002470:	b29b      	uxth	r3, r3
 8002472:	461a      	mov	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	4413      	add	r3, r2
 800247c:	3306      	adds	r3, #6
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	4413      	add	r3, r2
 8002486:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002490:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	699a      	ldr	r2, [r3, #24]
 8002498:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800249c:	429a      	cmp	r2, r3
 800249e:	d307      	bcc.n	80024b0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	699a      	ldr	r2, [r3, #24]
 80024a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024a8:	1ad2      	subs	r2, r2, r3
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	619a      	str	r2, [r3, #24]
 80024ae:	e002      	b.n	80024b6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2200      	movs	r2, #0
 80024b4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f040 80c0 	bne.w	8002640 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	785b      	ldrb	r3, [r3, #1]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d126      	bne.n	8002516 <HAL_PCD_EP_DB_Transmit+0x482>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	461a      	mov	r2, r3
 80024da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024dc:	4413      	add	r3, r2
 80024de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	011a      	lsls	r2, r3, #4
 80024e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024e8:	4413      	add	r3, r2
 80024ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80024f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024fe:	801a      	strh	r2, [r3, #0]
 8002500:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	b29b      	uxth	r3, r3
 8002506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800250a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800250e:	b29a      	uxth	r2, r3
 8002510:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002512:	801a      	strh	r2, [r3, #0]
 8002514:	e01a      	b.n	800254c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	785b      	ldrb	r3, [r3, #1]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d116      	bne.n	800254c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	667b      	str	r3, [r7, #100]	; 0x64
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800252c:	b29b      	uxth	r3, r3
 800252e:	461a      	mov	r2, r3
 8002530:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002532:	4413      	add	r3, r2
 8002534:	667b      	str	r3, [r7, #100]	; 0x64
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	011a      	lsls	r2, r3, #4
 800253c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800253e:	4413      	add	r3, r2
 8002540:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002544:	663b      	str	r3, [r7, #96]	; 0x60
 8002546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002548:	2200      	movs	r2, #0
 800254a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	677b      	str	r3, [r7, #116]	; 0x74
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	785b      	ldrb	r3, [r3, #1]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d12b      	bne.n	80025b2 <HAL_PCD_EP_DB_Transmit+0x51e>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002568:	b29b      	uxth	r3, r3
 800256a:	461a      	mov	r2, r3
 800256c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800256e:	4413      	add	r3, r2
 8002570:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	011a      	lsls	r2, r3, #4
 8002578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800257a:	4413      	add	r3, r2
 800257c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002580:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002584:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	b29b      	uxth	r3, r3
 800258c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002590:	b29a      	uxth	r2, r3
 8002592:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002596:	801a      	strh	r2, [r3, #0]
 8002598:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025ae:	801a      	strh	r2, [r3, #0]
 80025b0:	e017      	b.n	80025e2 <HAL_PCD_EP_DB_Transmit+0x54e>
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	785b      	ldrb	r3, [r3, #1]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d113      	bne.n	80025e2 <HAL_PCD_EP_DB_Transmit+0x54e>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025c8:	4413      	add	r3, r2
 80025ca:	677b      	str	r3, [r7, #116]	; 0x74
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	011a      	lsls	r2, r3, #4
 80025d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025d4:	4413      	add	r3, r2
 80025d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025da:	673b      	str	r3, [r7, #112]	; 0x70
 80025dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025de:	2200      	movs	r2, #0
 80025e0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	4619      	mov	r1, r3
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f005 fcc6 	bl	8007f7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025ee:	88fb      	ldrh	r3, [r7, #6]
 80025f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f040 811a 	bne.w	800282e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	b29b      	uxth	r3, r3
 800260c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002614:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	461a      	mov	r2, r3
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	441a      	add	r2, r3
 8002626:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800262a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800262e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002632:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800263a:	b29b      	uxth	r3, r3
 800263c:	8013      	strh	r3, [r2, #0]
 800263e:	e0f6      	b.n	800282e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002640:	88fb      	ldrh	r3, [r7, #6]
 8002642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d121      	bne.n	800268e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	b29b      	uxth	r3, r3
 800265c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002664:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	461a      	mov	r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	441a      	add	r2, r3
 8002676:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800267a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800267e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002682:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800268a:	b29b      	uxth	r3, r3
 800268c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002694:	2b01      	cmp	r3, #1
 8002696:	f040 80ca 	bne.w	800282e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	695a      	ldr	r2, [r3, #20]
 800269e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80026a2:	441a      	add	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	69da      	ldr	r2, [r3, #28]
 80026ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80026b0:	441a      	add	r2, r3
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	6a1a      	ldr	r2, [r3, #32]
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d30b      	bcc.n	80026da <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	6a1a      	ldr	r2, [r3, #32]
 80026ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026d2:	1ad2      	subs	r2, r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	621a      	str	r2, [r3, #32]
 80026d8:	e017      	b.n	800270a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d108      	bne.n	80026f4 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80026e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80026e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80026f2:	e00a      	b.n	800270a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2200      	movs	r2, #0
 8002700:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	657b      	str	r3, [r7, #84]	; 0x54
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	785b      	ldrb	r3, [r3, #1]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d165      	bne.n	80027e4 <HAL_PCD_EP_DB_Transmit+0x750>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002726:	b29b      	uxth	r3, r3
 8002728:	461a      	mov	r2, r3
 800272a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800272c:	4413      	add	r3, r2
 800272e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	011a      	lsls	r2, r3, #4
 8002736:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002738:	4413      	add	r3, r2
 800273a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800273e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002740:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	b29b      	uxth	r3, r3
 8002746:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800274a:	b29a      	uxth	r2, r3
 800274c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800274e:	801a      	strh	r2, [r3, #0]
 8002750:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002754:	2b3e      	cmp	r3, #62	; 0x3e
 8002756:	d91d      	bls.n	8002794 <HAL_PCD_EP_DB_Transmit+0x700>
 8002758:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800275c:	095b      	lsrs	r3, r3, #5
 800275e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002760:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002764:	f003 031f 	and.w	r3, r3, #31
 8002768:	2b00      	cmp	r3, #0
 800276a:	d102      	bne.n	8002772 <HAL_PCD_EP_DB_Transmit+0x6de>
 800276c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800276e:	3b01      	subs	r3, #1
 8002770:	66bb      	str	r3, [r7, #104]	; 0x68
 8002772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	b29a      	uxth	r2, r3
 8002778:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800277a:	b29b      	uxth	r3, r3
 800277c:	029b      	lsls	r3, r3, #10
 800277e:	b29b      	uxth	r3, r3
 8002780:	4313      	orrs	r3, r2
 8002782:	b29b      	uxth	r3, r3
 8002784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800278c:	b29a      	uxth	r2, r3
 800278e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002790:	801a      	strh	r2, [r3, #0]
 8002792:	e041      	b.n	8002818 <HAL_PCD_EP_DB_Transmit+0x784>
 8002794:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10a      	bne.n	80027b2 <HAL_PCD_EP_DB_Transmit+0x71e>
 800279c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027ae:	801a      	strh	r2, [r3, #0]
 80027b0:	e032      	b.n	8002818 <HAL_PCD_EP_DB_Transmit+0x784>
 80027b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027b6:	085b      	lsrs	r3, r3, #1
 80027b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80027ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <HAL_PCD_EP_DB_Transmit+0x738>
 80027c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027c8:	3301      	adds	r3, #1
 80027ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80027cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	029b      	lsls	r3, r3, #10
 80027d8:	b29b      	uxth	r3, r3
 80027da:	4313      	orrs	r3, r2
 80027dc:	b29a      	uxth	r2, r3
 80027de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027e0:	801a      	strh	r2, [r3, #0]
 80027e2:	e019      	b.n	8002818 <HAL_PCD_EP_DB_Transmit+0x784>
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	785b      	ldrb	r3, [r3, #1]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d115      	bne.n	8002818 <HAL_PCD_EP_DB_Transmit+0x784>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	461a      	mov	r2, r3
 80027f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027fa:	4413      	add	r3, r2
 80027fc:	657b      	str	r3, [r7, #84]	; 0x54
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	011a      	lsls	r2, r3, #4
 8002804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002806:	4413      	add	r3, r2
 8002808:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800280c:	653b      	str	r3, [r7, #80]	; 0x50
 800280e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002812:	b29a      	uxth	r2, r3
 8002814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002816:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	6959      	ldr	r1, [r3, #20]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	895a      	ldrh	r2, [r3, #10]
 8002824:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002828:	b29b      	uxth	r3, r3
 800282a:	f003 fdb2 	bl	8006392 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	b29b      	uxth	r3, r3
 8002840:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002848:	82bb      	strh	r3, [r7, #20]
 800284a:	8abb      	ldrh	r3, [r7, #20]
 800284c:	f083 0310 	eor.w	r3, r3, #16
 8002850:	82bb      	strh	r3, [r7, #20]
 8002852:	8abb      	ldrh	r3, [r7, #20]
 8002854:	f083 0320 	eor.w	r3, r3, #32
 8002858:	82bb      	strh	r3, [r7, #20]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	441a      	add	r2, r3
 8002868:	8abb      	ldrh	r3, [r7, #20]
 800286a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800286e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800287a:	b29b      	uxth	r3, r3
 800287c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3790      	adds	r7, #144	; 0x90
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002888:	b480      	push	{r7}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	607b      	str	r3, [r7, #4]
 8002892:	460b      	mov	r3, r1
 8002894:	817b      	strh	r3, [r7, #10]
 8002896:	4613      	mov	r3, r2
 8002898:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800289a:	897b      	ldrh	r3, [r7, #10]
 800289c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00b      	beq.n	80028be <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028a6:	897b      	ldrh	r3, [r7, #10]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4413      	add	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	e009      	b.n	80028d2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028be:	897a      	ldrh	r2, [r7, #10]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	4413      	add	r3, r2
 80028d0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80028d2:	893b      	ldrh	r3, [r7, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d107      	bne.n	80028e8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	2200      	movs	r2, #0
 80028dc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	80da      	strh	r2, [r3, #6]
 80028e6:	e00b      	b.n	8002900 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	2201      	movs	r2, #1
 80028ec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	0c1b      	lsrs	r3, r3, #16
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	371c      	adds	r7, #28
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e272      	b.n	8002e04 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 8087 	beq.w	8002a3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800292c:	4b92      	ldr	r3, [pc, #584]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 030c 	and.w	r3, r3, #12
 8002934:	2b04      	cmp	r3, #4
 8002936:	d00c      	beq.n	8002952 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002938:	4b8f      	ldr	r3, [pc, #572]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 030c 	and.w	r3, r3, #12
 8002940:	2b08      	cmp	r3, #8
 8002942:	d112      	bne.n	800296a <HAL_RCC_OscConfig+0x5e>
 8002944:	4b8c      	ldr	r3, [pc, #560]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002950:	d10b      	bne.n	800296a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002952:	4b89      	ldr	r3, [pc, #548]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d06c      	beq.n	8002a38 <HAL_RCC_OscConfig+0x12c>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d168      	bne.n	8002a38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e24c      	b.n	8002e04 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002972:	d106      	bne.n	8002982 <HAL_RCC_OscConfig+0x76>
 8002974:	4b80      	ldr	r3, [pc, #512]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a7f      	ldr	r2, [pc, #508]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 800297a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297e:	6013      	str	r3, [r2, #0]
 8002980:	e02e      	b.n	80029e0 <HAL_RCC_OscConfig+0xd4>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10c      	bne.n	80029a4 <HAL_RCC_OscConfig+0x98>
 800298a:	4b7b      	ldr	r3, [pc, #492]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a7a      	ldr	r2, [pc, #488]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 8002990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	4b78      	ldr	r3, [pc, #480]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a77      	ldr	r2, [pc, #476]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 800299c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	e01d      	b.n	80029e0 <HAL_RCC_OscConfig+0xd4>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029ac:	d10c      	bne.n	80029c8 <HAL_RCC_OscConfig+0xbc>
 80029ae:	4b72      	ldr	r3, [pc, #456]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a71      	ldr	r2, [pc, #452]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	4b6f      	ldr	r3, [pc, #444]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a6e      	ldr	r2, [pc, #440]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 80029c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	e00b      	b.n	80029e0 <HAL_RCC_OscConfig+0xd4>
 80029c8:	4b6b      	ldr	r3, [pc, #428]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a6a      	ldr	r2, [pc, #424]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 80029ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	4b68      	ldr	r3, [pc, #416]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a67      	ldr	r2, [pc, #412]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 80029da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d013      	beq.n	8002a10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7fd ff86 	bl	80008f8 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f0:	f7fd ff82 	bl	80008f8 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	; 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e200      	b.n	8002e04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a02:	4b5d      	ldr	r3, [pc, #372]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0xe4>
 8002a0e:	e014      	b.n	8002a3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a10:	f7fd ff72 	bl	80008f8 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a18:	f7fd ff6e 	bl	80008f8 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b64      	cmp	r3, #100	; 0x64
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e1ec      	b.n	8002e04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a2a:	4b53      	ldr	r3, [pc, #332]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x10c>
 8002a36:	e000      	b.n	8002a3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d063      	beq.n	8002b0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a46:	4b4c      	ldr	r3, [pc, #304]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00b      	beq.n	8002a6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a52:	4b49      	ldr	r3, [pc, #292]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d11c      	bne.n	8002a98 <HAL_RCC_OscConfig+0x18c>
 8002a5e:	4b46      	ldr	r3, [pc, #280]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d116      	bne.n	8002a98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6a:	4b43      	ldr	r3, [pc, #268]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d005      	beq.n	8002a82 <HAL_RCC_OscConfig+0x176>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d001      	beq.n	8002a82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e1c0      	b.n	8002e04 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a82:	4b3d      	ldr	r3, [pc, #244]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	4939      	ldr	r1, [pc, #228]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a96:	e03a      	b.n	8002b0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d020      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aa0:	4b36      	ldr	r3, [pc, #216]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa6:	f7fd ff27 	bl	80008f8 <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aae:	f7fd ff23 	bl	80008f8 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e1a1      	b.n	8002e04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac0:	4b2d      	ldr	r3, [pc, #180]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0f0      	beq.n	8002aae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002acc:	4b2a      	ldr	r3, [pc, #168]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4927      	ldr	r1, [pc, #156]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	600b      	str	r3, [r1, #0]
 8002ae0:	e015      	b.n	8002b0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ae2:	4b26      	ldr	r3, [pc, #152]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae8:	f7fd ff06 	bl	80008f8 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af0:	f7fd ff02 	bl	80008f8 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e180      	b.n	8002e04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b02:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f0      	bne.n	8002af0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d03a      	beq.n	8002b90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d019      	beq.n	8002b56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b22:	4b17      	ldr	r3, [pc, #92]	; (8002b80 <HAL_RCC_OscConfig+0x274>)
 8002b24:	2201      	movs	r2, #1
 8002b26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b28:	f7fd fee6 	bl	80008f8 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b30:	f7fd fee2 	bl	80008f8 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e160      	b.n	8002e04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b42:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <HAL_RCC_OscConfig+0x26c>)
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0f0      	beq.n	8002b30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b4e:	2001      	movs	r0, #1
 8002b50:	f000 fa9c 	bl	800308c <RCC_Delay>
 8002b54:	e01c      	b.n	8002b90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b56:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <HAL_RCC_OscConfig+0x274>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5c:	f7fd fecc 	bl	80008f8 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b62:	e00f      	b.n	8002b84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b64:	f7fd fec8 	bl	80008f8 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d908      	bls.n	8002b84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e146      	b.n	8002e04 <HAL_RCC_OscConfig+0x4f8>
 8002b76:	bf00      	nop
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	42420000 	.word	0x42420000
 8002b80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b84:	4b92      	ldr	r3, [pc, #584]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1e9      	bne.n	8002b64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80a6 	beq.w	8002cea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba2:	4b8b      	ldr	r3, [pc, #556]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10d      	bne.n	8002bca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bae:	4b88      	ldr	r3, [pc, #544]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	4a87      	ldr	r2, [pc, #540]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	61d3      	str	r3, [r2, #28]
 8002bba:	4b85      	ldr	r3, [pc, #532]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bca:	4b82      	ldr	r3, [pc, #520]	; (8002dd4 <HAL_RCC_OscConfig+0x4c8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d118      	bne.n	8002c08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bd6:	4b7f      	ldr	r3, [pc, #508]	; (8002dd4 <HAL_RCC_OscConfig+0x4c8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a7e      	ldr	r2, [pc, #504]	; (8002dd4 <HAL_RCC_OscConfig+0x4c8>)
 8002bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be2:	f7fd fe89 	bl	80008f8 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bea:	f7fd fe85 	bl	80008f8 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b64      	cmp	r3, #100	; 0x64
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e103      	b.n	8002e04 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfc:	4b75      	ldr	r3, [pc, #468]	; (8002dd4 <HAL_RCC_OscConfig+0x4c8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d106      	bne.n	8002c1e <HAL_RCC_OscConfig+0x312>
 8002c10:	4b6f      	ldr	r3, [pc, #444]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	4a6e      	ldr	r2, [pc, #440]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	6213      	str	r3, [r2, #32]
 8002c1c:	e02d      	b.n	8002c7a <HAL_RCC_OscConfig+0x36e>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x334>
 8002c26:	4b6a      	ldr	r3, [pc, #424]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	4a69      	ldr	r2, [pc, #420]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002c2c:	f023 0301 	bic.w	r3, r3, #1
 8002c30:	6213      	str	r3, [r2, #32]
 8002c32:	4b67      	ldr	r3, [pc, #412]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	4a66      	ldr	r2, [pc, #408]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002c38:	f023 0304 	bic.w	r3, r3, #4
 8002c3c:	6213      	str	r3, [r2, #32]
 8002c3e:	e01c      	b.n	8002c7a <HAL_RCC_OscConfig+0x36e>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	2b05      	cmp	r3, #5
 8002c46:	d10c      	bne.n	8002c62 <HAL_RCC_OscConfig+0x356>
 8002c48:	4b61      	ldr	r3, [pc, #388]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	4a60      	ldr	r2, [pc, #384]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002c4e:	f043 0304 	orr.w	r3, r3, #4
 8002c52:	6213      	str	r3, [r2, #32]
 8002c54:	4b5e      	ldr	r3, [pc, #376]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	4a5d      	ldr	r2, [pc, #372]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6213      	str	r3, [r2, #32]
 8002c60:	e00b      	b.n	8002c7a <HAL_RCC_OscConfig+0x36e>
 8002c62:	4b5b      	ldr	r3, [pc, #364]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	4a5a      	ldr	r2, [pc, #360]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002c68:	f023 0301 	bic.w	r3, r3, #1
 8002c6c:	6213      	str	r3, [r2, #32]
 8002c6e:	4b58      	ldr	r3, [pc, #352]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	4a57      	ldr	r2, [pc, #348]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002c74:	f023 0304 	bic.w	r3, r3, #4
 8002c78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d015      	beq.n	8002cae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c82:	f7fd fe39 	bl	80008f8 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c88:	e00a      	b.n	8002ca0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8a:	f7fd fe35 	bl	80008f8 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e0b1      	b.n	8002e04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca0:	4b4b      	ldr	r3, [pc, #300]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0ee      	beq.n	8002c8a <HAL_RCC_OscConfig+0x37e>
 8002cac:	e014      	b.n	8002cd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cae:	f7fd fe23 	bl	80008f8 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb4:	e00a      	b.n	8002ccc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb6:	f7fd fe1f 	bl	80008f8 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e09b      	b.n	8002e04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ccc:	4b40      	ldr	r3, [pc, #256]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1ee      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cd8:	7dfb      	ldrb	r3, [r7, #23]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d105      	bne.n	8002cea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cde:	4b3c      	ldr	r3, [pc, #240]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	4a3b      	ldr	r2, [pc, #236]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 8087 	beq.w	8002e02 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cf4:	4b36      	ldr	r3, [pc, #216]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 030c 	and.w	r3, r3, #12
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d061      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d146      	bne.n	8002d96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d08:	4b33      	ldr	r3, [pc, #204]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0e:	f7fd fdf3 	bl	80008f8 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d16:	f7fd fdef 	bl	80008f8 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e06d      	b.n	8002e04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d28:	4b29      	ldr	r3, [pc, #164]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1f0      	bne.n	8002d16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d3c:	d108      	bne.n	8002d50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d3e:	4b24      	ldr	r3, [pc, #144]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	4921      	ldr	r1, [pc, #132]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d50:	4b1f      	ldr	r3, [pc, #124]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a19      	ldr	r1, [r3, #32]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	430b      	orrs	r3, r1
 8002d62:	491b      	ldr	r1, [pc, #108]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d68:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6e:	f7fd fdc3 	bl	80008f8 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d76:	f7fd fdbf 	bl	80008f8 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e03d      	b.n	8002e04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d88:	4b11      	ldr	r3, [pc, #68]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f0      	beq.n	8002d76 <HAL_RCC_OscConfig+0x46a>
 8002d94:	e035      	b.n	8002e02 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d96:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <HAL_RCC_OscConfig+0x4cc>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9c:	f7fd fdac 	bl	80008f8 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da4:	f7fd fda8 	bl	80008f8 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e026      	b.n	8002e04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db6:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <HAL_RCC_OscConfig+0x4c4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0x498>
 8002dc2:	e01e      	b.n	8002e02 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d107      	bne.n	8002ddc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e019      	b.n	8002e04 <HAL_RCC_OscConfig+0x4f8>
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	40007000 	.word	0x40007000
 8002dd8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <HAL_RCC_OscConfig+0x500>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d106      	bne.n	8002dfe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d001      	beq.n	8002e02 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40021000 	.word	0x40021000

08002e10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e0d0      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e24:	4b6a      	ldr	r3, [pc, #424]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d910      	bls.n	8002e54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e32:	4b67      	ldr	r3, [pc, #412]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f023 0207 	bic.w	r2, r3, #7
 8002e3a:	4965      	ldr	r1, [pc, #404]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e42:	4b63      	ldr	r3, [pc, #396]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d001      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0b8      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d020      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d005      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e6c:	4b59      	ldr	r3, [pc, #356]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	4a58      	ldr	r2, [pc, #352]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e84:	4b53      	ldr	r3, [pc, #332]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	4a52      	ldr	r2, [pc, #328]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e90:	4b50      	ldr	r3, [pc, #320]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	494d      	ldr	r1, [pc, #308]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d040      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d107      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb6:	4b47      	ldr	r3, [pc, #284]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d115      	bne.n	8002eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e07f      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d107      	bne.n	8002ede <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ece:	4b41      	ldr	r3, [pc, #260]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d109      	bne.n	8002eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e073      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ede:	4b3d      	ldr	r3, [pc, #244]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e06b      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eee:	4b39      	ldr	r3, [pc, #228]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f023 0203 	bic.w	r2, r3, #3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	4936      	ldr	r1, [pc, #216]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f00:	f7fd fcfa 	bl	80008f8 <HAL_GetTick>
 8002f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f06:	e00a      	b.n	8002f1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f08:	f7fd fcf6 	bl	80008f8 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e053      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f1e:	4b2d      	ldr	r3, [pc, #180]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f003 020c 	and.w	r2, r3, #12
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d1eb      	bne.n	8002f08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f30:	4b27      	ldr	r3, [pc, #156]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d210      	bcs.n	8002f60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3e:	4b24      	ldr	r3, [pc, #144]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f023 0207 	bic.w	r2, r3, #7
 8002f46:	4922      	ldr	r1, [pc, #136]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4e:	4b20      	ldr	r3, [pc, #128]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d001      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e032      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d008      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f6c:	4b19      	ldr	r3, [pc, #100]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	4916      	ldr	r1, [pc, #88]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d009      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f8a:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	490e      	ldr	r1, [pc, #56]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f9e:	f000 f821 	bl	8002fe4 <HAL_RCC_GetSysClockFreq>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	091b      	lsrs	r3, r3, #4
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	490a      	ldr	r1, [pc, #40]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb0:	5ccb      	ldrb	r3, [r1, r3]
 8002fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb6:	4a09      	ldr	r2, [pc, #36]	; (8002fdc <HAL_RCC_ClockConfig+0x1cc>)
 8002fb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fba:	4b09      	ldr	r3, [pc, #36]	; (8002fe0 <HAL_RCC_ClockConfig+0x1d0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fd fc58 	bl	8000874 <HAL_InitTick>

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40022000 	.word	0x40022000
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	080084e0 	.word	0x080084e0
 8002fdc:	20000000 	.word	0x20000000
 8002fe0:	20000004 	.word	0x20000004

08002fe4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60bb      	str	r3, [r7, #8]
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ffe:	4b1e      	ldr	r3, [pc, #120]	; (8003078 <HAL_RCC_GetSysClockFreq+0x94>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 030c 	and.w	r3, r3, #12
 800300a:	2b04      	cmp	r3, #4
 800300c:	d002      	beq.n	8003014 <HAL_RCC_GetSysClockFreq+0x30>
 800300e:	2b08      	cmp	r3, #8
 8003010:	d003      	beq.n	800301a <HAL_RCC_GetSysClockFreq+0x36>
 8003012:	e027      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003014:	4b19      	ldr	r3, [pc, #100]	; (800307c <HAL_RCC_GetSysClockFreq+0x98>)
 8003016:	613b      	str	r3, [r7, #16]
      break;
 8003018:	e027      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	0c9b      	lsrs	r3, r3, #18
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	4a17      	ldr	r2, [pc, #92]	; (8003080 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003024:	5cd3      	ldrb	r3, [r2, r3]
 8003026:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d010      	beq.n	8003054 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003032:	4b11      	ldr	r3, [pc, #68]	; (8003078 <HAL_RCC_GetSysClockFreq+0x94>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	0c5b      	lsrs	r3, r3, #17
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	4a11      	ldr	r2, [pc, #68]	; (8003084 <HAL_RCC_GetSysClockFreq+0xa0>)
 800303e:	5cd3      	ldrb	r3, [r2, r3]
 8003040:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a0d      	ldr	r2, [pc, #52]	; (800307c <HAL_RCC_GetSysClockFreq+0x98>)
 8003046:	fb03 f202 	mul.w	r2, r3, r2
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	e004      	b.n	800305e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a0c      	ldr	r2, [pc, #48]	; (8003088 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003058:	fb02 f303 	mul.w	r3, r2, r3
 800305c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	613b      	str	r3, [r7, #16]
      break;
 8003062:	e002      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003064:	4b05      	ldr	r3, [pc, #20]	; (800307c <HAL_RCC_GetSysClockFreq+0x98>)
 8003066:	613b      	str	r3, [r7, #16]
      break;
 8003068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800306a:	693b      	ldr	r3, [r7, #16]
}
 800306c:	4618      	mov	r0, r3
 800306e:	371c      	adds	r7, #28
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40021000 	.word	0x40021000
 800307c:	007a1200 	.word	0x007a1200
 8003080:	080084f0 	.word	0x080084f0
 8003084:	08008500 	.word	0x08008500
 8003088:	003d0900 	.word	0x003d0900

0800308c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003094:	4b0a      	ldr	r3, [pc, #40]	; (80030c0 <RCC_Delay+0x34>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a0a      	ldr	r2, [pc, #40]	; (80030c4 <RCC_Delay+0x38>)
 800309a:	fba2 2303 	umull	r2, r3, r2, r3
 800309e:	0a5b      	lsrs	r3, r3, #9
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	fb02 f303 	mul.w	r3, r2, r3
 80030a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030a8:	bf00      	nop
  }
  while (Delay --);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1e5a      	subs	r2, r3, #1
 80030ae:	60fa      	str	r2, [r7, #12]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1f9      	bne.n	80030a8 <RCC_Delay+0x1c>
}
 80030b4:	bf00      	nop
 80030b6:	bf00      	nop
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr
 80030c0:	20000000 	.word	0x20000000
 80030c4:	10624dd3 	.word	0x10624dd3

080030c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	613b      	str	r3, [r7, #16]
 80030d4:	2300      	movs	r3, #0
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d07d      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80030e4:	2300      	movs	r3, #0
 80030e6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030e8:	4b4f      	ldr	r3, [pc, #316]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10d      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f4:	4b4c      	ldr	r3, [pc, #304]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	4a4b      	ldr	r2, [pc, #300]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030fe:	61d3      	str	r3, [r2, #28]
 8003100:	4b49      	ldr	r3, [pc, #292]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800310c:	2301      	movs	r3, #1
 800310e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003110:	4b46      	ldr	r3, [pc, #280]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003118:	2b00      	cmp	r3, #0
 800311a:	d118      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800311c:	4b43      	ldr	r3, [pc, #268]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a42      	ldr	r2, [pc, #264]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003126:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003128:	f7fd fbe6 	bl	80008f8 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312e:	e008      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003130:	f7fd fbe2 	bl	80008f8 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b64      	cmp	r3, #100	; 0x64
 800313c:	d901      	bls.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e06d      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003142:	4b3a      	ldr	r3, [pc, #232]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800314e:	4b36      	ldr	r3, [pc, #216]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003156:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d02e      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	429a      	cmp	r2, r3
 800316a:	d027      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800316c:	4b2e      	ldr	r3, [pc, #184]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003174:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003176:	4b2e      	ldr	r3, [pc, #184]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003178:	2201      	movs	r2, #1
 800317a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800317c:	4b2c      	ldr	r3, [pc, #176]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003182:	4a29      	ldr	r2, [pc, #164]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d014      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003192:	f7fd fbb1 	bl	80008f8 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003198:	e00a      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319a:	f7fd fbad 	bl	80008f8 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e036      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b0:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0ee      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031bc:	4b1a      	ldr	r3, [pc, #104]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	4917      	ldr	r1, [pc, #92]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031ce:	7dfb      	ldrb	r3, [r7, #23]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d105      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d4:	4b14      	ldr	r3, [pc, #80]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	4a13      	ldr	r2, [pc, #76]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d008      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031ec:	4b0e      	ldr	r3, [pc, #56]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	490b      	ldr	r1, [pc, #44]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	2b00      	cmp	r3, #0
 8003208:	d008      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800320a:	4b07      	ldr	r3, [pc, #28]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	4904      	ldr	r1, [pc, #16]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003218:	4313      	orrs	r3, r2
 800321a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40021000 	.word	0x40021000
 800322c:	40007000 	.word	0x40007000
 8003230:	42420440 	.word	0x42420440

08003234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e041      	b.n	80032ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d106      	bne.n	8003260 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7fd fa48 	bl	80006f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3304      	adds	r3, #4
 8003270:	4619      	mov	r1, r3
 8003272:	4610      	mov	r0, r2
 8003274:	f000 faa8 	bl	80037c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b082      	sub	sp, #8
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e041      	b.n	8003368 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d106      	bne.n	80032fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7fd f9dd 	bl	80006b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2202      	movs	r2, #2
 8003302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3304      	adds	r3, #4
 800330e:	4619      	mov	r1, r3
 8003310:	4610      	mov	r0, r2
 8003312:	f000 fa59 	bl	80037c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e093      	b.n	80034ac <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d106      	bne.n	800339e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7fd f91f 	bl	80005dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2202      	movs	r2, #2
 80033a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6812      	ldr	r2, [r2, #0]
 80033b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033b4:	f023 0307 	bic.w	r3, r3, #7
 80033b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3304      	adds	r3, #4
 80033c2:	4619      	mov	r1, r3
 80033c4:	4610      	mov	r0, r2
 80033c6:	f000 f9ff 	bl	80037c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033f2:	f023 0303 	bic.w	r3, r3, #3
 80033f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	021b      	lsls	r3, r3, #8
 8003402:	4313      	orrs	r3, r2
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003410:	f023 030c 	bic.w	r3, r3, #12
 8003414:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800341c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003420:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	021b      	lsls	r3, r3, #8
 800342c:	4313      	orrs	r3, r2
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	011a      	lsls	r2, r3, #4
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	031b      	lsls	r3, r3, #12
 8003440:	4313      	orrs	r3, r2
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800344e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	4313      	orrs	r3, r2
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	4313      	orrs	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d101      	bne.n	80034d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034ce:	2302      	movs	r3, #2
 80034d0:	e0ae      	b.n	8003630 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b0c      	cmp	r3, #12
 80034de:	f200 809f 	bhi.w	8003620 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80034e2:	a201      	add	r2, pc, #4	; (adr r2, 80034e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e8:	0800351d 	.word	0x0800351d
 80034ec:	08003621 	.word	0x08003621
 80034f0:	08003621 	.word	0x08003621
 80034f4:	08003621 	.word	0x08003621
 80034f8:	0800355d 	.word	0x0800355d
 80034fc:	08003621 	.word	0x08003621
 8003500:	08003621 	.word	0x08003621
 8003504:	08003621 	.word	0x08003621
 8003508:	0800359f 	.word	0x0800359f
 800350c:	08003621 	.word	0x08003621
 8003510:	08003621 	.word	0x08003621
 8003514:	08003621 	.word	0x08003621
 8003518:	080035df 	.word	0x080035df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68b9      	ldr	r1, [r7, #8]
 8003522:	4618      	mov	r0, r3
 8003524:	f000 f9b2 	bl	800388c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	699a      	ldr	r2, [r3, #24]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0208 	orr.w	r2, r2, #8
 8003536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0204 	bic.w	r2, r2, #4
 8003546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6999      	ldr	r1, [r3, #24]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	691a      	ldr	r2, [r3, #16]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	619a      	str	r2, [r3, #24]
      break;
 800355a:	e064      	b.n	8003626 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68b9      	ldr	r1, [r7, #8]
 8003562:	4618      	mov	r0, r3
 8003564:	f000 f9f8 	bl	8003958 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699a      	ldr	r2, [r3, #24]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003576:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6999      	ldr	r1, [r3, #24]
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	021a      	lsls	r2, r3, #8
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	619a      	str	r2, [r3, #24]
      break;
 800359c:	e043      	b.n	8003626 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68b9      	ldr	r1, [r7, #8]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 fa41 	bl	8003a2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	69da      	ldr	r2, [r3, #28]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0208 	orr.w	r2, r2, #8
 80035b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	69da      	ldr	r2, [r3, #28]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0204 	bic.w	r2, r2, #4
 80035c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69d9      	ldr	r1, [r3, #28]
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	691a      	ldr	r2, [r3, #16]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	61da      	str	r2, [r3, #28]
      break;
 80035dc:	e023      	b.n	8003626 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 fa8b 	bl	8003b00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	69da      	ldr	r2, [r3, #28]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	69da      	ldr	r2, [r3, #28]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003608:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69d9      	ldr	r1, [r3, #28]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	021a      	lsls	r2, r3, #8
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	61da      	str	r2, [r3, #28]
      break;
 800361e:	e002      	b.n	8003626 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	75fb      	strb	r3, [r7, #23]
      break;
 8003624:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800362e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3718      	adds	r7, #24
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <HAL_TIM_ConfigClockSource+0x1c>
 8003650:	2302      	movs	r3, #2
 8003652:	e0b4      	b.n	80037be <HAL_TIM_ConfigClockSource+0x186>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003672:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800367a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800368c:	d03e      	beq.n	800370c <HAL_TIM_ConfigClockSource+0xd4>
 800368e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003692:	f200 8087 	bhi.w	80037a4 <HAL_TIM_ConfigClockSource+0x16c>
 8003696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800369a:	f000 8086 	beq.w	80037aa <HAL_TIM_ConfigClockSource+0x172>
 800369e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a2:	d87f      	bhi.n	80037a4 <HAL_TIM_ConfigClockSource+0x16c>
 80036a4:	2b70      	cmp	r3, #112	; 0x70
 80036a6:	d01a      	beq.n	80036de <HAL_TIM_ConfigClockSource+0xa6>
 80036a8:	2b70      	cmp	r3, #112	; 0x70
 80036aa:	d87b      	bhi.n	80037a4 <HAL_TIM_ConfigClockSource+0x16c>
 80036ac:	2b60      	cmp	r3, #96	; 0x60
 80036ae:	d050      	beq.n	8003752 <HAL_TIM_ConfigClockSource+0x11a>
 80036b0:	2b60      	cmp	r3, #96	; 0x60
 80036b2:	d877      	bhi.n	80037a4 <HAL_TIM_ConfigClockSource+0x16c>
 80036b4:	2b50      	cmp	r3, #80	; 0x50
 80036b6:	d03c      	beq.n	8003732 <HAL_TIM_ConfigClockSource+0xfa>
 80036b8:	2b50      	cmp	r3, #80	; 0x50
 80036ba:	d873      	bhi.n	80037a4 <HAL_TIM_ConfigClockSource+0x16c>
 80036bc:	2b40      	cmp	r3, #64	; 0x40
 80036be:	d058      	beq.n	8003772 <HAL_TIM_ConfigClockSource+0x13a>
 80036c0:	2b40      	cmp	r3, #64	; 0x40
 80036c2:	d86f      	bhi.n	80037a4 <HAL_TIM_ConfigClockSource+0x16c>
 80036c4:	2b30      	cmp	r3, #48	; 0x30
 80036c6:	d064      	beq.n	8003792 <HAL_TIM_ConfigClockSource+0x15a>
 80036c8:	2b30      	cmp	r3, #48	; 0x30
 80036ca:	d86b      	bhi.n	80037a4 <HAL_TIM_ConfigClockSource+0x16c>
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	d060      	beq.n	8003792 <HAL_TIM_ConfigClockSource+0x15a>
 80036d0:	2b20      	cmp	r3, #32
 80036d2:	d867      	bhi.n	80037a4 <HAL_TIM_ConfigClockSource+0x16c>
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d05c      	beq.n	8003792 <HAL_TIM_ConfigClockSource+0x15a>
 80036d8:	2b10      	cmp	r3, #16
 80036da:	d05a      	beq.n	8003792 <HAL_TIM_ConfigClockSource+0x15a>
 80036dc:	e062      	b.n	80037a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6818      	ldr	r0, [r3, #0]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	6899      	ldr	r1, [r3, #8]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f000 facc 	bl	8003c8a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003700:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	609a      	str	r2, [r3, #8]
      break;
 800370a:	e04f      	b.n	80037ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	6899      	ldr	r1, [r3, #8]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f000 fab5 	bl	8003c8a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800372e:	609a      	str	r2, [r3, #8]
      break;
 8003730:	e03c      	b.n	80037ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6818      	ldr	r0, [r3, #0]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	6859      	ldr	r1, [r3, #4]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	461a      	mov	r2, r3
 8003740:	f000 fa2c 	bl	8003b9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2150      	movs	r1, #80	; 0x50
 800374a:	4618      	mov	r0, r3
 800374c:	f000 fa83 	bl	8003c56 <TIM_ITRx_SetConfig>
      break;
 8003750:	e02c      	b.n	80037ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6818      	ldr	r0, [r3, #0]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	6859      	ldr	r1, [r3, #4]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	461a      	mov	r2, r3
 8003760:	f000 fa4a 	bl	8003bf8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2160      	movs	r1, #96	; 0x60
 800376a:	4618      	mov	r0, r3
 800376c:	f000 fa73 	bl	8003c56 <TIM_ITRx_SetConfig>
      break;
 8003770:	e01c      	b.n	80037ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6818      	ldr	r0, [r3, #0]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	6859      	ldr	r1, [r3, #4]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	461a      	mov	r2, r3
 8003780:	f000 fa0c 	bl	8003b9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2140      	movs	r1, #64	; 0x40
 800378a:	4618      	mov	r0, r3
 800378c:	f000 fa63 	bl	8003c56 <TIM_ITRx_SetConfig>
      break;
 8003790:	e00c      	b.n	80037ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4619      	mov	r1, r3
 800379c:	4610      	mov	r0, r2
 800379e:	f000 fa5a 	bl	8003c56 <TIM_ITRx_SetConfig>
      break;
 80037a2:	e003      	b.n	80037ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
      break;
 80037a8:	e000      	b.n	80037ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a29      	ldr	r2, [pc, #164]	; (8003880 <TIM_Base_SetConfig+0xb8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d00b      	beq.n	80037f8 <TIM_Base_SetConfig+0x30>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e6:	d007      	beq.n	80037f8 <TIM_Base_SetConfig+0x30>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a26      	ldr	r2, [pc, #152]	; (8003884 <TIM_Base_SetConfig+0xbc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d003      	beq.n	80037f8 <TIM_Base_SetConfig+0x30>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a25      	ldr	r2, [pc, #148]	; (8003888 <TIM_Base_SetConfig+0xc0>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d108      	bne.n	800380a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	4313      	orrs	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a1c      	ldr	r2, [pc, #112]	; (8003880 <TIM_Base_SetConfig+0xb8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d00b      	beq.n	800382a <TIM_Base_SetConfig+0x62>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003818:	d007      	beq.n	800382a <TIM_Base_SetConfig+0x62>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a19      	ldr	r2, [pc, #100]	; (8003884 <TIM_Base_SetConfig+0xbc>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d003      	beq.n	800382a <TIM_Base_SetConfig+0x62>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a18      	ldr	r2, [pc, #96]	; (8003888 <TIM_Base_SetConfig+0xc0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d108      	bne.n	800383c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	4313      	orrs	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	4313      	orrs	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a07      	ldr	r2, [pc, #28]	; (8003880 <TIM_Base_SetConfig+0xb8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d103      	bne.n	8003870 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	615a      	str	r2, [r3, #20]
}
 8003876:	bf00      	nop
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr
 8003880:	40012c00 	.word	0x40012c00
 8003884:	40000400 	.word	0x40000400
 8003888:	40000800 	.word	0x40000800

0800388c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	f023 0201 	bic.w	r2, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 0303 	bic.w	r3, r3, #3
 80038c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f023 0302 	bic.w	r3, r3, #2
 80038d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	4313      	orrs	r3, r2
 80038de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a1c      	ldr	r2, [pc, #112]	; (8003954 <TIM_OC1_SetConfig+0xc8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d10c      	bne.n	8003902 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f023 0308 	bic.w	r3, r3, #8
 80038ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f023 0304 	bic.w	r3, r3, #4
 8003900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a13      	ldr	r2, [pc, #76]	; (8003954 <TIM_OC1_SetConfig+0xc8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d111      	bne.n	800392e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	621a      	str	r2, [r3, #32]
}
 8003948:	bf00      	nop
 800394a:	371c      	adds	r7, #28
 800394c:	46bd      	mov	sp, r7
 800394e:	bc80      	pop	{r7}
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40012c00 	.word	0x40012c00

08003958 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	f023 0210 	bic.w	r2, r3, #16
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800398e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	021b      	lsls	r3, r3, #8
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	4313      	orrs	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f023 0320 	bic.w	r3, r3, #32
 80039a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <TIM_OC2_SetConfig+0xd0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d10d      	bne.n	80039d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a14      	ldr	r2, [pc, #80]	; (8003a28 <TIM_OC2_SetConfig+0xd0>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d113      	bne.n	8003a04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	621a      	str	r2, [r3, #32]
}
 8003a1e:	bf00      	nop
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr
 8003a28:	40012c00 	.word	0x40012c00

08003a2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 0303 	bic.w	r3, r3, #3
 8003a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	021b      	lsls	r3, r3, #8
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a1d      	ldr	r2, [pc, #116]	; (8003afc <TIM_OC3_SetConfig+0xd0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d10d      	bne.n	8003aa6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003aa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a14      	ldr	r2, [pc, #80]	; (8003afc <TIM_OC3_SetConfig+0xd0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d113      	bne.n	8003ad6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ab4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003abc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	621a      	str	r2, [r3, #32]
}
 8003af0:	bf00      	nop
 8003af2:	371c      	adds	r7, #28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	40012c00 	.word	0x40012c00

08003b00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	021b      	lsls	r3, r3, #8
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	031b      	lsls	r3, r3, #12
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a0f      	ldr	r2, [pc, #60]	; (8003b98 <TIM_OC4_SetConfig+0x98>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d109      	bne.n	8003b74 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	019b      	lsls	r3, r3, #6
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	621a      	str	r2, [r3, #32]
}
 8003b8e:	bf00      	nop
 8003b90:	371c      	adds	r7, #28
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr
 8003b98:	40012c00 	.word	0x40012c00

08003b9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	f023 0201 	bic.w	r2, r3, #1
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f023 030a 	bic.w	r3, r3, #10
 8003bd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	621a      	str	r2, [r3, #32]
}
 8003bee:	bf00      	nop
 8003bf0:	371c      	adds	r7, #28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr

08003bf8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	f023 0210 	bic.w	r2, r3, #16
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	031b      	lsls	r3, r3, #12
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c34:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	621a      	str	r2, [r3, #32]
}
 8003c4c:	bf00      	nop
 8003c4e:	371c      	adds	r7, #28
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bc80      	pop	{r7}
 8003c54:	4770      	bx	lr

08003c56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b085      	sub	sp, #20
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f043 0307 	orr.w	r3, r3, #7
 8003c78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	609a      	str	r2, [r3, #8]
}
 8003c80:	bf00      	nop
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr

08003c8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b087      	sub	sp, #28
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	60f8      	str	r0, [r7, #12]
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	607a      	str	r2, [r7, #4]
 8003c96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ca4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	021a      	lsls	r2, r3, #8
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	431a      	orrs	r2, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	609a      	str	r2, [r3, #8]
}
 8003cbe:	bf00      	nop
 8003cc0:	371c      	adds	r7, #28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e046      	b.n	8003d6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a16      	ldr	r2, [pc, #88]	; (8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d00e      	beq.n	8003d42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d2c:	d009      	beq.n	8003d42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a12      	ldr	r2, [pc, #72]	; (8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d004      	beq.n	8003d42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a10      	ldr	r2, [pc, #64]	; (8003d80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d10c      	bne.n	8003d5c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr
 8003d78:	40012c00 	.word	0x40012c00
 8003d7c:	40000400 	.word	0x40000400
 8003d80:	40000800 	.word	0x40000800

08003d84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003d84:	b084      	sub	sp, #16
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	f107 0014 	add.w	r0, r7, #20
 8003d92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bc80      	pop	{r7}
 8003da0:	b004      	add	sp, #16
 8003da2:	4770      	bx	lr

08003da4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003db4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003db8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr

08003dd0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003dd8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003ddc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	43db      	mvns	r3, r3
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	4013      	ands	r3, r2
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr

08003e04 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc80      	pop	{r7}
 8003e1a:	4770      	bx	lr

08003e1c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
 8003e26:	f107 0014 	add.w	r0, r7, #20
 8003e2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bc80      	pop	{r7}
 8003e58:	b004      	add	sp, #16
 8003e5a:	4770      	bx	lr

08003e5c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b09d      	sub	sp, #116	; 0x74
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003e66:	2300      	movs	r3, #0
 8003e68:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e82:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	78db      	ldrb	r3, [r3, #3]
 8003e8a:	2b03      	cmp	r3, #3
 8003e8c:	d81f      	bhi.n	8003ece <USB_ActivateEndpoint+0x72>
 8003e8e:	a201      	add	r2, pc, #4	; (adr r2, 8003e94 <USB_ActivateEndpoint+0x38>)
 8003e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e94:	08003ea5 	.word	0x08003ea5
 8003e98:	08003ec1 	.word	0x08003ec1
 8003e9c:	08003ed7 	.word	0x08003ed7
 8003ea0:	08003eb3 	.word	0x08003eb3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003ea4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003ea8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003eac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003eb0:	e012      	b.n	8003ed8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003eb2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003eb6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003eba:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003ebe:	e00b      	b.n	8003ed8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003ec0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003ec4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ec8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003ecc:	e004      	b.n	8003ed8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8003ed4:	e000      	b.n	8003ed8 <USB_ActivateEndpoint+0x7c>
      break;
 8003ed6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	441a      	add	r2, r3
 8003ee2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003ee6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	441a      	add	r2, r3
 8003f28:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003f2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	7b1b      	ldrb	r3, [r3, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f040 8178 	bne.w	800423a <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	785b      	ldrb	r3, [r3, #1]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 8084 	beq.w	800405c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	61bb      	str	r3, [r7, #24]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	461a      	mov	r2, r3
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	4413      	add	r3, r2
 8003f66:	61bb      	str	r3, [r7, #24]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	011a      	lsls	r2, r3, #4
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	88db      	ldrh	r3, [r3, #6]
 8003f7c:	085b      	lsrs	r3, r3, #1
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	827b      	strh	r3, [r7, #18]
 8003f96:	8a7b      	ldrh	r3, [r7, #18]
 8003f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d01b      	beq.n	8003fd8 <USB_ActivateEndpoint+0x17c>
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb6:	823b      	strh	r3, [r7, #16]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	441a      	add	r2, r3
 8003fc2:	8a3b      	ldrh	r3, [r7, #16]
 8003fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	78db      	ldrb	r3, [r3, #3]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d020      	beq.n	8004022 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ff6:	81bb      	strh	r3, [r7, #12]
 8003ff8:	89bb      	ldrh	r3, [r7, #12]
 8003ffa:	f083 0320 	eor.w	r3, r3, #32
 8003ffe:	81bb      	strh	r3, [r7, #12]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	441a      	add	r2, r3
 800400a:	89bb      	ldrh	r3, [r7, #12]
 800400c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004010:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800401c:	b29b      	uxth	r3, r3
 800401e:	8013      	strh	r3, [r2, #0]
 8004020:	e2d5      	b.n	80045ce <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	b29b      	uxth	r3, r3
 8004030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004038:	81fb      	strh	r3, [r7, #14]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	441a      	add	r2, r3
 8004044:	89fb      	ldrh	r3, [r7, #14]
 8004046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800404a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800404e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004056:	b29b      	uxth	r3, r3
 8004058:	8013      	strh	r3, [r2, #0]
 800405a:	e2b8      	b.n	80045ce <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	633b      	str	r3, [r7, #48]	; 0x30
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004066:	b29b      	uxth	r3, r3
 8004068:	461a      	mov	r2, r3
 800406a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406c:	4413      	add	r3, r2
 800406e:	633b      	str	r3, [r7, #48]	; 0x30
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	011a      	lsls	r2, r3, #4
 8004076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004078:	4413      	add	r3, r2
 800407a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800407e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	88db      	ldrh	r3, [r3, #6]
 8004084:	085b      	lsrs	r3, r3, #1
 8004086:	b29b      	uxth	r3, r3
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	62bb      	str	r3, [r7, #40]	; 0x28
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800409a:	b29b      	uxth	r3, r3
 800409c:	461a      	mov	r2, r3
 800409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a0:	4413      	add	r3, r2
 80040a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	011a      	lsls	r2, r3, #4
 80040aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ac:	4413      	add	r3, r2
 80040ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040be:	b29a      	uxth	r2, r3
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	801a      	strh	r2, [r3, #0]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	2b3e      	cmp	r3, #62	; 0x3e
 80040ca:	d91d      	bls.n	8004108 <USB_ActivateEndpoint+0x2ac>
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	095b      	lsrs	r3, r3, #5
 80040d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	f003 031f 	and.w	r3, r3, #31
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d102      	bne.n	80040e6 <USB_ActivateEndpoint+0x28a>
 80040e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040e2:	3b01      	subs	r3, #1
 80040e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	029b      	lsls	r3, r3, #10
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	4313      	orrs	r3, r2
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004100:	b29a      	uxth	r2, r3
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	801a      	strh	r2, [r3, #0]
 8004106:	e026      	b.n	8004156 <USB_ActivateEndpoint+0x2fa>
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10a      	bne.n	8004126 <USB_ActivateEndpoint+0x2ca>
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	b29b      	uxth	r3, r3
 8004116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800411a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800411e:	b29a      	uxth	r2, r3
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	801a      	strh	r2, [r3, #0]
 8004124:	e017      	b.n	8004156 <USB_ActivateEndpoint+0x2fa>
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	085b      	lsrs	r3, r3, #1
 800412c:	66bb      	str	r3, [r7, #104]	; 0x68
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <USB_ActivateEndpoint+0x2e4>
 800413a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800413c:	3301      	adds	r3, #1
 800413e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	881b      	ldrh	r3, [r3, #0]
 8004144:	b29a      	uxth	r2, r3
 8004146:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004148:	b29b      	uxth	r3, r3
 800414a:	029b      	lsls	r3, r3, #10
 800414c:	b29b      	uxth	r3, r3
 800414e:	4313      	orrs	r3, r2
 8004150:	b29a      	uxth	r2, r3
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	847b      	strh	r3, [r7, #34]	; 0x22
 8004164:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d01b      	beq.n	80041a6 <USB_ActivateEndpoint+0x34a>
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	b29b      	uxth	r3, r3
 800417c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004184:	843b      	strh	r3, [r7, #32]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	441a      	add	r2, r3
 8004190:	8c3b      	ldrh	r3, [r7, #32]
 8004192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800419a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800419e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d124      	bne.n	80041f8 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c4:	83bb      	strh	r3, [r7, #28]
 80041c6:	8bbb      	ldrh	r3, [r7, #28]
 80041c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80041cc:	83bb      	strh	r3, [r7, #28]
 80041ce:	8bbb      	ldrh	r3, [r7, #28]
 80041d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80041d4:	83bb      	strh	r3, [r7, #28]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	441a      	add	r2, r3
 80041e0:	8bbb      	ldrh	r3, [r7, #28]
 80041e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	8013      	strh	r3, [r2, #0]
 80041f6:	e1ea      	b.n	80045ce <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	b29b      	uxth	r3, r3
 8004206:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800420a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420e:	83fb      	strh	r3, [r7, #30]
 8004210:	8bfb      	ldrh	r3, [r7, #30]
 8004212:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004216:	83fb      	strh	r3, [r7, #30]
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	441a      	add	r2, r3
 8004222:	8bfb      	ldrh	r3, [r7, #30]
 8004224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800422c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004234:	b29b      	uxth	r3, r3
 8004236:	8013      	strh	r3, [r2, #0]
 8004238:	e1c9      	b.n	80045ce <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	78db      	ldrb	r3, [r3, #3]
 800423e:	2b02      	cmp	r3, #2
 8004240:	d11e      	bne.n	8004280 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	b29b      	uxth	r3, r3
 8004250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004258:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	441a      	add	r2, r3
 8004266:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800426a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800426e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004272:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800427a:	b29b      	uxth	r3, r3
 800427c:	8013      	strh	r3, [r2, #0]
 800427e:	e01d      	b.n	80042bc <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	b29b      	uxth	r3, r3
 800428e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004296:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	441a      	add	r2, r3
 80042a4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80042a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	461a      	mov	r2, r3
 80042ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042cc:	4413      	add	r3, r2
 80042ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	011a      	lsls	r2, r3, #4
 80042d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042d8:	4413      	add	r3, r2
 80042da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042de:	65bb      	str	r3, [r7, #88]	; 0x58
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	891b      	ldrh	r3, [r3, #8]
 80042e4:	085b      	lsrs	r3, r3, #1
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042ee:	801a      	strh	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	657b      	str	r3, [r7, #84]	; 0x54
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	461a      	mov	r2, r3
 80042fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004300:	4413      	add	r3, r2
 8004302:	657b      	str	r3, [r7, #84]	; 0x54
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	011a      	lsls	r2, r3, #4
 800430a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800430c:	4413      	add	r3, r2
 800430e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004312:	653b      	str	r3, [r7, #80]	; 0x50
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	895b      	ldrh	r3, [r3, #10]
 8004318:	085b      	lsrs	r3, r3, #1
 800431a:	b29b      	uxth	r3, r3
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004322:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	785b      	ldrb	r3, [r3, #1]
 8004328:	2b00      	cmp	r3, #0
 800432a:	f040 8093 	bne.w	8004454 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4413      	add	r3, r2
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800433e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d01b      	beq.n	8004382 <USB_ActivateEndpoint+0x526>
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	b29b      	uxth	r3, r3
 8004358:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800435c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004360:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	441a      	add	r2, r3
 800436c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800436e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004372:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004376:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800437a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800437e:	b29b      	uxth	r3, r3
 8004380:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004390:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004396:	2b00      	cmp	r3, #0
 8004398:	d01b      	beq.n	80043d2 <USB_ActivateEndpoint+0x576>
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	441a      	add	r2, r3
 80043bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80043be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	881b      	ldrh	r3, [r3, #0]
 80043de:	b29b      	uxth	r3, r3
 80043e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e8:	873b      	strh	r3, [r7, #56]	; 0x38
 80043ea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80043ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80043f0:	873b      	strh	r3, [r7, #56]	; 0x38
 80043f2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80043f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80043f8:	873b      	strh	r3, [r7, #56]	; 0x38
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	441a      	add	r2, r3
 8004404:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800440a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800440e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004416:	b29b      	uxth	r3, r3
 8004418:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	b29b      	uxth	r3, r3
 8004428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800442c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004430:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	441a      	add	r2, r3
 800443c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800443e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800444a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800444e:	b29b      	uxth	r3, r3
 8004450:	8013      	strh	r3, [r2, #0]
 8004452:	e0bc      	b.n	80045ce <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004464:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d01d      	beq.n	80044ac <USB_ActivateEndpoint+0x650>
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	b29b      	uxth	r3, r3
 800447e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004486:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	441a      	add	r2, r3
 8004494:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004498:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800449c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	881b      	ldrh	r3, [r3, #0]
 80044b8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80044bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80044c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d01d      	beq.n	8004504 <USB_ActivateEndpoint+0x6a8>
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044de:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	441a      	add	r2, r3
 80044ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80044f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004500:	b29b      	uxth	r3, r3
 8004502:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	78db      	ldrb	r3, [r3, #3]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d024      	beq.n	8004556 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	881b      	ldrh	r3, [r3, #0]
 8004518:	b29b      	uxth	r3, r3
 800451a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800451e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004522:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004526:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800452a:	f083 0320 	eor.w	r3, r3, #32
 800452e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	441a      	add	r2, r3
 800453c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004540:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004544:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800454c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004550:	b29b      	uxth	r3, r3
 8004552:	8013      	strh	r3, [r2, #0]
 8004554:	e01d      	b.n	8004592 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	b29b      	uxth	r3, r3
 8004564:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004568:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800456c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	441a      	add	r2, r3
 800457a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800457e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800458a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800458e:	b29b      	uxth	r3, r3
 8004590:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4413      	add	r3, r2
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	441a      	add	r2, r3
 80045b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80045ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80045ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3774      	adds	r7, #116	; 0x74
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bc80      	pop	{r7}
 80045da:	4770      	bx	lr

080045dc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80045dc:	b480      	push	{r7}
 80045de:	b08d      	sub	sp, #52	; 0x34
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	7b1b      	ldrb	r3, [r3, #12]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f040 808e 	bne.w	800470c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	785b      	ldrb	r3, [r3, #1]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d044      	beq.n	8004682 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	81bb      	strh	r3, [r7, #12]
 8004606:	89bb      	ldrh	r3, [r7, #12]
 8004608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01b      	beq.n	8004648 <USB_DeactivateEndpoint+0x6c>
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	881b      	ldrh	r3, [r3, #0]
 800461c:	b29b      	uxth	r3, r3
 800461e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004626:	817b      	strh	r3, [r7, #10]
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	441a      	add	r2, r3
 8004632:	897b      	ldrh	r3, [r7, #10]
 8004634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800463c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004640:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004644:	b29b      	uxth	r3, r3
 8004646:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	b29b      	uxth	r3, r3
 8004656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800465a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800465e:	813b      	strh	r3, [r7, #8]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	441a      	add	r2, r3
 800466a:	893b      	ldrh	r3, [r7, #8]
 800466c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004670:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004674:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800467c:	b29b      	uxth	r3, r3
 800467e:	8013      	strh	r3, [r2, #0]
 8004680:	e192      	b.n	80049a8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4413      	add	r3, r2
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	827b      	strh	r3, [r7, #18]
 8004690:	8a7b      	ldrh	r3, [r7, #18]
 8004692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d01b      	beq.n	80046d2 <USB_DeactivateEndpoint+0xf6>
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b0:	823b      	strh	r3, [r7, #16]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	441a      	add	r2, r3
 80046bc:	8a3b      	ldrh	r3, [r7, #16]
 80046be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	b29b      	uxth	r3, r3
 80046e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e8:	81fb      	strh	r3, [r7, #14]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	441a      	add	r2, r3
 80046f4:	89fb      	ldrh	r3, [r7, #14]
 80046f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004706:	b29b      	uxth	r3, r3
 8004708:	8013      	strh	r3, [r2, #0]
 800470a:	e14d      	b.n	80049a8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	785b      	ldrb	r3, [r3, #1]
 8004710:	2b00      	cmp	r3, #0
 8004712:	f040 80a5 	bne.w	8004860 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	843b      	strh	r3, [r7, #32]
 8004724:	8c3b      	ldrh	r3, [r7, #32]
 8004726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d01b      	beq.n	8004766 <USB_DeactivateEndpoint+0x18a>
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	b29b      	uxth	r3, r3
 800473c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004744:	83fb      	strh	r3, [r7, #30]
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	441a      	add	r2, r3
 8004750:	8bfb      	ldrh	r3, [r7, #30]
 8004752:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004756:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800475a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800475e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004762:	b29b      	uxth	r3, r3
 8004764:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	83bb      	strh	r3, [r7, #28]
 8004774:	8bbb      	ldrh	r3, [r7, #28]
 8004776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477a:	2b00      	cmp	r3, #0
 800477c:	d01b      	beq.n	80047b6 <USB_DeactivateEndpoint+0x1da>
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	b29b      	uxth	r3, r3
 800478c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004794:	837b      	strh	r3, [r7, #26]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	441a      	add	r2, r3
 80047a0:	8b7b      	ldrh	r3, [r7, #26]
 80047a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047cc:	833b      	strh	r3, [r7, #24]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	441a      	add	r2, r3
 80047d8:	8b3b      	ldrh	r3, [r7, #24]
 80047da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	881b      	ldrh	r3, [r3, #0]
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004804:	82fb      	strh	r3, [r7, #22]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	441a      	add	r2, r3
 8004810:	8afb      	ldrh	r3, [r7, #22]
 8004812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800481a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800481e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004822:	b29b      	uxth	r3, r3
 8004824:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	b29b      	uxth	r3, r3
 8004834:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800483c:	82bb      	strh	r3, [r7, #20]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	441a      	add	r2, r3
 8004848:	8abb      	ldrh	r3, [r7, #20]
 800484a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800484e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800485a:	b29b      	uxth	r3, r3
 800485c:	8013      	strh	r3, [r2, #0]
 800485e:	e0a3      	b.n	80049a8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800486e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d01b      	beq.n	80048b0 <USB_DeactivateEndpoint+0x2d4>
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	b29b      	uxth	r3, r3
 8004886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800488a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	441a      	add	r2, r3
 800489a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800489c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80048be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80048c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01b      	beq.n	8004900 <USB_DeactivateEndpoint+0x324>
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048de:	853b      	strh	r3, [r7, #40]	; 0x28
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	441a      	add	r2, r3
 80048ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80048ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	881b      	ldrh	r3, [r3, #0]
 800490c:	b29b      	uxth	r3, r3
 800490e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004916:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	441a      	add	r2, r3
 8004922:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004924:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004928:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800492c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004934:	b29b      	uxth	r3, r3
 8004936:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	b29b      	uxth	r3, r3
 8004946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800494a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800494e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	441a      	add	r2, r3
 800495a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800495c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800496c:	b29b      	uxth	r3, r3
 800496e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	881b      	ldrh	r3, [r3, #0]
 800497c:	b29b      	uxth	r3, r3
 800497e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004986:	847b      	strh	r3, [r7, #34]	; 0x22
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	441a      	add	r2, r3
 8004992:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004994:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004998:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800499c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3734      	adds	r7, #52	; 0x34
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bc80      	pop	{r7}
 80049b2:	4770      	bx	lr

080049b4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b0c2      	sub	sp, #264	; 0x108
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049c2:	6018      	str	r0, [r3, #0]
 80049c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049cc:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	785b      	ldrb	r3, [r3, #1]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	f040 86b7 	bne.w	800574e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80049e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	699a      	ldr	r2, [r3, #24]
 80049ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d908      	bls.n	8004a0e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80049fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004a0c:	e007      	b.n	8004a1e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	7b1b      	ldrb	r3, [r3, #12]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d13a      	bne.n	8004aa4 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6959      	ldr	r1, [r3, #20]
 8004a3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	88da      	ldrh	r2, [r3, #6]
 8004a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004a50:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004a54:	6800      	ldr	r0, [r0, #0]
 8004a56:	f001 fc9c 	bl	8006392 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	613b      	str	r3, [r7, #16]
 8004a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	461a      	mov	r2, r3
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	011a      	lsls	r2, r3, #4
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	801a      	strh	r2, [r3, #0]
 8004aa0:	f000 be1f 	b.w	80056e2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	78db      	ldrb	r3, [r3, #3]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	f040 8462 	bne.w	800537a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6a1a      	ldr	r2, [r3, #32]
 8004ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	f240 83df 	bls.w	8005292 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ad8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ae2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	441a      	add	r2, r3
 8004b18:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004b1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b24:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6a1a      	ldr	r2, [r3, #32]
 8004b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b40:	1ad2      	subs	r2, r2, r3
 8004b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4413      	add	r3, r2
 8004b68:	881b      	ldrh	r3, [r3, #0]
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 81c7 	beq.w	8004f04 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	633b      	str	r3, [r7, #48]	; 0x30
 8004b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	785b      	ldrb	r3, [r3, #1]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d177      	bne.n	8004c82 <USB_EPStartXfer+0x2ce>
 8004b92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ba2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	461a      	mov	r2, r3
 8004bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb2:	4413      	add	r3, r2
 8004bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	011a      	lsls	r2, r3, #4
 8004bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	881b      	ldrh	r3, [r3, #0]
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	801a      	strh	r2, [r3, #0]
 8004bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004be2:	2b3e      	cmp	r3, #62	; 0x3e
 8004be4:	d921      	bls.n	8004c2a <USB_EPStartXfer+0x276>
 8004be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bf4:	f003 031f 	and.w	r3, r3, #31
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d104      	bne.n	8004c06 <USB_EPStartXfer+0x252>
 8004bfc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004c00:	3b01      	subs	r3, #1
 8004c02:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	029b      	lsls	r3, r3, #10
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	4313      	orrs	r3, r2
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	801a      	strh	r2, [r3, #0]
 8004c28:	e050      	b.n	8004ccc <USB_EPStartXfer+0x318>
 8004c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10a      	bne.n	8004c48 <USB_EPStartXfer+0x294>
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	801a      	strh	r2, [r3, #0]
 8004c46:	e041      	b.n	8004ccc <USB_EPStartXfer+0x318>
 8004c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c4c:	085b      	lsrs	r3, r3, #1
 8004c4e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d004      	beq.n	8004c68 <USB_EPStartXfer+0x2b4>
 8004c5e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004c62:	3301      	adds	r3, #1
 8004c64:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	029b      	lsls	r3, r3, #10
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	801a      	strh	r2, [r3, #0]
 8004c80:	e024      	b.n	8004ccc <USB_EPStartXfer+0x318>
 8004c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	785b      	ldrb	r3, [r3, #1]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d11c      	bne.n	8004ccc <USB_EPStartXfer+0x318>
 8004c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca6:	4413      	add	r3, r2
 8004ca8:	633b      	str	r3, [r7, #48]	; 0x30
 8004caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	011a      	lsls	r2, r3, #4
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cba:	4413      	add	r3, r2
 8004cbc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	895b      	ldrh	r3, [r3, #10]
 8004cd8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004cdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ce0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6959      	ldr	r1, [r3, #20]
 8004ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004cf2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004cf6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004cfa:	6800      	ldr	r0, [r0, #0]
 8004cfc:	f001 fb49 	bl	8006392 <USB_WritePMA>
            ep->xfer_buff += len;
 8004d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695a      	ldr	r2, [r3, #20]
 8004d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d10:	441a      	add	r2, r3
 8004d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6a1a      	ldr	r2, [r3, #32]
 8004d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d90f      	bls.n	8004d5a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6a1a      	ldr	r2, [r3, #32]
 8004d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d4a:	1ad2      	subs	r2, r2, r3
 8004d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	621a      	str	r2, [r3, #32]
 8004d58:	e00e      	b.n	8004d78 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2200      	movs	r2, #0
 8004d76:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	785b      	ldrb	r3, [r3, #1]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d177      	bne.n	8004e78 <USB_EPStartXfer+0x4c4>
 8004d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	61bb      	str	r3, [r7, #24]
 8004d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	461a      	mov	r2, r3
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	4413      	add	r3, r2
 8004daa:	61bb      	str	r3, [r7, #24]
 8004dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	011a      	lsls	r2, r3, #4
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	801a      	strh	r2, [r3, #0]
 8004dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dd8:	2b3e      	cmp	r3, #62	; 0x3e
 8004dda:	d921      	bls.n	8004e20 <USB_EPStartXfer+0x46c>
 8004ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004de0:	095b      	lsrs	r3, r3, #5
 8004de2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dea:	f003 031f 	and.w	r3, r3, #31
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d104      	bne.n	8004dfc <USB_EPStartXfer+0x448>
 8004df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004df6:	3b01      	subs	r3, #1
 8004df8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	029b      	lsls	r3, r3, #10
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	801a      	strh	r2, [r3, #0]
 8004e1e:	e056      	b.n	8004ece <USB_EPStartXfer+0x51a>
 8004e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10a      	bne.n	8004e3e <USB_EPStartXfer+0x48a>
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	801a      	strh	r2, [r3, #0]
 8004e3c:	e047      	b.n	8004ece <USB_EPStartXfer+0x51a>
 8004e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e42:	085b      	lsrs	r3, r3, #1
 8004e44:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d004      	beq.n	8004e5e <USB_EPStartXfer+0x4aa>
 8004e54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e58:	3301      	adds	r3, #1
 8004e5a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	881b      	ldrh	r3, [r3, #0]
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	029b      	lsls	r3, r3, #10
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	801a      	strh	r2, [r3, #0]
 8004e76:	e02a      	b.n	8004ece <USB_EPStartXfer+0x51a>
 8004e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	785b      	ldrb	r3, [r3, #1]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d122      	bne.n	8004ece <USB_EPStartXfer+0x51a>
 8004e88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	623b      	str	r3, [r7, #32]
 8004e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	623b      	str	r3, [r7, #32]
 8004eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	011a      	lsls	r2, r3, #4
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ec2:	61fb      	str	r3, [r7, #28]
 8004ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	891b      	ldrh	r3, [r3, #8]
 8004eda:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6959      	ldr	r1, [r3, #20]
 8004eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004ef4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004ef8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004efc:	6800      	ldr	r0, [r0, #0]
 8004efe:	f001 fa48 	bl	8006392 <USB_WritePMA>
 8004f02:	e3ee      	b.n	80056e2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	785b      	ldrb	r3, [r3, #1]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d177      	bne.n	8005004 <USB_EPStartXfer+0x650>
 8004f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	461a      	mov	r2, r3
 8004f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f34:	4413      	add	r3, r2
 8004f36:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	011a      	lsls	r2, r3, #4
 8004f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f48:	4413      	add	r3, r2
 8004f4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f4e:	647b      	str	r3, [r7, #68]	; 0x44
 8004f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f5e:	801a      	strh	r2, [r3, #0]
 8004f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f64:	2b3e      	cmp	r3, #62	; 0x3e
 8004f66:	d921      	bls.n	8004fac <USB_EPStartXfer+0x5f8>
 8004f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f6c:	095b      	lsrs	r3, r3, #5
 8004f6e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f76:	f003 031f 	and.w	r3, r3, #31
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d104      	bne.n	8004f88 <USB_EPStartXfer+0x5d4>
 8004f7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f82:	3b01      	subs	r3, #1
 8004f84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	029b      	lsls	r3, r3, #10
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fa8:	801a      	strh	r2, [r3, #0]
 8004faa:	e056      	b.n	800505a <USB_EPStartXfer+0x6a6>
 8004fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10a      	bne.n	8004fca <USB_EPStartXfer+0x616>
 8004fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fc6:	801a      	strh	r2, [r3, #0]
 8004fc8:	e047      	b.n	800505a <USB_EPStartXfer+0x6a6>
 8004fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fce:	085b      	lsrs	r3, r3, #1
 8004fd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d004      	beq.n	8004fea <USB_EPStartXfer+0x636>
 8004fe0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004fea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	029b      	lsls	r3, r3, #10
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005000:	801a      	strh	r2, [r3, #0]
 8005002:	e02a      	b.n	800505a <USB_EPStartXfer+0x6a6>
 8005004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	785b      	ldrb	r3, [r3, #1]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d122      	bne.n	800505a <USB_EPStartXfer+0x6a6>
 8005014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005018:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	653b      	str	r3, [r7, #80]	; 0x50
 8005020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005024:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800502e:	b29b      	uxth	r3, r3
 8005030:	461a      	mov	r2, r3
 8005032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005034:	4413      	add	r3, r2
 8005036:	653b      	str	r3, [r7, #80]	; 0x50
 8005038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800503c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	011a      	lsls	r2, r3, #4
 8005046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005048:	4413      	add	r3, r2
 800504a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800504e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005054:	b29a      	uxth	r2, r3
 8005056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005058:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800505a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800505e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	891b      	ldrh	r3, [r3, #8]
 8005066:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800506a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800506e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6959      	ldr	r1, [r3, #20]
 8005076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800507a:	b29b      	uxth	r3, r3
 800507c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005080:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005084:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005088:	6800      	ldr	r0, [r0, #0]
 800508a:	f001 f982 	bl	8006392 <USB_WritePMA>
            ep->xfer_buff += len;
 800508e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	695a      	ldr	r2, [r3, #20]
 800509a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800509e:	441a      	add	r2, r3
 80050a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80050ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6a1a      	ldr	r2, [r3, #32]
 80050b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d90f      	bls.n	80050e8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80050c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6a1a      	ldr	r2, [r3, #32]
 80050d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050d8:	1ad2      	subs	r2, r2, r3
 80050da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	621a      	str	r2, [r3, #32]
 80050e6:	e00e      	b.n	8005106 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80050e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80050f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2200      	movs	r2, #0
 8005104:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800510a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	643b      	str	r3, [r7, #64]	; 0x40
 8005112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	785b      	ldrb	r3, [r3, #1]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d177      	bne.n	8005212 <USB_EPStartXfer+0x85e>
 8005122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005126:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	63bb      	str	r3, [r7, #56]	; 0x38
 800512e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005132:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800513c:	b29b      	uxth	r3, r3
 800513e:	461a      	mov	r2, r3
 8005140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005142:	4413      	add	r3, r2
 8005144:	63bb      	str	r3, [r7, #56]	; 0x38
 8005146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800514a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	011a      	lsls	r2, r3, #4
 8005154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005156:	4413      	add	r3, r2
 8005158:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800515c:	637b      	str	r3, [r7, #52]	; 0x34
 800515e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005160:	881b      	ldrh	r3, [r3, #0]
 8005162:	b29b      	uxth	r3, r3
 8005164:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005168:	b29a      	uxth	r2, r3
 800516a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800516c:	801a      	strh	r2, [r3, #0]
 800516e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005172:	2b3e      	cmp	r3, #62	; 0x3e
 8005174:	d921      	bls.n	80051ba <USB_EPStartXfer+0x806>
 8005176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005184:	f003 031f 	and.w	r3, r3, #31
 8005188:	2b00      	cmp	r3, #0
 800518a:	d104      	bne.n	8005196 <USB_EPStartXfer+0x7e2>
 800518c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005190:	3b01      	subs	r3, #1
 8005192:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	b29a      	uxth	r2, r3
 800519c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	029b      	lsls	r3, r3, #10
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	4313      	orrs	r3, r2
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b6:	801a      	strh	r2, [r3, #0]
 80051b8:	e050      	b.n	800525c <USB_EPStartXfer+0x8a8>
 80051ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10a      	bne.n	80051d8 <USB_EPStartXfer+0x824>
 80051c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c4:	881b      	ldrh	r3, [r3, #0]
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d4:	801a      	strh	r2, [r3, #0]
 80051d6:	e041      	b.n	800525c <USB_EPStartXfer+0x8a8>
 80051d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051dc:	085b      	lsrs	r3, r3, #1
 80051de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80051e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d004      	beq.n	80051f8 <USB_EPStartXfer+0x844>
 80051ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f2:	3301      	adds	r3, #1
 80051f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80051f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fa:	881b      	ldrh	r3, [r3, #0]
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005202:	b29b      	uxth	r3, r3
 8005204:	029b      	lsls	r3, r3, #10
 8005206:	b29b      	uxth	r3, r3
 8005208:	4313      	orrs	r3, r2
 800520a:	b29a      	uxth	r2, r3
 800520c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800520e:	801a      	strh	r2, [r3, #0]
 8005210:	e024      	b.n	800525c <USB_EPStartXfer+0x8a8>
 8005212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	785b      	ldrb	r3, [r3, #1]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d11c      	bne.n	800525c <USB_EPStartXfer+0x8a8>
 8005222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005226:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005230:	b29b      	uxth	r3, r3
 8005232:	461a      	mov	r2, r3
 8005234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005236:	4413      	add	r3, r2
 8005238:	643b      	str	r3, [r7, #64]	; 0x40
 800523a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800523e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	011a      	lsls	r2, r3, #4
 8005248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800524a:	4413      	add	r3, r2
 800524c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005250:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005256:	b29a      	uxth	r2, r3
 8005258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800525a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800525c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	895b      	ldrh	r3, [r3, #10]
 8005268:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800526c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6959      	ldr	r1, [r3, #20]
 8005278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800527c:	b29b      	uxth	r3, r3
 800527e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005282:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005286:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800528a:	6800      	ldr	r0, [r0, #0]
 800528c:	f001 f881 	bl	8006392 <USB_WritePMA>
 8005290:	e227      	b.n	80056e2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80052a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	b29b      	uxth	r3, r3
 80052c0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80052c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80052cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	441a      	add	r2, r3
 80052e6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80052ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80052fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005302:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	65fb      	str	r3, [r7, #92]	; 0x5c
 800530a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800530e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005318:	b29b      	uxth	r3, r3
 800531a:	461a      	mov	r2, r3
 800531c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800531e:	4413      	add	r3, r2
 8005320:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	011a      	lsls	r2, r3, #4
 8005330:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005332:	4413      	add	r3, r2
 8005334:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005338:	65bb      	str	r3, [r7, #88]	; 0x58
 800533a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800533e:	b29a      	uxth	r2, r3
 8005340:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005342:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	891b      	ldrh	r3, [r3, #8]
 8005350:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6959      	ldr	r1, [r3, #20]
 8005360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005364:	b29b      	uxth	r3, r3
 8005366:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800536a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800536e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005372:	6800      	ldr	r0, [r0, #0]
 8005374:	f001 f80d 	bl	8006392 <USB_WritePMA>
 8005378:	e1b3      	b.n	80056e2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800537a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800537e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6a1a      	ldr	r2, [r3, #32]
 8005386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800538a:	1ad2      	subs	r2, r2, r3
 800538c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005390:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800539c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 80c6 	beq.w	800554c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80053c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	673b      	str	r3, [r7, #112]	; 0x70
 80053cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	785b      	ldrb	r3, [r3, #1]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d177      	bne.n	80054cc <USB_EPStartXfer+0xb18>
 80053dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80053e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	461a      	mov	r2, r3
 80053fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053fc:	4413      	add	r3, r2
 80053fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005404:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	011a      	lsls	r2, r3, #4
 800540e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005410:	4413      	add	r3, r2
 8005412:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005416:	667b      	str	r3, [r7, #100]	; 0x64
 8005418:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	b29b      	uxth	r3, r3
 800541e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005422:	b29a      	uxth	r2, r3
 8005424:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005426:	801a      	strh	r2, [r3, #0]
 8005428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800542c:	2b3e      	cmp	r3, #62	; 0x3e
 800542e:	d921      	bls.n	8005474 <USB_EPStartXfer+0xac0>
 8005430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005434:	095b      	lsrs	r3, r3, #5
 8005436:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800543a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800543e:	f003 031f 	and.w	r3, r3, #31
 8005442:	2b00      	cmp	r3, #0
 8005444:	d104      	bne.n	8005450 <USB_EPStartXfer+0xa9c>
 8005446:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800544a:	3b01      	subs	r3, #1
 800544c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	b29a      	uxth	r2, r3
 8005456:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800545a:	b29b      	uxth	r3, r3
 800545c:	029b      	lsls	r3, r3, #10
 800545e:	b29b      	uxth	r3, r3
 8005460:	4313      	orrs	r3, r2
 8005462:	b29b      	uxth	r3, r3
 8005464:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005468:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800546c:	b29a      	uxth	r2, r3
 800546e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005470:	801a      	strh	r2, [r3, #0]
 8005472:	e050      	b.n	8005516 <USB_EPStartXfer+0xb62>
 8005474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10a      	bne.n	8005492 <USB_EPStartXfer+0xade>
 800547c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	b29b      	uxth	r3, r3
 8005482:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005486:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800548a:	b29a      	uxth	r2, r3
 800548c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800548e:	801a      	strh	r2, [r3, #0]
 8005490:	e041      	b.n	8005516 <USB_EPStartXfer+0xb62>
 8005492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005496:	085b      	lsrs	r3, r3, #1
 8005498:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800549c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d004      	beq.n	80054b2 <USB_EPStartXfer+0xafe>
 80054a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80054ac:	3301      	adds	r3, #1
 80054ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80054b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80054bc:	b29b      	uxth	r3, r3
 80054be:	029b      	lsls	r3, r3, #10
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	4313      	orrs	r3, r2
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054c8:	801a      	strh	r2, [r3, #0]
 80054ca:	e024      	b.n	8005516 <USB_EPStartXfer+0xb62>
 80054cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	785b      	ldrb	r3, [r3, #1]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d11c      	bne.n	8005516 <USB_EPStartXfer+0xb62>
 80054dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	461a      	mov	r2, r3
 80054ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054f0:	4413      	add	r3, r2
 80054f2:	673b      	str	r3, [r7, #112]	; 0x70
 80054f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	011a      	lsls	r2, r3, #4
 8005502:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005504:	4413      	add	r3, r2
 8005506:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800550a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800550c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005510:	b29a      	uxth	r2, r3
 8005512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005514:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800551a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	895b      	ldrh	r3, [r3, #10]
 8005522:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800552a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6959      	ldr	r1, [r3, #20]
 8005532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005536:	b29b      	uxth	r3, r3
 8005538:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800553c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005540:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005544:	6800      	ldr	r0, [r0, #0]
 8005546:	f000 ff24 	bl	8006392 <USB_WritePMA>
 800554a:	e0ca      	b.n	80056e2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800554c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005550:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	785b      	ldrb	r3, [r3, #1]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d177      	bne.n	800564c <USB_EPStartXfer+0xc98>
 800555c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005560:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800556c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005576:	b29b      	uxth	r3, r3
 8005578:	461a      	mov	r2, r3
 800557a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800557c:	4413      	add	r3, r2
 800557e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	011a      	lsls	r2, r3, #4
 800558e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005590:	4413      	add	r3, r2
 8005592:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005596:	67bb      	str	r3, [r7, #120]	; 0x78
 8005598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	b29b      	uxth	r3, r3
 800559e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055a6:	801a      	strh	r2, [r3, #0]
 80055a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055ac:	2b3e      	cmp	r3, #62	; 0x3e
 80055ae:	d921      	bls.n	80055f4 <USB_EPStartXfer+0xc40>
 80055b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055b4:	095b      	lsrs	r3, r3, #5
 80055b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80055ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055be:	f003 031f 	and.w	r3, r3, #31
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d104      	bne.n	80055d0 <USB_EPStartXfer+0xc1c>
 80055c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80055ca:	3b01      	subs	r3, #1
 80055cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80055d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80055da:	b29b      	uxth	r3, r3
 80055dc:	029b      	lsls	r3, r3, #10
 80055de:	b29b      	uxth	r3, r3
 80055e0:	4313      	orrs	r3, r2
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055f0:	801a      	strh	r2, [r3, #0]
 80055f2:	e05c      	b.n	80056ae <USB_EPStartXfer+0xcfa>
 80055f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10a      	bne.n	8005612 <USB_EPStartXfer+0xc5e>
 80055fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	b29b      	uxth	r3, r3
 8005602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800560a:	b29a      	uxth	r2, r3
 800560c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800560e:	801a      	strh	r2, [r3, #0]
 8005610:	e04d      	b.n	80056ae <USB_EPStartXfer+0xcfa>
 8005612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005616:	085b      	lsrs	r3, r3, #1
 8005618:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800561c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	d004      	beq.n	8005632 <USB_EPStartXfer+0xc7e>
 8005628:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800562c:	3301      	adds	r3, #1
 800562e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005632:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	b29a      	uxth	r2, r3
 8005638:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800563c:	b29b      	uxth	r3, r3
 800563e:	029b      	lsls	r3, r3, #10
 8005640:	b29b      	uxth	r3, r3
 8005642:	4313      	orrs	r3, r2
 8005644:	b29a      	uxth	r2, r3
 8005646:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005648:	801a      	strh	r2, [r3, #0]
 800564a:	e030      	b.n	80056ae <USB_EPStartXfer+0xcfa>
 800564c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	785b      	ldrb	r3, [r3, #1]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d128      	bne.n	80056ae <USB_EPStartXfer+0xcfa>
 800565c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005660:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800566a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800566e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005678:	b29b      	uxth	r3, r3
 800567a:	461a      	mov	r2, r3
 800567c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005680:	4413      	add	r3, r2
 8005682:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800568a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	011a      	lsls	r2, r3, #4
 8005694:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005698:	4413      	add	r3, r2
 800569a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800569e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80056ac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80056ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	891b      	ldrh	r3, [r3, #8]
 80056ba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6959      	ldr	r1, [r3, #20]
 80056ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80056d4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80056d8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80056dc:	6800      	ldr	r0, [r0, #0]
 80056de:	f000 fe58 	bl	8006392 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80056e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	4413      	add	r3, r2
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	b29b      	uxth	r3, r3
 8005700:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005704:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005708:	817b      	strh	r3, [r7, #10]
 800570a:	897b      	ldrh	r3, [r7, #10]
 800570c:	f083 0310 	eor.w	r3, r3, #16
 8005710:	817b      	strh	r3, [r7, #10]
 8005712:	897b      	ldrh	r3, [r7, #10]
 8005714:	f083 0320 	eor.w	r3, r3, #32
 8005718:	817b      	strh	r3, [r7, #10]
 800571a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800571e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005728:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	441a      	add	r2, r3
 8005734:	897b      	ldrh	r3, [r7, #10]
 8005736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800573a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800573e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005746:	b29b      	uxth	r3, r3
 8005748:	8013      	strh	r3, [r2, #0]
 800574a:	f000 bcde 	b.w	800610a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800574e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005752:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	7b1b      	ldrb	r3, [r3, #12]
 800575a:	2b00      	cmp	r3, #0
 800575c:	f040 80bb 	bne.w	80058d6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	699a      	ldr	r2, [r3, #24]
 800576c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	429a      	cmp	r2, r3
 800577a:	d917      	bls.n	80057ac <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800577c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800578c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	699a      	ldr	r2, [r3, #24]
 8005798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800579c:	1ad2      	subs	r2, r2, r3
 800579e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	619a      	str	r2, [r3, #24]
 80057aa:	e00e      	b.n	80057ca <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80057ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80057bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2200      	movs	r2, #0
 80057c8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80057ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	461a      	mov	r2, r3
 80057ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057ee:	4413      	add	r3, r2
 80057f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	011a      	lsls	r2, r3, #4
 8005802:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005806:	4413      	add	r3, r2
 8005808:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800580c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005810:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	b29b      	uxth	r3, r3
 8005818:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800581c:	b29a      	uxth	r2, r3
 800581e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005822:	801a      	strh	r2, [r3, #0]
 8005824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005828:	2b3e      	cmp	r3, #62	; 0x3e
 800582a:	d924      	bls.n	8005876 <USB_EPStartXfer+0xec2>
 800582c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005830:	095b      	lsrs	r3, r3, #5
 8005832:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800583a:	f003 031f 	and.w	r3, r3, #31
 800583e:	2b00      	cmp	r3, #0
 8005840:	d104      	bne.n	800584c <USB_EPStartXfer+0xe98>
 8005842:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005846:	3b01      	subs	r3, #1
 8005848:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800584c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	b29a      	uxth	r2, r3
 8005854:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005858:	b29b      	uxth	r3, r3
 800585a:	029b      	lsls	r3, r3, #10
 800585c:	b29b      	uxth	r3, r3
 800585e:	4313      	orrs	r3, r2
 8005860:	b29b      	uxth	r3, r3
 8005862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800586a:	b29a      	uxth	r2, r3
 800586c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005870:	801a      	strh	r2, [r3, #0]
 8005872:	f000 bc10 	b.w	8006096 <USB_EPStartXfer+0x16e2>
 8005876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10c      	bne.n	8005898 <USB_EPStartXfer+0xee4>
 800587e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	b29b      	uxth	r3, r3
 8005886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800588a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800588e:	b29a      	uxth	r2, r3
 8005890:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005894:	801a      	strh	r2, [r3, #0]
 8005896:	e3fe      	b.n	8006096 <USB_EPStartXfer+0x16e2>
 8005898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800589c:	085b      	lsrs	r3, r3, #1
 800589e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d004      	beq.n	80058b8 <USB_EPStartXfer+0xf04>
 80058ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058b2:	3301      	adds	r3, #1
 80058b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	b29a      	uxth	r2, r3
 80058c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	029b      	lsls	r3, r3, #10
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	4313      	orrs	r3, r2
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058d2:	801a      	strh	r2, [r3, #0]
 80058d4:	e3df      	b.n	8006096 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80058d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	78db      	ldrb	r3, [r3, #3]
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	f040 8218 	bne.w	8005d18 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80058e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	785b      	ldrb	r3, [r3, #1]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f040 809d 	bne.w	8005a34 <USB_EPStartXfer+0x1080>
 80058fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800590c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005916:	b29b      	uxth	r3, r3
 8005918:	461a      	mov	r2, r3
 800591a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800591e:	4413      	add	r3, r2
 8005920:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	011a      	lsls	r2, r3, #4
 8005932:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005936:	4413      	add	r3, r2
 8005938:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800593c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005940:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005944:	881b      	ldrh	r3, [r3, #0]
 8005946:	b29b      	uxth	r3, r3
 8005948:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800594c:	b29a      	uxth	r2, r3
 800594e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005952:	801a      	strh	r2, [r3, #0]
 8005954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	2b3e      	cmp	r3, #62	; 0x3e
 8005962:	d92b      	bls.n	80059bc <USB_EPStartXfer+0x1008>
 8005964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	095b      	lsrs	r3, r3, #5
 8005972:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800597a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	f003 031f 	and.w	r3, r3, #31
 8005986:	2b00      	cmp	r3, #0
 8005988:	d104      	bne.n	8005994 <USB_EPStartXfer+0xfe0>
 800598a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800598e:	3b01      	subs	r3, #1
 8005990:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005994:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	b29a      	uxth	r2, r3
 800599c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	029b      	lsls	r3, r3, #10
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	4313      	orrs	r3, r2
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80059b8:	801a      	strh	r2, [r3, #0]
 80059ba:	e070      	b.n	8005a9e <USB_EPStartXfer+0x10ea>
 80059bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10c      	bne.n	80059e6 <USB_EPStartXfer+0x1032>
 80059cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80059d0:	881b      	ldrh	r3, [r3, #0]
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059dc:	b29a      	uxth	r2, r3
 80059de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80059e2:	801a      	strh	r2, [r3, #0]
 80059e4:	e05b      	b.n	8005a9e <USB_EPStartXfer+0x10ea>
 80059e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	085b      	lsrs	r3, r3, #1
 80059f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d004      	beq.n	8005a16 <USB_EPStartXfer+0x1062>
 8005a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a10:	3301      	adds	r3, #1
 8005a12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a1a:	881b      	ldrh	r3, [r3, #0]
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	029b      	lsls	r3, r3, #10
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a30:	801a      	strh	r2, [r3, #0]
 8005a32:	e034      	b.n	8005a9e <USB_EPStartXfer+0x10ea>
 8005a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	785b      	ldrb	r3, [r3, #1]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d12c      	bne.n	8005a9e <USB_EPStartXfer+0x10ea>
 8005a44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	461a      	mov	r2, r3
 8005a64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005a68:	4413      	add	r3, r2
 8005a6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	011a      	lsls	r2, r3, #4
 8005a7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005a80:	4413      	add	r3, r2
 8005a82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a9c:	801a      	strh	r2, [r3, #0]
 8005a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	785b      	ldrb	r3, [r3, #1]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f040 809d 	bne.w	8005bf8 <USB_EPStartXfer+0x1244>
 8005abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	461a      	mov	r2, r3
 8005ade:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	011a      	lsls	r2, r3, #4
 8005af6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005afa:	4413      	add	r3, r2
 8005afc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b16:	801a      	strh	r2, [r3, #0]
 8005b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	2b3e      	cmp	r3, #62	; 0x3e
 8005b26:	d92b      	bls.n	8005b80 <USB_EPStartXfer+0x11cc>
 8005b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	095b      	lsrs	r3, r3, #5
 8005b36:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f003 031f 	and.w	r3, r3, #31
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d104      	bne.n	8005b58 <USB_EPStartXfer+0x11a4>
 8005b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b52:	3b01      	subs	r3, #1
 8005b54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b5c:	881b      	ldrh	r3, [r3, #0]
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	029b      	lsls	r3, r3, #10
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b7c:	801a      	strh	r2, [r3, #0]
 8005b7e:	e069      	b.n	8005c54 <USB_EPStartXfer+0x12a0>
 8005b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10c      	bne.n	8005baa <USB_EPStartXfer+0x11f6>
 8005b90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b94:	881b      	ldrh	r3, [r3, #0]
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ba6:	801a      	strh	r2, [r3, #0]
 8005ba8:	e054      	b.n	8005c54 <USB_EPStartXfer+0x12a0>
 8005baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	085b      	lsrs	r3, r3, #1
 8005bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d004      	beq.n	8005bda <USB_EPStartXfer+0x1226>
 8005bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bde:	881b      	ldrh	r3, [r3, #0]
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	029b      	lsls	r3, r3, #10
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	4313      	orrs	r3, r2
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bf4:	801a      	strh	r2, [r3, #0]
 8005bf6:	e02d      	b.n	8005c54 <USB_EPStartXfer+0x12a0>
 8005bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	785b      	ldrb	r3, [r3, #1]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d125      	bne.n	8005c54 <USB_EPStartXfer+0x12a0>
 8005c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	461a      	mov	r2, r3
 8005c1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c1e:	4413      	add	r3, r2
 8005c20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	011a      	lsls	r2, r3, #4
 8005c32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c36:	4413      	add	r3, r2
 8005c38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c52:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	69db      	ldr	r3, [r3, #28]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 8218 	beq.w	8006096 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005c86:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d005      	beq.n	8005c9e <USB_EPStartXfer+0x12ea>
 8005c92:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10d      	bne.n	8005cba <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005c9e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f040 81f5 	bne.w	8006096 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005cac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f040 81ee 	bne.w	8006096 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ce8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	441a      	add	r2, r3
 8005cfe:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005d02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	8013      	strh	r3, [r2, #0]
 8005d16:	e1be      	b.n	8006096 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	78db      	ldrb	r3, [r3, #3]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	f040 81b4 	bne.w	8006092 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	699a      	ldr	r2, [r3, #24]
 8005d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d917      	bls.n	8005d76 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	699a      	ldr	r2, [r3, #24]
 8005d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d66:	1ad2      	subs	r2, r2, r3
 8005d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	619a      	str	r2, [r3, #24]
 8005d74:	e00e      	b.n	8005d94 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005d86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2200      	movs	r2, #0
 8005d92:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	785b      	ldrb	r3, [r3, #1]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f040 8085 	bne.w	8005eb0 <USB_EPStartXfer+0x14fc>
 8005da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005daa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005dca:	4413      	add	r3, r2
 8005dcc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005dd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	011a      	lsls	r2, r3, #4
 8005dde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005de2:	4413      	add	r3, r2
 8005de4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005de8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005dec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005dfe:	801a      	strh	r2, [r3, #0]
 8005e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e04:	2b3e      	cmp	r3, #62	; 0x3e
 8005e06:	d923      	bls.n	8005e50 <USB_EPStartXfer+0x149c>
 8005e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e0c:	095b      	lsrs	r3, r3, #5
 8005e0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e16:	f003 031f 	and.w	r3, r3, #31
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d104      	bne.n	8005e28 <USB_EPStartXfer+0x1474>
 8005e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e22:	3b01      	subs	r3, #1
 8005e24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	029b      	lsls	r3, r3, #10
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e4c:	801a      	strh	r2, [r3, #0]
 8005e4e:	e060      	b.n	8005f12 <USB_EPStartXfer+0x155e>
 8005e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10c      	bne.n	8005e72 <USB_EPStartXfer+0x14be>
 8005e58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e6e:	801a      	strh	r2, [r3, #0]
 8005e70:	e04f      	b.n	8005f12 <USB_EPStartXfer+0x155e>
 8005e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e76:	085b      	lsrs	r3, r3, #1
 8005e78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d004      	beq.n	8005e92 <USB_EPStartXfer+0x14de>
 8005e88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	029b      	lsls	r3, r3, #10
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005eac:	801a      	strh	r2, [r3, #0]
 8005eae:	e030      	b.n	8005f12 <USB_EPStartXfer+0x155e>
 8005eb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	785b      	ldrb	r3, [r3, #1]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d128      	bne.n	8005f12 <USB_EPStartXfer+0x155e>
 8005ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	461a      	mov	r2, r3
 8005ee0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	011a      	lsls	r2, r3, #4
 8005ef8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005efc:	4413      	add	r3, r2
 8005efe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f02:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005f10:	801a      	strh	r2, [r3, #0]
 8005f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	785b      	ldrb	r3, [r3, #1]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f040 8085 	bne.w	800603c <USB_EPStartXfer+0x1688>
 8005f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	461a      	mov	r2, r3
 8005f52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f56:	4413      	add	r3, r2
 8005f58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005f5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	011a      	lsls	r2, r3, #4
 8005f6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f6e:	4413      	add	r3, r2
 8005f70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f8a:	801a      	strh	r2, [r3, #0]
 8005f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f90:	2b3e      	cmp	r3, #62	; 0x3e
 8005f92:	d923      	bls.n	8005fdc <USB_EPStartXfer+0x1628>
 8005f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f98:	095b      	lsrs	r3, r3, #5
 8005f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fa2:	f003 031f 	and.w	r3, r3, #31
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d104      	bne.n	8005fb4 <USB_EPStartXfer+0x1600>
 8005faa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005fb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	029b      	lsls	r3, r3, #10
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fd8:	801a      	strh	r2, [r3, #0]
 8005fda:	e05c      	b.n	8006096 <USB_EPStartXfer+0x16e2>
 8005fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10c      	bne.n	8005ffe <USB_EPStartXfer+0x164a>
 8005fe4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ff0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ffa:	801a      	strh	r2, [r3, #0]
 8005ffc:	e04b      	b.n	8006096 <USB_EPStartXfer+0x16e2>
 8005ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006002:	085b      	lsrs	r3, r3, #1
 8006004:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	2b00      	cmp	r3, #0
 8006012:	d004      	beq.n	800601e <USB_EPStartXfer+0x166a>
 8006014:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006018:	3301      	adds	r3, #1
 800601a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800601e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	b29a      	uxth	r2, r3
 8006026:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800602a:	b29b      	uxth	r3, r3
 800602c:	029b      	lsls	r3, r3, #10
 800602e:	b29b      	uxth	r3, r3
 8006030:	4313      	orrs	r3, r2
 8006032:	b29a      	uxth	r2, r3
 8006034:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006038:	801a      	strh	r2, [r3, #0]
 800603a:	e02c      	b.n	8006096 <USB_EPStartXfer+0x16e2>
 800603c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	785b      	ldrb	r3, [r3, #1]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d124      	bne.n	8006096 <USB_EPStartXfer+0x16e2>
 800604c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006050:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800605a:	b29b      	uxth	r3, r3
 800605c:	461a      	mov	r2, r3
 800605e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006062:	4413      	add	r3, r2
 8006064:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800606c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	011a      	lsls	r2, r3, #4
 8006076:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800607a:	4413      	add	r3, r2
 800607c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006080:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006088:	b29a      	uxth	r2, r3
 800608a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800608e:	801a      	strh	r2, [r3, #0]
 8006090:	e001      	b.n	8006096 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e03a      	b.n	800610c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800609a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060bc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80060c0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80060c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060c8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80060cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80060d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80060d4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80060d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	441a      	add	r2, r3
 80060f2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80060f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006106:	b29b      	uxth	r3, r3
 8006108:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006116:	b480      	push	{r7}
 8006118:	b085      	sub	sp, #20
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
 800611e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	785b      	ldrb	r3, [r3, #1]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d020      	beq.n	800616a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	b29b      	uxth	r3, r3
 8006136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800613a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800613e:	81bb      	strh	r3, [r7, #12]
 8006140:	89bb      	ldrh	r3, [r7, #12]
 8006142:	f083 0310 	eor.w	r3, r3, #16
 8006146:	81bb      	strh	r3, [r7, #12]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	441a      	add	r2, r3
 8006152:	89bb      	ldrh	r3, [r7, #12]
 8006154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800615c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006164:	b29b      	uxth	r3, r3
 8006166:	8013      	strh	r3, [r2, #0]
 8006168:	e01f      	b.n	80061aa <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	881b      	ldrh	r3, [r3, #0]
 8006176:	b29b      	uxth	r3, r3
 8006178:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800617c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006180:	81fb      	strh	r3, [r7, #14]
 8006182:	89fb      	ldrh	r3, [r7, #14]
 8006184:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006188:	81fb      	strh	r3, [r7, #14]
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	441a      	add	r2, r3
 8006194:	89fb      	ldrh	r3, [r7, #14]
 8006196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800619a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800619e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bc80      	pop	{r7}
 80061b4:	4770      	bx	lr

080061b6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b087      	sub	sp, #28
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	7b1b      	ldrb	r3, [r3, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f040 809d 	bne.w	8006304 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	785b      	ldrb	r3, [r3, #1]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d04c      	beq.n	800626c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4413      	add	r3, r2
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	823b      	strh	r3, [r7, #16]
 80061e0:	8a3b      	ldrh	r3, [r7, #16]
 80061e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d01b      	beq.n	8006222 <USB_EPClearStall+0x6c>
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4413      	add	r3, r2
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006200:	81fb      	strh	r3, [r7, #14]
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	441a      	add	r2, r3
 800620c:	89fb      	ldrh	r3, [r7, #14]
 800620e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006212:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800621a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800621e:	b29b      	uxth	r3, r3
 8006220:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	78db      	ldrb	r3, [r3, #3]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d06c      	beq.n	8006304 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	b29b      	uxth	r3, r3
 8006238:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800623c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006240:	81bb      	strh	r3, [r7, #12]
 8006242:	89bb      	ldrh	r3, [r7, #12]
 8006244:	f083 0320 	eor.w	r3, r3, #32
 8006248:	81bb      	strh	r3, [r7, #12]
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	441a      	add	r2, r3
 8006254:	89bb      	ldrh	r3, [r7, #12]
 8006256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800625a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800625e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006266:	b29b      	uxth	r3, r3
 8006268:	8013      	strh	r3, [r2, #0]
 800626a:	e04b      	b.n	8006304 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	881b      	ldrh	r3, [r3, #0]
 8006278:	82fb      	strh	r3, [r7, #22]
 800627a:	8afb      	ldrh	r3, [r7, #22]
 800627c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d01b      	beq.n	80062bc <USB_EPClearStall+0x106>
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	881b      	ldrh	r3, [r3, #0]
 8006290:	b29b      	uxth	r3, r3
 8006292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629a:	82bb      	strh	r3, [r7, #20]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	441a      	add	r2, r3
 80062a6:	8abb      	ldrh	r3, [r7, #20]
 80062a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	881b      	ldrh	r3, [r3, #0]
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d2:	827b      	strh	r3, [r7, #18]
 80062d4:	8a7b      	ldrh	r3, [r7, #18]
 80062d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80062da:	827b      	strh	r3, [r7, #18]
 80062dc:	8a7b      	ldrh	r3, [r7, #18]
 80062de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80062e2:	827b      	strh	r3, [r7, #18]
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	441a      	add	r2, r3
 80062ee:	8a7b      	ldrh	r3, [r7, #18]
 80062f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006300:	b29b      	uxth	r3, r3
 8006302:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	371c      	adds	r7, #28
 800630a:	46bd      	mov	sp, r7
 800630c:	bc80      	pop	{r7}
 800630e:	4770      	bx	lr

08006310 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	460b      	mov	r3, r1
 800631a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800631c:	78fb      	ldrb	r3, [r7, #3]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d103      	bne.n	800632a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2280      	movs	r2, #128	; 0x80
 8006326:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	bc80      	pop	{r7}
 8006334:	4770      	bx	lr

08006336 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006336:	b480      	push	{r7}
 8006338:	b083      	sub	sp, #12
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	bc80      	pop	{r7}
 8006348:	4770      	bx	lr

0800634a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800634a:	b480      	push	{r7}
 800634c:	b083      	sub	sp, #12
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	bc80      	pop	{r7}
 800635c:	4770      	bx	lr

0800635e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800635e:	b480      	push	{r7}
 8006360:	b085      	sub	sp, #20
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800636c:	b29b      	uxth	r3, r3
 800636e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006370:	68fb      	ldr	r3, [r7, #12]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	bc80      	pop	{r7}
 800637a:	4770      	bx	lr

0800637c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	bc80      	pop	{r7}
 8006390:	4770      	bx	lr

08006392 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006392:	b480      	push	{r7}
 8006394:	b08b      	sub	sp, #44	; 0x2c
 8006396:	af00      	add	r7, sp, #0
 8006398:	60f8      	str	r0, [r7, #12]
 800639a:	60b9      	str	r1, [r7, #8]
 800639c:	4611      	mov	r1, r2
 800639e:	461a      	mov	r2, r3
 80063a0:	460b      	mov	r3, r1
 80063a2:	80fb      	strh	r3, [r7, #6]
 80063a4:	4613      	mov	r3, r2
 80063a6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80063a8:	88bb      	ldrh	r3, [r7, #4]
 80063aa:	3301      	adds	r3, #1
 80063ac:	085b      	lsrs	r3, r3, #1
 80063ae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80063b8:	88fb      	ldrh	r3, [r7, #6]
 80063ba:	005a      	lsls	r2, r3, #1
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063c4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	627b      	str	r3, [r7, #36]	; 0x24
 80063ca:	e01e      	b.n	800640a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	3301      	adds	r3, #1
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	021b      	lsls	r3, r3, #8
 80063da:	b21a      	sxth	r2, r3
 80063dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	b21b      	sxth	r3, r3
 80063e4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	8a7a      	ldrh	r2, [r7, #18]
 80063ea:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80063ec:	6a3b      	ldr	r3, [r7, #32]
 80063ee:	3302      	adds	r3, #2
 80063f0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80063f2:	6a3b      	ldr	r3, [r7, #32]
 80063f4:	3302      	adds	r3, #2
 80063f6:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	3301      	adds	r3, #1
 80063fc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	3301      	adds	r3, #1
 8006402:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	3b01      	subs	r3, #1
 8006408:	627b      	str	r3, [r7, #36]	; 0x24
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1dd      	bne.n	80063cc <USB_WritePMA+0x3a>
  }
}
 8006410:	bf00      	nop
 8006412:	bf00      	nop
 8006414:	372c      	adds	r7, #44	; 0x2c
 8006416:	46bd      	mov	sp, r7
 8006418:	bc80      	pop	{r7}
 800641a:	4770      	bx	lr

0800641c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800641c:	b480      	push	{r7}
 800641e:	b08b      	sub	sp, #44	; 0x2c
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	4611      	mov	r1, r2
 8006428:	461a      	mov	r2, r3
 800642a:	460b      	mov	r3, r1
 800642c:	80fb      	strh	r3, [r7, #6]
 800642e:	4613      	mov	r3, r2
 8006430:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006432:	88bb      	ldrh	r3, [r7, #4]
 8006434:	085b      	lsrs	r3, r3, #1
 8006436:	b29b      	uxth	r3, r3
 8006438:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006442:	88fb      	ldrh	r3, [r7, #6]
 8006444:	005a      	lsls	r2, r3, #1
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	4413      	add	r3, r2
 800644a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800644e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	627b      	str	r3, [r7, #36]	; 0x24
 8006454:	e01b      	b.n	800648e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	881b      	ldrh	r3, [r3, #0]
 800645a:	b29b      	uxth	r3, r3
 800645c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	3302      	adds	r3, #2
 8006462:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	b2da      	uxtb	r2, r3
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	3301      	adds	r3, #1
 8006470:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	0a1b      	lsrs	r3, r3, #8
 8006476:	b2da      	uxtb	r2, r3
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	3301      	adds	r3, #1
 8006480:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	3302      	adds	r3, #2
 8006486:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	3b01      	subs	r3, #1
 800648c:	627b      	str	r3, [r7, #36]	; 0x24
 800648e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1e0      	bne.n	8006456 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006494:	88bb      	ldrh	r3, [r7, #4]
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	b29b      	uxth	r3, r3
 800649c:	2b00      	cmp	r3, #0
 800649e:	d007      	beq.n	80064b0 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80064a0:	6a3b      	ldr	r3, [r7, #32]
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	701a      	strb	r2, [r3, #0]
  }
}
 80064b0:	bf00      	nop
 80064b2:	372c      	adds	r7, #44	; 0x2c
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bc80      	pop	{r7}
 80064b8:	4770      	bx	lr

080064ba <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b084      	sub	sp, #16
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	460b      	mov	r3, r1
 80064c4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80064c6:	2300      	movs	r3, #0
 80064c8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	7c1b      	ldrb	r3, [r3, #16]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d115      	bne.n	80064fe <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80064d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064d6:	2202      	movs	r2, #2
 80064d8:	2181      	movs	r1, #129	; 0x81
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f001 fe31 	bl	8008142 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80064e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064ea:	2202      	movs	r2, #2
 80064ec:	2101      	movs	r1, #1
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f001 fe27 	bl	8008142 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80064fc:	e012      	b.n	8006524 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80064fe:	2340      	movs	r3, #64	; 0x40
 8006500:	2202      	movs	r2, #2
 8006502:	2181      	movs	r1, #129	; 0x81
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f001 fe1c 	bl	8008142 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006510:	2340      	movs	r3, #64	; 0x40
 8006512:	2202      	movs	r2, #2
 8006514:	2101      	movs	r1, #1
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f001 fe13 	bl	8008142 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006524:	2308      	movs	r3, #8
 8006526:	2203      	movs	r2, #3
 8006528:	2182      	movs	r1, #130	; 0x82
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f001 fe09 	bl	8008142 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006536:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800653a:	f001 ff29 	bl	8008390 <USBD_static_malloc>
 800653e:	4602      	mov	r2, r0
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800654c:	2b00      	cmp	r3, #0
 800654e:	d102      	bne.n	8006556 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006550:	2301      	movs	r3, #1
 8006552:	73fb      	strb	r3, [r7, #15]
 8006554:	e026      	b.n	80065a4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800655c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2200      	movs	r2, #0
 800656c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	2200      	movs	r2, #0
 8006574:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	7c1b      	ldrb	r3, [r3, #16]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d109      	bne.n	8006594 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006586:	f44f 7300 	mov.w	r3, #512	; 0x200
 800658a:	2101      	movs	r1, #1
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f001 fec9 	bl	8008324 <USBD_LL_PrepareReceive>
 8006592:	e007      	b.n	80065a4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800659a:	2340      	movs	r3, #64	; 0x40
 800659c:	2101      	movs	r1, #1
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f001 fec0 	bl	8008324 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b084      	sub	sp, #16
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
 80065b6:	460b      	mov	r3, r1
 80065b8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80065be:	2181      	movs	r1, #129	; 0x81
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f001 fde4 	bl	800818e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80065cc:	2101      	movs	r1, #1
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f001 fddd 	bl	800818e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80065dc:	2182      	movs	r1, #130	; 0x82
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f001 fdd5 	bl	800818e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00e      	beq.n	8006612 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006604:	4618      	mov	r0, r3
 8006606:	f001 fecf 	bl	80083a8 <USBD_static_free>
    pdev->pClassData = NULL;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006612:	7bfb      	ldrb	r3, [r7, #15]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800662c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006632:	2300      	movs	r3, #0
 8006634:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006642:	2b00      	cmp	r3, #0
 8006644:	d039      	beq.n	80066ba <USBD_CDC_Setup+0x9e>
 8006646:	2b20      	cmp	r3, #32
 8006648:	d17f      	bne.n	800674a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	88db      	ldrh	r3, [r3, #6]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d029      	beq.n	80066a6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	b25b      	sxtb	r3, r3
 8006658:	2b00      	cmp	r3, #0
 800665a:	da11      	bge.n	8006680 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006668:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	88d2      	ldrh	r2, [r2, #6]
 800666e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006670:	6939      	ldr	r1, [r7, #16]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	88db      	ldrh	r3, [r3, #6]
 8006676:	461a      	mov	r2, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f001 f9da 	bl	8007a32 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800667e:	e06b      	b.n	8006758 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	785a      	ldrb	r2, [r3, #1]
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	88db      	ldrh	r3, [r3, #6]
 800668e:	b2da      	uxtb	r2, r3
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006696:	6939      	ldr	r1, [r7, #16]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	88db      	ldrh	r3, [r3, #6]
 800669c:	461a      	mov	r2, r3
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f001 f9f5 	bl	8007a8e <USBD_CtlPrepareRx>
      break;
 80066a4:	e058      	b.n	8006758 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	7850      	ldrb	r0, [r2, #1]
 80066b2:	2200      	movs	r2, #0
 80066b4:	6839      	ldr	r1, [r7, #0]
 80066b6:	4798      	blx	r3
      break;
 80066b8:	e04e      	b.n	8006758 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	785b      	ldrb	r3, [r3, #1]
 80066be:	2b0b      	cmp	r3, #11
 80066c0:	d02e      	beq.n	8006720 <USBD_CDC_Setup+0x104>
 80066c2:	2b0b      	cmp	r3, #11
 80066c4:	dc38      	bgt.n	8006738 <USBD_CDC_Setup+0x11c>
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d002      	beq.n	80066d0 <USBD_CDC_Setup+0xb4>
 80066ca:	2b0a      	cmp	r3, #10
 80066cc:	d014      	beq.n	80066f8 <USBD_CDC_Setup+0xdc>
 80066ce:	e033      	b.n	8006738 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066d6:	2b03      	cmp	r3, #3
 80066d8:	d107      	bne.n	80066ea <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80066da:	f107 030c 	add.w	r3, r7, #12
 80066de:	2202      	movs	r2, #2
 80066e0:	4619      	mov	r1, r3
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f001 f9a5 	bl	8007a32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066e8:	e02e      	b.n	8006748 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80066ea:	6839      	ldr	r1, [r7, #0]
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f001 f936 	bl	800795e <USBD_CtlError>
            ret = USBD_FAIL;
 80066f2:	2302      	movs	r3, #2
 80066f4:	75fb      	strb	r3, [r7, #23]
          break;
 80066f6:	e027      	b.n	8006748 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066fe:	2b03      	cmp	r3, #3
 8006700:	d107      	bne.n	8006712 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006702:	f107 030f 	add.w	r3, r7, #15
 8006706:	2201      	movs	r2, #1
 8006708:	4619      	mov	r1, r3
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f001 f991 	bl	8007a32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006710:	e01a      	b.n	8006748 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006712:	6839      	ldr	r1, [r7, #0]
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f001 f922 	bl	800795e <USBD_CtlError>
            ret = USBD_FAIL;
 800671a:	2302      	movs	r3, #2
 800671c:	75fb      	strb	r3, [r7, #23]
          break;
 800671e:	e013      	b.n	8006748 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006726:	2b03      	cmp	r3, #3
 8006728:	d00d      	beq.n	8006746 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800672a:	6839      	ldr	r1, [r7, #0]
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f001 f916 	bl	800795e <USBD_CtlError>
            ret = USBD_FAIL;
 8006732:	2302      	movs	r3, #2
 8006734:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006736:	e006      	b.n	8006746 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006738:	6839      	ldr	r1, [r7, #0]
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f001 f90f 	bl	800795e <USBD_CtlError>
          ret = USBD_FAIL;
 8006740:	2302      	movs	r3, #2
 8006742:	75fb      	strb	r3, [r7, #23]
          break;
 8006744:	e000      	b.n	8006748 <USBD_CDC_Setup+0x12c>
          break;
 8006746:	bf00      	nop
      }
      break;
 8006748:	e006      	b.n	8006758 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800674a:	6839      	ldr	r1, [r7, #0]
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f001 f906 	bl	800795e <USBD_CtlError>
      ret = USBD_FAIL;
 8006752:	2302      	movs	r3, #2
 8006754:	75fb      	strb	r3, [r7, #23]
      break;
 8006756:	bf00      	nop
  }

  return ret;
 8006758:	7dfb      	ldrb	r3, [r7, #23]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b084      	sub	sp, #16
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	460b      	mov	r3, r1
 800676c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006774:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800677c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006784:	2b00      	cmp	r3, #0
 8006786:	d03a      	beq.n	80067fe <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006788:	78fa      	ldrb	r2, [r7, #3]
 800678a:	6879      	ldr	r1, [r7, #4]
 800678c:	4613      	mov	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4413      	add	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	440b      	add	r3, r1
 8006796:	331c      	adds	r3, #28
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d029      	beq.n	80067f2 <USBD_CDC_DataIn+0x90>
 800679e:	78fa      	ldrb	r2, [r7, #3]
 80067a0:	6879      	ldr	r1, [r7, #4]
 80067a2:	4613      	mov	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	440b      	add	r3, r1
 80067ac:	331c      	adds	r3, #28
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	78f9      	ldrb	r1, [r7, #3]
 80067b2:	68b8      	ldr	r0, [r7, #8]
 80067b4:	460b      	mov	r3, r1
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	440b      	add	r3, r1
 80067ba:	00db      	lsls	r3, r3, #3
 80067bc:	4403      	add	r3, r0
 80067be:	3338      	adds	r3, #56	; 0x38
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	fbb2 f1f3 	udiv	r1, r2, r3
 80067c6:	fb01 f303 	mul.w	r3, r1, r3
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d110      	bne.n	80067f2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80067d0:	78fa      	ldrb	r2, [r7, #3]
 80067d2:	6879      	ldr	r1, [r7, #4]
 80067d4:	4613      	mov	r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4413      	add	r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	440b      	add	r3, r1
 80067de:	331c      	adds	r3, #28
 80067e0:	2200      	movs	r2, #0
 80067e2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80067e4:	78f9      	ldrb	r1, [r7, #3]
 80067e6:	2300      	movs	r3, #0
 80067e8:	2200      	movs	r2, #0
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f001 fd77 	bl	80082de <USBD_LL_Transmit>
 80067f0:	e003      	b.n	80067fa <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	e000      	b.n	8006800 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80067fe:	2302      	movs	r3, #2
  }
}
 8006800:	4618      	mov	r0, r3
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	460b      	mov	r3, r1
 8006812:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800681a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800681c:	78fb      	ldrb	r3, [r7, #3]
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f001 fda2 	bl	800836a <USBD_LL_GetRxDataSize>
 8006826:	4602      	mov	r2, r0
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00d      	beq.n	8006854 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800684c:	4611      	mov	r1, r2
 800684e:	4798      	blx	r3

    return USBD_OK;
 8006850:	2300      	movs	r3, #0
 8006852:	e000      	b.n	8006856 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006854:	2302      	movs	r3, #2
  }
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b084      	sub	sp, #16
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800686c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006874:	2b00      	cmp	r3, #0
 8006876:	d015      	beq.n	80068a4 <USBD_CDC_EP0_RxReady+0x46>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800687e:	2bff      	cmp	r3, #255	; 0xff
 8006880:	d010      	beq.n	80068a4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006890:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006898:	b292      	uxth	r2, r2
 800689a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	22ff      	movs	r2, #255	; 0xff
 80068a0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
	...

080068b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2243      	movs	r2, #67	; 0x43
 80068bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80068be:	4b03      	ldr	r3, [pc, #12]	; (80068cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bc80      	pop	{r7}
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	20000094 	.word	0x20000094

080068d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2243      	movs	r2, #67	; 0x43
 80068dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80068de:	4b03      	ldr	r3, [pc, #12]	; (80068ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bc80      	pop	{r7}
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	20000050 	.word	0x20000050

080068f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2243      	movs	r2, #67	; 0x43
 80068fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80068fe:	4b03      	ldr	r3, [pc, #12]	; (800690c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006900:	4618      	mov	r0, r3
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	bc80      	pop	{r7}
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	200000d8 	.word	0x200000d8

08006910 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	220a      	movs	r2, #10
 800691c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800691e:	4b03      	ldr	r3, [pc, #12]	; (800692c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006920:	4618      	mov	r0, r3
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	bc80      	pop	{r7}
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	2000000c 	.word	0x2000000c

08006930 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800693a:	2302      	movs	r3, #2
 800693c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d005      	beq.n	8006950 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800694c:	2300      	movs	r3, #0
 800694e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006950:	7bfb      	ldrb	r3, [r7, #15]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	bc80      	pop	{r7}
 800695a:	4770      	bx	lr

0800695c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800695c:	b480      	push	{r7}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	4613      	mov	r3, r2
 8006968:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006970:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800697a:	88fa      	ldrh	r2, [r7, #6]
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	371c      	adds	r7, #28
 8006988:	46bd      	mov	sp, r7
 800698a:	bc80      	pop	{r7}
 800698c:	4770      	bx	lr

0800698e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800698e:	b480      	push	{r7}
 8006990:	b085      	sub	sp, #20
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
 8006996:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800699e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bc80      	pop	{r7}
 80069b2:	4770      	bx	lr

080069b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069c2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d017      	beq.n	80069fe <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	7c1b      	ldrb	r3, [r3, #16]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d109      	bne.n	80069ea <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069e0:	2101      	movs	r1, #1
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f001 fc9e 	bl	8008324 <USBD_LL_PrepareReceive>
 80069e8:	e007      	b.n	80069fa <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069f0:	2340      	movs	r3, #64	; 0x40
 80069f2:	2101      	movs	r1, #1
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f001 fc95 	bl	8008324 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	e000      	b.n	8006a00 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80069fe:	2302      	movs	r3, #2
  }
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	4613      	mov	r3, r2
 8006a14:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d101      	bne.n	8006a20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	e01a      	b.n	8006a56 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d003      	beq.n	8006a40 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	79fa      	ldrb	r2, [r7, #7]
 8006a4c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f001 fb02 	bl	8008058 <USBD_LL_Init>

  return USBD_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b085      	sub	sp, #20
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d006      	beq.n	8006a80 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	683a      	ldr	r2, [r7, #0]
 8006a76:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	73fb      	strb	r3, [r7, #15]
 8006a7e:	e001      	b.n	8006a84 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006a80:	2302      	movs	r3, #2
 8006a82:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bc80      	pop	{r7}
 8006a8e:	4770      	bx	lr

08006a90 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f001 fb37 	bl	800810c <USBD_LL_Start>

  return USBD_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bc80      	pop	{r7}
 8006aba:	4770      	bx	lr

08006abc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006ac8:	2302      	movs	r3, #2
 8006aca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00c      	beq.n	8006af0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	78fa      	ldrb	r2, [r7, #3]
 8006ae0:	4611      	mov	r1, r2
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	4798      	blx	r3
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d101      	bne.n	8006af0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006aec:	2300      	movs	r3, #0
 8006aee:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b082      	sub	sp, #8
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	460b      	mov	r3, r1
 8006b04:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	78fa      	ldrb	r2, [r7, #3]
 8006b10:	4611      	mov	r1, r2
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	4798      	blx	r3

  return USBD_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b30:	6839      	ldr	r1, [r7, #0]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 fed7 	bl	80078e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006b46:	461a      	mov	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006b54:	f003 031f 	and.w	r3, r3, #31
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d016      	beq.n	8006b8a <USBD_LL_SetupStage+0x6a>
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d81c      	bhi.n	8006b9a <USBD_LL_SetupStage+0x7a>
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d002      	beq.n	8006b6a <USBD_LL_SetupStage+0x4a>
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d008      	beq.n	8006b7a <USBD_LL_SetupStage+0x5a>
 8006b68:	e017      	b.n	8006b9a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b70:	4619      	mov	r1, r3
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f9ca 	bl	8006f0c <USBD_StdDevReq>
      break;
 8006b78:	e01a      	b.n	8006bb0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b80:	4619      	mov	r1, r3
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fa2c 	bl	8006fe0 <USBD_StdItfReq>
      break;
 8006b88:	e012      	b.n	8006bb0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b90:	4619      	mov	r1, r3
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fa6c 	bl	8007070 <USBD_StdEPReq>
      break;
 8006b98:	e00a      	b.n	8006bb0 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006ba0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f001 fb0f 	bl	80081cc <USBD_LL_StallEP>
      break;
 8006bae:	bf00      	nop
  }

  return USBD_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3708      	adds	r7, #8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b086      	sub	sp, #24
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	60f8      	str	r0, [r7, #12]
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	607a      	str	r2, [r7, #4]
 8006bc6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006bc8:	7afb      	ldrb	r3, [r7, #11]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d14b      	bne.n	8006c66 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006bd4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bdc:	2b03      	cmp	r3, #3
 8006bde:	d134      	bne.n	8006c4a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	68da      	ldr	r2, [r3, #12]
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d919      	bls.n	8006c20 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	68da      	ldr	r2, [r3, #12]
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	1ad2      	subs	r2, r2, r3
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	68da      	ldr	r2, [r3, #12]
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d203      	bcs.n	8006c0e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	e002      	b.n	8006c14 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	461a      	mov	r2, r3
 8006c16:	6879      	ldr	r1, [r7, #4]
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 ff56 	bl	8007aca <USBD_CtlContinueRx>
 8006c1e:	e038      	b.n	8006c92 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00a      	beq.n	8006c42 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006c32:	2b03      	cmp	r3, #3
 8006c34:	d105      	bne.n	8006c42 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 ff53 	bl	8007aee <USBD_CtlSendStatus>
 8006c48:	e023      	b.n	8006c92 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c50:	2b05      	cmp	r3, #5
 8006c52:	d11e      	bne.n	8006c92 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f001 fab4 	bl	80081cc <USBD_LL_StallEP>
 8006c64:	e015      	b.n	8006c92 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00d      	beq.n	8006c8e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006c78:	2b03      	cmp	r3, #3
 8006c7a:	d108      	bne.n	8006c8e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	7afa      	ldrb	r2, [r7, #11]
 8006c86:	4611      	mov	r1, r2
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	4798      	blx	r3
 8006c8c:	e001      	b.n	8006c92 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c8e:	2302      	movs	r3, #2
 8006c90:	e000      	b.n	8006c94 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3718      	adds	r7, #24
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	607a      	str	r2, [r7, #4]
 8006ca8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006caa:	7afb      	ldrb	r3, [r7, #11]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d17f      	bne.n	8006db0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	3314      	adds	r3, #20
 8006cb4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d15c      	bne.n	8006d7a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	68da      	ldr	r2, [r3, #12]
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d915      	bls.n	8006cf8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	68da      	ldr	r2, [r3, #12]
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	1ad2      	subs	r2, r2, r3
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	6879      	ldr	r1, [r7, #4]
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 fec0 	bl	8007a6a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cea:	2300      	movs	r3, #0
 8006cec:	2200      	movs	r2, #0
 8006cee:	2100      	movs	r1, #0
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f001 fb17 	bl	8008324 <USBD_LL_PrepareReceive>
 8006cf6:	e04e      	b.n	8006d96 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	6912      	ldr	r2, [r2, #16]
 8006d00:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d04:	fb01 f202 	mul.w	r2, r1, r2
 8006d08:	1a9b      	subs	r3, r3, r2
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d11c      	bne.n	8006d48 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	689a      	ldr	r2, [r3, #8]
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d316      	bcc.n	8006d48 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	689a      	ldr	r2, [r3, #8]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d20f      	bcs.n	8006d48 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006d28:	2200      	movs	r2, #0
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 fe9c 	bl	8007a6a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	2100      	movs	r1, #0
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f001 faef 	bl	8008324 <USBD_LL_PrepareReceive>
 8006d46:	e026      	b.n	8006d96 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00a      	beq.n	8006d6a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006d5a:	2b03      	cmp	r3, #3
 8006d5c:	d105      	bne.n	8006d6a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006d6a:	2180      	movs	r1, #128	; 0x80
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f001 fa2d 	bl	80081cc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f000 fece 	bl	8007b14 <USBD_CtlReceiveStatus>
 8006d78:	e00d      	b.n	8006d96 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d80:	2b04      	cmp	r3, #4
 8006d82:	d004      	beq.n	8006d8e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d103      	bne.n	8006d96 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006d8e:	2180      	movs	r1, #128	; 0x80
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f001 fa1b 	bl	80081cc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d11d      	bne.n	8006ddc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f7ff fe81 	bl	8006aa8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006dae:	e015      	b.n	8006ddc <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006db6:	695b      	ldr	r3, [r3, #20]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00d      	beq.n	8006dd8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006dc2:	2b03      	cmp	r3, #3
 8006dc4:	d108      	bne.n	8006dd8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	7afa      	ldrb	r2, [r7, #11]
 8006dd0:	4611      	mov	r1, r2
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	4798      	blx	r3
 8006dd6:	e001      	b.n	8006ddc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006dd8:	2302      	movs	r3, #2
 8006dda:	e000      	b.n	8006dde <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3718      	adds	r7, #24
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b082      	sub	sp, #8
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dee:	2340      	movs	r3, #64	; 0x40
 8006df0:	2200      	movs	r2, #0
 8006df2:	2100      	movs	r1, #0
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 f9a4 	bl	8008142 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2240      	movs	r2, #64	; 0x40
 8006e06:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e0a:	2340      	movs	r3, #64	; 0x40
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	2180      	movs	r1, #128	; 0x80
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f001 f996 	bl	8008142 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2240      	movs	r2, #64	; 0x40
 8006e20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d009      	beq.n	8006e5e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	6852      	ldr	r2, [r2, #4]
 8006e56:	b2d2      	uxtb	r2, r2
 8006e58:	4611      	mov	r1, r2
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	4798      	blx	r3
  }

  return USBD_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	460b      	mov	r3, r1
 8006e72:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	78fa      	ldrb	r2, [r7, #3]
 8006e78:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bc80      	pop	{r7}
 8006e84:	4770      	bx	lr

08006e86 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b083      	sub	sp, #12
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2204      	movs	r2, #4
 8006e9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bc80      	pop	{r7}
 8006eac:	4770      	bx	lr

08006eae <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b083      	sub	sp, #12
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ebc:	2b04      	cmp	r3, #4
 8006ebe:	d105      	bne.n	8006ecc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bc80      	pop	{r7}
 8006ed6:	4770      	bx	lr

08006ed8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d10b      	bne.n	8006f02 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef0:	69db      	ldr	r3, [r3, #28]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d005      	beq.n	8006f02 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f22:	2b40      	cmp	r3, #64	; 0x40
 8006f24:	d005      	beq.n	8006f32 <USBD_StdDevReq+0x26>
 8006f26:	2b40      	cmp	r3, #64	; 0x40
 8006f28:	d84f      	bhi.n	8006fca <USBD_StdDevReq+0xbe>
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d009      	beq.n	8006f42 <USBD_StdDevReq+0x36>
 8006f2e:	2b20      	cmp	r3, #32
 8006f30:	d14b      	bne.n	8006fca <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	6839      	ldr	r1, [r7, #0]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	4798      	blx	r3
      break;
 8006f40:	e048      	b.n	8006fd4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	785b      	ldrb	r3, [r3, #1]
 8006f46:	2b09      	cmp	r3, #9
 8006f48:	d839      	bhi.n	8006fbe <USBD_StdDevReq+0xb2>
 8006f4a:	a201      	add	r2, pc, #4	; (adr r2, 8006f50 <USBD_StdDevReq+0x44>)
 8006f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f50:	08006fa1 	.word	0x08006fa1
 8006f54:	08006fb5 	.word	0x08006fb5
 8006f58:	08006fbf 	.word	0x08006fbf
 8006f5c:	08006fab 	.word	0x08006fab
 8006f60:	08006fbf 	.word	0x08006fbf
 8006f64:	08006f83 	.word	0x08006f83
 8006f68:	08006f79 	.word	0x08006f79
 8006f6c:	08006fbf 	.word	0x08006fbf
 8006f70:	08006f97 	.word	0x08006f97
 8006f74:	08006f8d 	.word	0x08006f8d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f9dc 	bl	8007338 <USBD_GetDescriptor>
          break;
 8006f80:	e022      	b.n	8006fc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006f82:	6839      	ldr	r1, [r7, #0]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fb3f 	bl	8007608 <USBD_SetAddress>
          break;
 8006f8a:	e01d      	b.n	8006fc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006f8c:	6839      	ldr	r1, [r7, #0]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fb7e 	bl	8007690 <USBD_SetConfig>
          break;
 8006f94:	e018      	b.n	8006fc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006f96:	6839      	ldr	r1, [r7, #0]
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 fc07 	bl	80077ac <USBD_GetConfig>
          break;
 8006f9e:	e013      	b.n	8006fc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006fa0:	6839      	ldr	r1, [r7, #0]
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fc37 	bl	8007816 <USBD_GetStatus>
          break;
 8006fa8:	e00e      	b.n	8006fc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006faa:	6839      	ldr	r1, [r7, #0]
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 fc65 	bl	800787c <USBD_SetFeature>
          break;
 8006fb2:	e009      	b.n	8006fc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006fb4:	6839      	ldr	r1, [r7, #0]
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fc74 	bl	80078a4 <USBD_ClrFeature>
          break;
 8006fbc:	e004      	b.n	8006fc8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fccc 	bl	800795e <USBD_CtlError>
          break;
 8006fc6:	bf00      	nop
      }
      break;
 8006fc8:	e004      	b.n	8006fd4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006fca:	6839      	ldr	r1, [r7, #0]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fcc6 	bl	800795e <USBD_CtlError>
      break;
 8006fd2:	bf00      	nop
  }

  return ret;
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop

08006fe0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ff6:	2b40      	cmp	r3, #64	; 0x40
 8006ff8:	d005      	beq.n	8007006 <USBD_StdItfReq+0x26>
 8006ffa:	2b40      	cmp	r3, #64	; 0x40
 8006ffc:	d82e      	bhi.n	800705c <USBD_StdItfReq+0x7c>
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <USBD_StdItfReq+0x26>
 8007002:	2b20      	cmp	r3, #32
 8007004:	d12a      	bne.n	800705c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800700c:	3b01      	subs	r3, #1
 800700e:	2b02      	cmp	r3, #2
 8007010:	d81d      	bhi.n	800704e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	889b      	ldrh	r3, [r3, #4]
 8007016:	b2db      	uxtb	r3, r3
 8007018:	2b01      	cmp	r3, #1
 800701a:	d813      	bhi.n	8007044 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	6839      	ldr	r1, [r7, #0]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	4798      	blx	r3
 800702a:	4603      	mov	r3, r0
 800702c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	88db      	ldrh	r3, [r3, #6]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d110      	bne.n	8007058 <USBD_StdItfReq+0x78>
 8007036:	7bfb      	ldrb	r3, [r7, #15]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10d      	bne.n	8007058 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 fd56 	bl	8007aee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007042:	e009      	b.n	8007058 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fc89 	bl	800795e <USBD_CtlError>
          break;
 800704c:	e004      	b.n	8007058 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800704e:	6839      	ldr	r1, [r7, #0]
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 fc84 	bl	800795e <USBD_CtlError>
          break;
 8007056:	e000      	b.n	800705a <USBD_StdItfReq+0x7a>
          break;
 8007058:	bf00      	nop
      }
      break;
 800705a:	e004      	b.n	8007066 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800705c:	6839      	ldr	r1, [r7, #0]
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fc7d 	bl	800795e <USBD_CtlError>
      break;
 8007064:	bf00      	nop
  }

  return USBD_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	889b      	ldrh	r3, [r3, #4]
 8007082:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800708c:	2b40      	cmp	r3, #64	; 0x40
 800708e:	d007      	beq.n	80070a0 <USBD_StdEPReq+0x30>
 8007090:	2b40      	cmp	r3, #64	; 0x40
 8007092:	f200 8146 	bhi.w	8007322 <USBD_StdEPReq+0x2b2>
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00a      	beq.n	80070b0 <USBD_StdEPReq+0x40>
 800709a:	2b20      	cmp	r3, #32
 800709c:	f040 8141 	bne.w	8007322 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	6839      	ldr	r1, [r7, #0]
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	4798      	blx	r3
      break;
 80070ae:	e13d      	b.n	800732c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070b8:	2b20      	cmp	r3, #32
 80070ba:	d10a      	bne.n	80070d2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	6839      	ldr	r1, [r7, #0]
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	4798      	blx	r3
 80070ca:	4603      	mov	r3, r0
 80070cc:	73fb      	strb	r3, [r7, #15]

        return ret;
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
 80070d0:	e12d      	b.n	800732e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	785b      	ldrb	r3, [r3, #1]
 80070d6:	2b03      	cmp	r3, #3
 80070d8:	d007      	beq.n	80070ea <USBD_StdEPReq+0x7a>
 80070da:	2b03      	cmp	r3, #3
 80070dc:	f300 811b 	bgt.w	8007316 <USBD_StdEPReq+0x2a6>
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d072      	beq.n	80071ca <USBD_StdEPReq+0x15a>
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d03a      	beq.n	800715e <USBD_StdEPReq+0xee>
 80070e8:	e115      	b.n	8007316 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d002      	beq.n	80070fa <USBD_StdEPReq+0x8a>
 80070f4:	2b03      	cmp	r3, #3
 80070f6:	d015      	beq.n	8007124 <USBD_StdEPReq+0xb4>
 80070f8:	e02b      	b.n	8007152 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070fa:	7bbb      	ldrb	r3, [r7, #14]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00c      	beq.n	800711a <USBD_StdEPReq+0xaa>
 8007100:	7bbb      	ldrb	r3, [r7, #14]
 8007102:	2b80      	cmp	r3, #128	; 0x80
 8007104:	d009      	beq.n	800711a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007106:	7bbb      	ldrb	r3, [r7, #14]
 8007108:	4619      	mov	r1, r3
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f001 f85e 	bl	80081cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007110:	2180      	movs	r1, #128	; 0x80
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f001 f85a 	bl	80081cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007118:	e020      	b.n	800715c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800711a:	6839      	ldr	r1, [r7, #0]
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fc1e 	bl	800795e <USBD_CtlError>
              break;
 8007122:	e01b      	b.n	800715c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	885b      	ldrh	r3, [r3, #2]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d10e      	bne.n	800714a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800712c:	7bbb      	ldrb	r3, [r7, #14]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00b      	beq.n	800714a <USBD_StdEPReq+0xda>
 8007132:	7bbb      	ldrb	r3, [r7, #14]
 8007134:	2b80      	cmp	r3, #128	; 0x80
 8007136:	d008      	beq.n	800714a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	88db      	ldrh	r3, [r3, #6]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d104      	bne.n	800714a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007140:	7bbb      	ldrb	r3, [r7, #14]
 8007142:	4619      	mov	r1, r3
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f001 f841 	bl	80081cc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fccf 	bl	8007aee <USBD_CtlSendStatus>

              break;
 8007150:	e004      	b.n	800715c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fc02 	bl	800795e <USBD_CtlError>
              break;
 800715a:	bf00      	nop
          }
          break;
 800715c:	e0e0      	b.n	8007320 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007164:	2b02      	cmp	r3, #2
 8007166:	d002      	beq.n	800716e <USBD_StdEPReq+0xfe>
 8007168:	2b03      	cmp	r3, #3
 800716a:	d015      	beq.n	8007198 <USBD_StdEPReq+0x128>
 800716c:	e026      	b.n	80071bc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800716e:	7bbb      	ldrb	r3, [r7, #14]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00c      	beq.n	800718e <USBD_StdEPReq+0x11e>
 8007174:	7bbb      	ldrb	r3, [r7, #14]
 8007176:	2b80      	cmp	r3, #128	; 0x80
 8007178:	d009      	beq.n	800718e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800717a:	7bbb      	ldrb	r3, [r7, #14]
 800717c:	4619      	mov	r1, r3
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f001 f824 	bl	80081cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007184:	2180      	movs	r1, #128	; 0x80
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f001 f820 	bl	80081cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800718c:	e01c      	b.n	80071c8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800718e:	6839      	ldr	r1, [r7, #0]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fbe4 	bl	800795e <USBD_CtlError>
              break;
 8007196:	e017      	b.n	80071c8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	885b      	ldrh	r3, [r3, #2]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d112      	bne.n	80071c6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80071a0:	7bbb      	ldrb	r3, [r7, #14]
 80071a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d004      	beq.n	80071b4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80071aa:	7bbb      	ldrb	r3, [r7, #14]
 80071ac:	4619      	mov	r1, r3
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f001 f82b 	bl	800820a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fc9a 	bl	8007aee <USBD_CtlSendStatus>
              }
              break;
 80071ba:	e004      	b.n	80071c6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fbcd 	bl	800795e <USBD_CtlError>
              break;
 80071c4:	e000      	b.n	80071c8 <USBD_StdEPReq+0x158>
              break;
 80071c6:	bf00      	nop
          }
          break;
 80071c8:	e0aa      	b.n	8007320 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d002      	beq.n	80071da <USBD_StdEPReq+0x16a>
 80071d4:	2b03      	cmp	r3, #3
 80071d6:	d032      	beq.n	800723e <USBD_StdEPReq+0x1ce>
 80071d8:	e097      	b.n	800730a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071da:	7bbb      	ldrb	r3, [r7, #14]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d007      	beq.n	80071f0 <USBD_StdEPReq+0x180>
 80071e0:	7bbb      	ldrb	r3, [r7, #14]
 80071e2:	2b80      	cmp	r3, #128	; 0x80
 80071e4:	d004      	beq.n	80071f0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80071e6:	6839      	ldr	r1, [r7, #0]
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fbb8 	bl	800795e <USBD_CtlError>
                break;
 80071ee:	e091      	b.n	8007314 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	da0b      	bge.n	8007210 <USBD_StdEPReq+0x1a0>
 80071f8:	7bbb      	ldrb	r3, [r7, #14]
 80071fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071fe:	4613      	mov	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	3310      	adds	r3, #16
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	4413      	add	r3, r2
 800720c:	3304      	adds	r3, #4
 800720e:	e00b      	b.n	8007228 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007210:	7bbb      	ldrb	r3, [r7, #14]
 8007212:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007216:	4613      	mov	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	4413      	add	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	4413      	add	r3, r2
 8007226:	3304      	adds	r3, #4
 8007228:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	2200      	movs	r2, #0
 800722e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	2202      	movs	r2, #2
 8007234:	4619      	mov	r1, r3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 fbfb 	bl	8007a32 <USBD_CtlSendData>
              break;
 800723c:	e06a      	b.n	8007314 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800723e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007242:	2b00      	cmp	r3, #0
 8007244:	da11      	bge.n	800726a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007246:	7bbb      	ldrb	r3, [r7, #14]
 8007248:	f003 020f 	and.w	r2, r3, #15
 800724c:	6879      	ldr	r1, [r7, #4]
 800724e:	4613      	mov	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	4413      	add	r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	440b      	add	r3, r1
 8007258:	3318      	adds	r3, #24
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d117      	bne.n	8007290 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007260:	6839      	ldr	r1, [r7, #0]
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fb7b 	bl	800795e <USBD_CtlError>
                  break;
 8007268:	e054      	b.n	8007314 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800726a:	7bbb      	ldrb	r3, [r7, #14]
 800726c:	f003 020f 	and.w	r2, r3, #15
 8007270:	6879      	ldr	r1, [r7, #4]
 8007272:	4613      	mov	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	440b      	add	r3, r1
 800727c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d104      	bne.n	8007290 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007286:	6839      	ldr	r1, [r7, #0]
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fb68 	bl	800795e <USBD_CtlError>
                  break;
 800728e:	e041      	b.n	8007314 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007290:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007294:	2b00      	cmp	r3, #0
 8007296:	da0b      	bge.n	80072b0 <USBD_StdEPReq+0x240>
 8007298:	7bbb      	ldrb	r3, [r7, #14]
 800729a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800729e:	4613      	mov	r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	4413      	add	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	3310      	adds	r3, #16
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	4413      	add	r3, r2
 80072ac:	3304      	adds	r3, #4
 80072ae:	e00b      	b.n	80072c8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80072b0:	7bbb      	ldrb	r3, [r7, #14]
 80072b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072b6:	4613      	mov	r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	4413      	add	r3, r2
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	4413      	add	r3, r2
 80072c6:	3304      	adds	r3, #4
 80072c8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80072ca:	7bbb      	ldrb	r3, [r7, #14]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d002      	beq.n	80072d6 <USBD_StdEPReq+0x266>
 80072d0:	7bbb      	ldrb	r3, [r7, #14]
 80072d2:	2b80      	cmp	r3, #128	; 0x80
 80072d4:	d103      	bne.n	80072de <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2200      	movs	r2, #0
 80072da:	601a      	str	r2, [r3, #0]
 80072dc:	e00e      	b.n	80072fc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80072de:	7bbb      	ldrb	r3, [r7, #14]
 80072e0:	4619      	mov	r1, r3
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 ffb0 	bl	8008248 <USBD_LL_IsStallEP>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d003      	beq.n	80072f6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	2201      	movs	r2, #1
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	e002      	b.n	80072fc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	2200      	movs	r2, #0
 80072fa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	2202      	movs	r2, #2
 8007300:	4619      	mov	r1, r3
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 fb95 	bl	8007a32 <USBD_CtlSendData>
              break;
 8007308:	e004      	b.n	8007314 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800730a:	6839      	ldr	r1, [r7, #0]
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 fb26 	bl	800795e <USBD_CtlError>
              break;
 8007312:	bf00      	nop
          }
          break;
 8007314:	e004      	b.n	8007320 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007316:	6839      	ldr	r1, [r7, #0]
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fb20 	bl	800795e <USBD_CtlError>
          break;
 800731e:	bf00      	nop
      }
      break;
 8007320:	e004      	b.n	800732c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fb1a 	bl	800795e <USBD_CtlError>
      break;
 800732a:	bf00      	nop
  }

  return ret;
 800732c:	7bfb      	ldrb	r3, [r7, #15]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
	...

08007338 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007342:	2300      	movs	r3, #0
 8007344:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007346:	2300      	movs	r3, #0
 8007348:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800734a:	2300      	movs	r3, #0
 800734c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	885b      	ldrh	r3, [r3, #2]
 8007352:	0a1b      	lsrs	r3, r3, #8
 8007354:	b29b      	uxth	r3, r3
 8007356:	3b01      	subs	r3, #1
 8007358:	2b06      	cmp	r3, #6
 800735a:	f200 8128 	bhi.w	80075ae <USBD_GetDescriptor+0x276>
 800735e:	a201      	add	r2, pc, #4	; (adr r2, 8007364 <USBD_GetDescriptor+0x2c>)
 8007360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007364:	08007381 	.word	0x08007381
 8007368:	08007399 	.word	0x08007399
 800736c:	080073d9 	.word	0x080073d9
 8007370:	080075af 	.word	0x080075af
 8007374:	080075af 	.word	0x080075af
 8007378:	0800754f 	.word	0x0800754f
 800737c:	0800757b 	.word	0x0800757b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	7c12      	ldrb	r2, [r2, #16]
 800738c:	f107 0108 	add.w	r1, r7, #8
 8007390:	4610      	mov	r0, r2
 8007392:	4798      	blx	r3
 8007394:	60f8      	str	r0, [r7, #12]
      break;
 8007396:	e112      	b.n	80075be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	7c1b      	ldrb	r3, [r3, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10d      	bne.n	80073bc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a8:	f107 0208 	add.w	r2, r7, #8
 80073ac:	4610      	mov	r0, r2
 80073ae:	4798      	blx	r3
 80073b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	3301      	adds	r3, #1
 80073b6:	2202      	movs	r2, #2
 80073b8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80073ba:	e100      	b.n	80075be <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c4:	f107 0208 	add.w	r2, r7, #8
 80073c8:	4610      	mov	r0, r2
 80073ca:	4798      	blx	r3
 80073cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	3301      	adds	r3, #1
 80073d2:	2202      	movs	r2, #2
 80073d4:	701a      	strb	r2, [r3, #0]
      break;
 80073d6:	e0f2      	b.n	80075be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	885b      	ldrh	r3, [r3, #2]
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b05      	cmp	r3, #5
 80073e0:	f200 80ac 	bhi.w	800753c <USBD_GetDescriptor+0x204>
 80073e4:	a201      	add	r2, pc, #4	; (adr r2, 80073ec <USBD_GetDescriptor+0xb4>)
 80073e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ea:	bf00      	nop
 80073ec:	08007405 	.word	0x08007405
 80073f0:	08007439 	.word	0x08007439
 80073f4:	0800746d 	.word	0x0800746d
 80073f8:	080074a1 	.word	0x080074a1
 80073fc:	080074d5 	.word	0x080074d5
 8007400:	08007509 	.word	0x08007509
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00b      	beq.n	8007428 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	7c12      	ldrb	r2, [r2, #16]
 800741c:	f107 0108 	add.w	r1, r7, #8
 8007420:	4610      	mov	r0, r2
 8007422:	4798      	blx	r3
 8007424:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007426:	e091      	b.n	800754c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007428:	6839      	ldr	r1, [r7, #0]
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 fa97 	bl	800795e <USBD_CtlError>
            err++;
 8007430:	7afb      	ldrb	r3, [r7, #11]
 8007432:	3301      	adds	r3, #1
 8007434:	72fb      	strb	r3, [r7, #11]
          break;
 8007436:	e089      	b.n	800754c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00b      	beq.n	800745c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	7c12      	ldrb	r2, [r2, #16]
 8007450:	f107 0108 	add.w	r1, r7, #8
 8007454:	4610      	mov	r0, r2
 8007456:	4798      	blx	r3
 8007458:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800745a:	e077      	b.n	800754c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800745c:	6839      	ldr	r1, [r7, #0]
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fa7d 	bl	800795e <USBD_CtlError>
            err++;
 8007464:	7afb      	ldrb	r3, [r7, #11]
 8007466:	3301      	adds	r3, #1
 8007468:	72fb      	strb	r3, [r7, #11]
          break;
 800746a:	e06f      	b.n	800754c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00b      	beq.n	8007490 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	7c12      	ldrb	r2, [r2, #16]
 8007484:	f107 0108 	add.w	r1, r7, #8
 8007488:	4610      	mov	r0, r2
 800748a:	4798      	blx	r3
 800748c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800748e:	e05d      	b.n	800754c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fa63 	bl	800795e <USBD_CtlError>
            err++;
 8007498:	7afb      	ldrb	r3, [r7, #11]
 800749a:	3301      	adds	r3, #1
 800749c:	72fb      	strb	r3, [r7, #11]
          break;
 800749e:	e055      	b.n	800754c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00b      	beq.n	80074c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	7c12      	ldrb	r2, [r2, #16]
 80074b8:	f107 0108 	add.w	r1, r7, #8
 80074bc:	4610      	mov	r0, r2
 80074be:	4798      	blx	r3
 80074c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074c2:	e043      	b.n	800754c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fa49 	bl	800795e <USBD_CtlError>
            err++;
 80074cc:	7afb      	ldrb	r3, [r7, #11]
 80074ce:	3301      	adds	r3, #1
 80074d0:	72fb      	strb	r3, [r7, #11]
          break;
 80074d2:	e03b      	b.n	800754c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074da:	695b      	ldr	r3, [r3, #20]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00b      	beq.n	80074f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074e6:	695b      	ldr	r3, [r3, #20]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	7c12      	ldrb	r2, [r2, #16]
 80074ec:	f107 0108 	add.w	r1, r7, #8
 80074f0:	4610      	mov	r0, r2
 80074f2:	4798      	blx	r3
 80074f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074f6:	e029      	b.n	800754c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fa2f 	bl	800795e <USBD_CtlError>
            err++;
 8007500:	7afb      	ldrb	r3, [r7, #11]
 8007502:	3301      	adds	r3, #1
 8007504:	72fb      	strb	r3, [r7, #11]
          break;
 8007506:	e021      	b.n	800754c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00b      	beq.n	800752c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	7c12      	ldrb	r2, [r2, #16]
 8007520:	f107 0108 	add.w	r1, r7, #8
 8007524:	4610      	mov	r0, r2
 8007526:	4798      	blx	r3
 8007528:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800752a:	e00f      	b.n	800754c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800752c:	6839      	ldr	r1, [r7, #0]
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fa15 	bl	800795e <USBD_CtlError>
            err++;
 8007534:	7afb      	ldrb	r3, [r7, #11]
 8007536:	3301      	adds	r3, #1
 8007538:	72fb      	strb	r3, [r7, #11]
          break;
 800753a:	e007      	b.n	800754c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fa0d 	bl	800795e <USBD_CtlError>
          err++;
 8007544:	7afb      	ldrb	r3, [r7, #11]
 8007546:	3301      	adds	r3, #1
 8007548:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800754a:	e038      	b.n	80075be <USBD_GetDescriptor+0x286>
 800754c:	e037      	b.n	80075be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	7c1b      	ldrb	r3, [r3, #16]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d109      	bne.n	800756a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800755c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800755e:	f107 0208 	add.w	r2, r7, #8
 8007562:	4610      	mov	r0, r2
 8007564:	4798      	blx	r3
 8007566:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007568:	e029      	b.n	80075be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800756a:	6839      	ldr	r1, [r7, #0]
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 f9f6 	bl	800795e <USBD_CtlError>
        err++;
 8007572:	7afb      	ldrb	r3, [r7, #11]
 8007574:	3301      	adds	r3, #1
 8007576:	72fb      	strb	r3, [r7, #11]
      break;
 8007578:	e021      	b.n	80075be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	7c1b      	ldrb	r3, [r3, #16]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d10d      	bne.n	800759e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758a:	f107 0208 	add.w	r2, r7, #8
 800758e:	4610      	mov	r0, r2
 8007590:	4798      	blx	r3
 8007592:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	3301      	adds	r3, #1
 8007598:	2207      	movs	r2, #7
 800759a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800759c:	e00f      	b.n	80075be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800759e:	6839      	ldr	r1, [r7, #0]
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 f9dc 	bl	800795e <USBD_CtlError>
        err++;
 80075a6:	7afb      	ldrb	r3, [r7, #11]
 80075a8:	3301      	adds	r3, #1
 80075aa:	72fb      	strb	r3, [r7, #11]
      break;
 80075ac:	e007      	b.n	80075be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80075ae:	6839      	ldr	r1, [r7, #0]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f9d4 	bl	800795e <USBD_CtlError>
      err++;
 80075b6:	7afb      	ldrb	r3, [r7, #11]
 80075b8:	3301      	adds	r3, #1
 80075ba:	72fb      	strb	r3, [r7, #11]
      break;
 80075bc:	bf00      	nop
  }

  if (err != 0U)
 80075be:	7afb      	ldrb	r3, [r7, #11]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d11c      	bne.n	80075fe <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80075c4:	893b      	ldrh	r3, [r7, #8]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d011      	beq.n	80075ee <USBD_GetDescriptor+0x2b6>
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	88db      	ldrh	r3, [r3, #6]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00d      	beq.n	80075ee <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	88da      	ldrh	r2, [r3, #6]
 80075d6:	893b      	ldrh	r3, [r7, #8]
 80075d8:	4293      	cmp	r3, r2
 80075da:	bf28      	it	cs
 80075dc:	4613      	movcs	r3, r2
 80075de:	b29b      	uxth	r3, r3
 80075e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80075e2:	893b      	ldrh	r3, [r7, #8]
 80075e4:	461a      	mov	r2, r3
 80075e6:	68f9      	ldr	r1, [r7, #12]
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 fa22 	bl	8007a32 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	88db      	ldrh	r3, [r3, #6]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d104      	bne.n	8007600 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fa79 	bl	8007aee <USBD_CtlSendStatus>
 80075fc:	e000      	b.n	8007600 <USBD_GetDescriptor+0x2c8>
    return;
 80075fe:	bf00      	nop
    }
  }
}
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop

08007608 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	889b      	ldrh	r3, [r3, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d130      	bne.n	800767c <USBD_SetAddress+0x74>
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	88db      	ldrh	r3, [r3, #6]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d12c      	bne.n	800767c <USBD_SetAddress+0x74>
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	885b      	ldrh	r3, [r3, #2]
 8007626:	2b7f      	cmp	r3, #127	; 0x7f
 8007628:	d828      	bhi.n	800767c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	885b      	ldrh	r3, [r3, #2]
 800762e:	b2db      	uxtb	r3, r3
 8007630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007634:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800763c:	2b03      	cmp	r3, #3
 800763e:	d104      	bne.n	800764a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007640:	6839      	ldr	r1, [r7, #0]
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f98b 	bl	800795e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007648:	e01d      	b.n	8007686 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	7bfa      	ldrb	r2, [r7, #15]
 800764e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007652:	7bfb      	ldrb	r3, [r7, #15]
 8007654:	4619      	mov	r1, r3
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fe22 	bl	80082a0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 fa46 	bl	8007aee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007662:	7bfb      	ldrb	r3, [r7, #15]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d004      	beq.n	8007672 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2202      	movs	r2, #2
 800766c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007670:	e009      	b.n	8007686 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800767a:	e004      	b.n	8007686 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800767c:	6839      	ldr	r1, [r7, #0]
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f96d 	bl	800795e <USBD_CtlError>
  }
}
 8007684:	bf00      	nop
 8007686:	bf00      	nop
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
	...

08007690 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	885b      	ldrh	r3, [r3, #2]
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	4b41      	ldr	r3, [pc, #260]	; (80077a8 <USBD_SetConfig+0x118>)
 80076a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80076a4:	4b40      	ldr	r3, [pc, #256]	; (80077a8 <USBD_SetConfig+0x118>)
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d904      	bls.n	80076b6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80076ac:	6839      	ldr	r1, [r7, #0]
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f955 	bl	800795e <USBD_CtlError>
 80076b4:	e075      	b.n	80077a2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d002      	beq.n	80076c6 <USBD_SetConfig+0x36>
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d023      	beq.n	800770c <USBD_SetConfig+0x7c>
 80076c4:	e062      	b.n	800778c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80076c6:	4b38      	ldr	r3, [pc, #224]	; (80077a8 <USBD_SetConfig+0x118>)
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d01a      	beq.n	8007704 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80076ce:	4b36      	ldr	r3, [pc, #216]	; (80077a8 <USBD_SetConfig+0x118>)
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	461a      	mov	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2203      	movs	r2, #3
 80076dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80076e0:	4b31      	ldr	r3, [pc, #196]	; (80077a8 <USBD_SetConfig+0x118>)
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	4619      	mov	r1, r3
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f7ff f9e8 	bl	8006abc <USBD_SetClassConfig>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d104      	bne.n	80076fc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80076f2:	6839      	ldr	r1, [r7, #0]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f932 	bl	800795e <USBD_CtlError>
            return;
 80076fa:	e052      	b.n	80077a2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f9f6 	bl	8007aee <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007702:	e04e      	b.n	80077a2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f9f2 	bl	8007aee <USBD_CtlSendStatus>
        break;
 800770a:	e04a      	b.n	80077a2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800770c:	4b26      	ldr	r3, [pc, #152]	; (80077a8 <USBD_SetConfig+0x118>)
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d112      	bne.n	800773a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2202      	movs	r2, #2
 8007718:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800771c:	4b22      	ldr	r3, [pc, #136]	; (80077a8 <USBD_SetConfig+0x118>)
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	461a      	mov	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007726:	4b20      	ldr	r3, [pc, #128]	; (80077a8 <USBD_SetConfig+0x118>)
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	4619      	mov	r1, r3
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f7ff f9e4 	bl	8006afa <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f9db 	bl	8007aee <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007738:	e033      	b.n	80077a2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800773a:	4b1b      	ldr	r3, [pc, #108]	; (80077a8 <USBD_SetConfig+0x118>)
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	461a      	mov	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	429a      	cmp	r2, r3
 8007746:	d01d      	beq.n	8007784 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	b2db      	uxtb	r3, r3
 800774e:	4619      	mov	r1, r3
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7ff f9d2 	bl	8006afa <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007756:	4b14      	ldr	r3, [pc, #80]	; (80077a8 <USBD_SetConfig+0x118>)
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	461a      	mov	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007760:	4b11      	ldr	r3, [pc, #68]	; (80077a8 <USBD_SetConfig+0x118>)
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	4619      	mov	r1, r3
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7ff f9a8 	bl	8006abc <USBD_SetClassConfig>
 800776c:	4603      	mov	r3, r0
 800776e:	2b02      	cmp	r3, #2
 8007770:	d104      	bne.n	800777c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007772:	6839      	ldr	r1, [r7, #0]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f8f2 	bl	800795e <USBD_CtlError>
            return;
 800777a:	e012      	b.n	80077a2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 f9b6 	bl	8007aee <USBD_CtlSendStatus>
        break;
 8007782:	e00e      	b.n	80077a2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 f9b2 	bl	8007aee <USBD_CtlSendStatus>
        break;
 800778a:	e00a      	b.n	80077a2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f8e5 	bl	800795e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007794:	4b04      	ldr	r3, [pc, #16]	; (80077a8 <USBD_SetConfig+0x118>)
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	4619      	mov	r1, r3
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7ff f9ad 	bl	8006afa <USBD_ClrClassConfig>
        break;
 80077a0:	bf00      	nop
    }
  }
}
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	200002bc 	.word	0x200002bc

080077ac <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	88db      	ldrh	r3, [r3, #6]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d004      	beq.n	80077c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80077be:	6839      	ldr	r1, [r7, #0]
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 f8cc 	bl	800795e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80077c6:	e022      	b.n	800780e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	dc02      	bgt.n	80077d8 <USBD_GetConfig+0x2c>
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	dc03      	bgt.n	80077de <USBD_GetConfig+0x32>
 80077d6:	e015      	b.n	8007804 <USBD_GetConfig+0x58>
 80077d8:	2b03      	cmp	r3, #3
 80077da:	d00b      	beq.n	80077f4 <USBD_GetConfig+0x48>
 80077dc:	e012      	b.n	8007804 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	3308      	adds	r3, #8
 80077e8:	2201      	movs	r2, #1
 80077ea:	4619      	mov	r1, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 f920 	bl	8007a32 <USBD_CtlSendData>
        break;
 80077f2:	e00c      	b.n	800780e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	3304      	adds	r3, #4
 80077f8:	2201      	movs	r2, #1
 80077fa:	4619      	mov	r1, r3
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f918 	bl	8007a32 <USBD_CtlSendData>
        break;
 8007802:	e004      	b.n	800780e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007804:	6839      	ldr	r1, [r7, #0]
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f8a9 	bl	800795e <USBD_CtlError>
        break;
 800780c:	bf00      	nop
}
 800780e:	bf00      	nop
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b082      	sub	sp, #8
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007826:	3b01      	subs	r3, #1
 8007828:	2b02      	cmp	r3, #2
 800782a:	d81e      	bhi.n	800786a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	88db      	ldrh	r3, [r3, #6]
 8007830:	2b02      	cmp	r3, #2
 8007832:	d004      	beq.n	800783e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f891 	bl	800795e <USBD_CtlError>
        break;
 800783c:	e01a      	b.n	8007874 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800784a:	2b00      	cmp	r3, #0
 800784c:	d005      	beq.n	800785a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	f043 0202 	orr.w	r2, r3, #2
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	330c      	adds	r3, #12
 800785e:	2202      	movs	r2, #2
 8007860:	4619      	mov	r1, r3
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f8e5 	bl	8007a32 <USBD_CtlSendData>
      break;
 8007868:	e004      	b.n	8007874 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f876 	bl	800795e <USBD_CtlError>
      break;
 8007872:	bf00      	nop
  }
}
 8007874:	bf00      	nop
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	885b      	ldrh	r3, [r3, #2]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d106      	bne.n	800789c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f929 	bl	8007aee <USBD_CtlSendStatus>
  }
}
 800789c:	bf00      	nop
 800789e:	3708      	adds	r7, #8
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078b4:	3b01      	subs	r3, #1
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d80b      	bhi.n	80078d2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	885b      	ldrh	r3, [r3, #2]
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d10c      	bne.n	80078dc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f90f 	bl	8007aee <USBD_CtlSendStatus>
      }
      break;
 80078d0:	e004      	b.n	80078dc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f842 	bl	800795e <USBD_CtlError>
      break;
 80078da:	e000      	b.n	80078de <USBD_ClrFeature+0x3a>
      break;
 80078dc:	bf00      	nop
  }
}
 80078de:	bf00      	nop
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b083      	sub	sp, #12
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
 80078ee:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	781a      	ldrb	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	785a      	ldrb	r2, [r3, #1]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	3302      	adds	r3, #2
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	b29a      	uxth	r2, r3
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	3303      	adds	r3, #3
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	b29b      	uxth	r3, r3
 8007910:	021b      	lsls	r3, r3, #8
 8007912:	b29b      	uxth	r3, r3
 8007914:	4413      	add	r3, r2
 8007916:	b29a      	uxth	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	3304      	adds	r3, #4
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	b29a      	uxth	r2, r3
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	3305      	adds	r3, #5
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	b29b      	uxth	r3, r3
 800792c:	021b      	lsls	r3, r3, #8
 800792e:	b29b      	uxth	r3, r3
 8007930:	4413      	add	r3, r2
 8007932:	b29a      	uxth	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	3306      	adds	r3, #6
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	b29a      	uxth	r2, r3
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	3307      	adds	r3, #7
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	b29b      	uxth	r3, r3
 8007948:	021b      	lsls	r3, r3, #8
 800794a:	b29b      	uxth	r3, r3
 800794c:	4413      	add	r3, r2
 800794e:	b29a      	uxth	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	80da      	strh	r2, [r3, #6]

}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	bc80      	pop	{r7}
 800795c:	4770      	bx	lr

0800795e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b082      	sub	sp, #8
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
 8007966:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007968:	2180      	movs	r1, #128	; 0x80
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fc2e 	bl	80081cc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007970:	2100      	movs	r1, #0
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 fc2a 	bl	80081cc <USBD_LL_StallEP>
}
 8007978:	bf00      	nop
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800798c:	2300      	movs	r3, #0
 800798e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d032      	beq.n	80079fc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	f000 f834 	bl	8007a04 <USBD_GetLen>
 800799c:	4603      	mov	r3, r0
 800799e:	3301      	adds	r3, #1
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	005b      	lsls	r3, r3, #1
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80079aa:	7dfb      	ldrb	r3, [r7, #23]
 80079ac:	1c5a      	adds	r2, r3, #1
 80079ae:	75fa      	strb	r2, [r7, #23]
 80079b0:	461a      	mov	r2, r3
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	4413      	add	r3, r2
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	7812      	ldrb	r2, [r2, #0]
 80079ba:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80079bc:	7dfb      	ldrb	r3, [r7, #23]
 80079be:	1c5a      	adds	r2, r3, #1
 80079c0:	75fa      	strb	r2, [r7, #23]
 80079c2:	461a      	mov	r2, r3
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	4413      	add	r3, r2
 80079c8:	2203      	movs	r2, #3
 80079ca:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80079cc:	e012      	b.n	80079f4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	1c5a      	adds	r2, r3, #1
 80079d2:	60fa      	str	r2, [r7, #12]
 80079d4:	7dfa      	ldrb	r2, [r7, #23]
 80079d6:	1c51      	adds	r1, r2, #1
 80079d8:	75f9      	strb	r1, [r7, #23]
 80079da:	4611      	mov	r1, r2
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	440a      	add	r2, r1
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80079e4:	7dfb      	ldrb	r3, [r7, #23]
 80079e6:	1c5a      	adds	r2, r3, #1
 80079e8:	75fa      	strb	r2, [r7, #23]
 80079ea:	461a      	mov	r2, r3
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	4413      	add	r3, r2
 80079f0:	2200      	movs	r2, #0
 80079f2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d1e8      	bne.n	80079ce <USBD_GetString+0x4e>
    }
  }
}
 80079fc:	bf00      	nop
 80079fe:	3718      	adds	r7, #24
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007a10:	e005      	b.n	8007a1e <USBD_GetLen+0x1a>
  {
    len++;
 8007a12:	7bfb      	ldrb	r3, [r7, #15]
 8007a14:	3301      	adds	r3, #1
 8007a16:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1f5      	bne.n	8007a12 <USBD_GetLen+0xe>
  }

  return len;
 8007a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bc80      	pop	{r7}
 8007a30:	4770      	bx	lr

08007a32 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b084      	sub	sp, #16
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	60f8      	str	r0, [r7, #12]
 8007a3a:	60b9      	str	r1, [r7, #8]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2202      	movs	r2, #2
 8007a44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007a48:	88fa      	ldrh	r2, [r7, #6]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007a4e:	88fa      	ldrh	r2, [r7, #6]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a54:	88fb      	ldrh	r3, [r7, #6]
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	2100      	movs	r1, #0
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f000 fc3f 	bl	80082de <USBD_LL_Transmit>

  return USBD_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b084      	sub	sp, #16
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	60f8      	str	r0, [r7, #12]
 8007a72:	60b9      	str	r1, [r7, #8]
 8007a74:	4613      	mov	r3, r2
 8007a76:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a78:	88fb      	ldrh	r3, [r7, #6]
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f000 fc2d 	bl	80082de <USBD_LL_Transmit>

  return USBD_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b084      	sub	sp, #16
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	60f8      	str	r0, [r7, #12]
 8007a96:	60b9      	str	r1, [r7, #8]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2203      	movs	r2, #3
 8007aa0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007aa4:	88fa      	ldrh	r2, [r7, #6]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007aac:	88fa      	ldrh	r2, [r7, #6]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ab4:	88fb      	ldrh	r3, [r7, #6]
 8007ab6:	68ba      	ldr	r2, [r7, #8]
 8007ab8:	2100      	movs	r1, #0
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f000 fc32 	bl	8008324 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b084      	sub	sp, #16
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	60f8      	str	r0, [r7, #12]
 8007ad2:	60b9      	str	r1, [r7, #8]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ad8:	88fb      	ldrh	r3, [r7, #6]
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	2100      	movs	r1, #0
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f000 fc20 	bl	8008324 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b082      	sub	sp, #8
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2204      	movs	r2, #4
 8007afa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007afe:	2300      	movs	r3, #0
 8007b00:	2200      	movs	r2, #0
 8007b02:	2100      	movs	r1, #0
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fbea 	bl	80082de <USBD_LL_Transmit>

  return USBD_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3708      	adds	r7, #8
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2205      	movs	r2, #5
 8007b20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b24:	2300      	movs	r3, #0
 8007b26:	2200      	movs	r2, #0
 8007b28:	2100      	movs	r1, #0
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fbfa 	bl	8008324 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
	...

08007b3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007b40:	2200      	movs	r2, #0
 8007b42:	4912      	ldr	r1, [pc, #72]	; (8007b8c <MX_USB_DEVICE_Init+0x50>)
 8007b44:	4812      	ldr	r0, [pc, #72]	; (8007b90 <MX_USB_DEVICE_Init+0x54>)
 8007b46:	f7fe ff5f 	bl	8006a08 <USBD_Init>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d001      	beq.n	8007b54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007b50:	f7f8 fd0c 	bl	800056c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007b54:	490f      	ldr	r1, [pc, #60]	; (8007b94 <MX_USB_DEVICE_Init+0x58>)
 8007b56:	480e      	ldr	r0, [pc, #56]	; (8007b90 <MX_USB_DEVICE_Init+0x54>)
 8007b58:	f7fe ff81 	bl	8006a5e <USBD_RegisterClass>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d001      	beq.n	8007b66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007b62:	f7f8 fd03 	bl	800056c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007b66:	490c      	ldr	r1, [pc, #48]	; (8007b98 <MX_USB_DEVICE_Init+0x5c>)
 8007b68:	4809      	ldr	r0, [pc, #36]	; (8007b90 <MX_USB_DEVICE_Init+0x54>)
 8007b6a:	f7fe fee1 	bl	8006930 <USBD_CDC_RegisterInterface>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d001      	beq.n	8007b78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007b74:	f7f8 fcfa 	bl	800056c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007b78:	4805      	ldr	r0, [pc, #20]	; (8007b90 <MX_USB_DEVICE_Init+0x54>)
 8007b7a:	f7fe ff89 	bl	8006a90 <USBD_Start>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d001      	beq.n	8007b88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007b84:	f7f8 fcf2 	bl	800056c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007b88:	bf00      	nop
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	2000012c 	.word	0x2000012c
 8007b90:	200002c0 	.word	0x200002c0
 8007b94:	20000018 	.word	0x20000018
 8007b98:	2000011c 	.word	0x2000011c

08007b9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	4905      	ldr	r1, [pc, #20]	; (8007bb8 <CDC_Init_FS+0x1c>)
 8007ba4:	4805      	ldr	r0, [pc, #20]	; (8007bbc <CDC_Init_FS+0x20>)
 8007ba6:	f7fe fed9 	bl	800695c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007baa:	4905      	ldr	r1, [pc, #20]	; (8007bc0 <CDC_Init_FS+0x24>)
 8007bac:	4803      	ldr	r0, [pc, #12]	; (8007bbc <CDC_Init_FS+0x20>)
 8007bae:	f7fe feee 	bl	800698e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007bb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	20000984 	.word	0x20000984
 8007bbc:	200002c0 	.word	0x200002c0
 8007bc0:	20000584 	.word	0x20000584

08007bc4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007bc8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bc80      	pop	{r7}
 8007bd0:	4770      	bx	lr
	...

08007bd4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	4603      	mov	r3, r0
 8007bdc:	6039      	str	r1, [r7, #0]
 8007bde:	71fb      	strb	r3, [r7, #7]
 8007be0:	4613      	mov	r3, r2
 8007be2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007be4:	79fb      	ldrb	r3, [r7, #7]
 8007be6:	2b23      	cmp	r3, #35	; 0x23
 8007be8:	d84a      	bhi.n	8007c80 <CDC_Control_FS+0xac>
 8007bea:	a201      	add	r2, pc, #4	; (adr r2, 8007bf0 <CDC_Control_FS+0x1c>)
 8007bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf0:	08007c81 	.word	0x08007c81
 8007bf4:	08007c81 	.word	0x08007c81
 8007bf8:	08007c81 	.word	0x08007c81
 8007bfc:	08007c81 	.word	0x08007c81
 8007c00:	08007c81 	.word	0x08007c81
 8007c04:	08007c81 	.word	0x08007c81
 8007c08:	08007c81 	.word	0x08007c81
 8007c0c:	08007c81 	.word	0x08007c81
 8007c10:	08007c81 	.word	0x08007c81
 8007c14:	08007c81 	.word	0x08007c81
 8007c18:	08007c81 	.word	0x08007c81
 8007c1c:	08007c81 	.word	0x08007c81
 8007c20:	08007c81 	.word	0x08007c81
 8007c24:	08007c81 	.word	0x08007c81
 8007c28:	08007c81 	.word	0x08007c81
 8007c2c:	08007c81 	.word	0x08007c81
 8007c30:	08007c81 	.word	0x08007c81
 8007c34:	08007c81 	.word	0x08007c81
 8007c38:	08007c81 	.word	0x08007c81
 8007c3c:	08007c81 	.word	0x08007c81
 8007c40:	08007c81 	.word	0x08007c81
 8007c44:	08007c81 	.word	0x08007c81
 8007c48:	08007c81 	.word	0x08007c81
 8007c4c:	08007c81 	.word	0x08007c81
 8007c50:	08007c81 	.word	0x08007c81
 8007c54:	08007c81 	.word	0x08007c81
 8007c58:	08007c81 	.word	0x08007c81
 8007c5c:	08007c81 	.word	0x08007c81
 8007c60:	08007c81 	.word	0x08007c81
 8007c64:	08007c81 	.word	0x08007c81
 8007c68:	08007c81 	.word	0x08007c81
 8007c6c:	08007c81 	.word	0x08007c81
 8007c70:	08007c81 	.word	0x08007c81
 8007c74:	08007c81 	.word	0x08007c81
 8007c78:	08007c81 	.word	0x08007c81
 8007c7c:	08007c81 	.word	0x08007c81
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007c80:	bf00      	nop
  }

  return (USBD_OK);
 8007c82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bc80      	pop	{r7}
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop

08007c90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007c9a:	6879      	ldr	r1, [r7, #4]
 8007c9c:	4805      	ldr	r0, [pc, #20]	; (8007cb4 <CDC_Receive_FS+0x24>)
 8007c9e:	f7fe fe76 	bl	800698e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007ca2:	4804      	ldr	r0, [pc, #16]	; (8007cb4 <CDC_Receive_FS+0x24>)
 8007ca4:	f7fe fe86 	bl	80069b4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007ca8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	200002c0 	.word	0x200002c0

08007cb8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	6039      	str	r1, [r7, #0]
 8007cc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	2212      	movs	r2, #18
 8007cc8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007cca:	4b03      	ldr	r3, [pc, #12]	; (8007cd8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bc80      	pop	{r7}
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	20000148 	.word	0x20000148

08007cdc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	6039      	str	r1, [r7, #0]
 8007ce6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	2204      	movs	r2, #4
 8007cec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007cee:	4b03      	ldr	r3, [pc, #12]	; (8007cfc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bc80      	pop	{r7}
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	2000015c 	.word	0x2000015c

08007d00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	4603      	mov	r3, r0
 8007d08:	6039      	str	r1, [r7, #0]
 8007d0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d0c:	79fb      	ldrb	r3, [r7, #7]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d105      	bne.n	8007d1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	4907      	ldr	r1, [pc, #28]	; (8007d34 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d16:	4808      	ldr	r0, [pc, #32]	; (8007d38 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d18:	f7ff fe32 	bl	8007980 <USBD_GetString>
 8007d1c:	e004      	b.n	8007d28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	4904      	ldr	r1, [pc, #16]	; (8007d34 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d22:	4805      	ldr	r0, [pc, #20]	; (8007d38 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d24:	f7ff fe2c 	bl	8007980 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d28:	4b02      	ldr	r3, [pc, #8]	; (8007d34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3708      	adds	r7, #8
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	20000d84 	.word	0x20000d84
 8007d38:	08008498 	.word	0x08008498

08007d3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	4603      	mov	r3, r0
 8007d44:	6039      	str	r1, [r7, #0]
 8007d46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	4904      	ldr	r1, [pc, #16]	; (8007d5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007d4c:	4804      	ldr	r0, [pc, #16]	; (8007d60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007d4e:	f7ff fe17 	bl	8007980 <USBD_GetString>
  return USBD_StrDesc;
 8007d52:	4b02      	ldr	r3, [pc, #8]	; (8007d5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	20000d84 	.word	0x20000d84
 8007d60:	080084b0 	.word	0x080084b0

08007d64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	6039      	str	r1, [r7, #0]
 8007d6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	221a      	movs	r2, #26
 8007d74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007d76:	f000 f843 	bl	8007e00 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007d7a:	4b02      	ldr	r3, [pc, #8]	; (8007d84 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	20000160 	.word	0x20000160

08007d88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	4603      	mov	r3, r0
 8007d90:	6039      	str	r1, [r7, #0]
 8007d92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007d94:	79fb      	ldrb	r3, [r7, #7]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d105      	bne.n	8007da6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d9a:	683a      	ldr	r2, [r7, #0]
 8007d9c:	4907      	ldr	r1, [pc, #28]	; (8007dbc <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d9e:	4808      	ldr	r0, [pc, #32]	; (8007dc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007da0:	f7ff fdee 	bl	8007980 <USBD_GetString>
 8007da4:	e004      	b.n	8007db0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	4904      	ldr	r1, [pc, #16]	; (8007dbc <USBD_FS_ConfigStrDescriptor+0x34>)
 8007daa:	4805      	ldr	r0, [pc, #20]	; (8007dc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007dac:	f7ff fde8 	bl	8007980 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007db0:	4b02      	ldr	r3, [pc, #8]	; (8007dbc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3708      	adds	r7, #8
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	20000d84 	.word	0x20000d84
 8007dc0:	080084c4 	.word	0x080084c4

08007dc4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	4603      	mov	r3, r0
 8007dcc:	6039      	str	r1, [r7, #0]
 8007dce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007dd0:	79fb      	ldrb	r3, [r7, #7]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d105      	bne.n	8007de2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007dd6:	683a      	ldr	r2, [r7, #0]
 8007dd8:	4907      	ldr	r1, [pc, #28]	; (8007df8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007dda:	4808      	ldr	r0, [pc, #32]	; (8007dfc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ddc:	f7ff fdd0 	bl	8007980 <USBD_GetString>
 8007de0:	e004      	b.n	8007dec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	4904      	ldr	r1, [pc, #16]	; (8007df8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007de6:	4805      	ldr	r0, [pc, #20]	; (8007dfc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007de8:	f7ff fdca 	bl	8007980 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007dec:	4b02      	ldr	r3, [pc, #8]	; (8007df8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	20000d84 	.word	0x20000d84
 8007dfc:	080084d0 	.word	0x080084d0

08007e00 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007e06:	4b0f      	ldr	r3, [pc, #60]	; (8007e44 <Get_SerialNum+0x44>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007e0c:	4b0e      	ldr	r3, [pc, #56]	; (8007e48 <Get_SerialNum+0x48>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007e12:	4b0e      	ldr	r3, [pc, #56]	; (8007e4c <Get_SerialNum+0x4c>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d009      	beq.n	8007e3a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007e26:	2208      	movs	r2, #8
 8007e28:	4909      	ldr	r1, [pc, #36]	; (8007e50 <Get_SerialNum+0x50>)
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f000 f814 	bl	8007e58 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007e30:	2204      	movs	r2, #4
 8007e32:	4908      	ldr	r1, [pc, #32]	; (8007e54 <Get_SerialNum+0x54>)
 8007e34:	68b8      	ldr	r0, [r7, #8]
 8007e36:	f000 f80f 	bl	8007e58 <IntToUnicode>
  }
}
 8007e3a:	bf00      	nop
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	1ffff7e8 	.word	0x1ffff7e8
 8007e48:	1ffff7ec 	.word	0x1ffff7ec
 8007e4c:	1ffff7f0 	.word	0x1ffff7f0
 8007e50:	20000162 	.word	0x20000162
 8007e54:	20000172 	.word	0x20000172

08007e58 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b087      	sub	sp, #28
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	4613      	mov	r3, r2
 8007e64:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007e66:	2300      	movs	r3, #0
 8007e68:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	75fb      	strb	r3, [r7, #23]
 8007e6e:	e027      	b.n	8007ec0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	0f1b      	lsrs	r3, r3, #28
 8007e74:	2b09      	cmp	r3, #9
 8007e76:	d80b      	bhi.n	8007e90 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	0f1b      	lsrs	r3, r3, #28
 8007e7c:	b2da      	uxtb	r2, r3
 8007e7e:	7dfb      	ldrb	r3, [r7, #23]
 8007e80:	005b      	lsls	r3, r3, #1
 8007e82:	4619      	mov	r1, r3
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	440b      	add	r3, r1
 8007e88:	3230      	adds	r2, #48	; 0x30
 8007e8a:	b2d2      	uxtb	r2, r2
 8007e8c:	701a      	strb	r2, [r3, #0]
 8007e8e:	e00a      	b.n	8007ea6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	0f1b      	lsrs	r3, r3, #28
 8007e94:	b2da      	uxtb	r2, r3
 8007e96:	7dfb      	ldrb	r3, [r7, #23]
 8007e98:	005b      	lsls	r3, r3, #1
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	440b      	add	r3, r1
 8007ea0:	3237      	adds	r2, #55	; 0x37
 8007ea2:	b2d2      	uxtb	r2, r2
 8007ea4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	011b      	lsls	r3, r3, #4
 8007eaa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007eac:	7dfb      	ldrb	r3, [r7, #23]
 8007eae:	005b      	lsls	r3, r3, #1
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007eba:	7dfb      	ldrb	r3, [r7, #23]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	75fb      	strb	r3, [r7, #23]
 8007ec0:	7dfa      	ldrb	r2, [r7, #23]
 8007ec2:	79fb      	ldrb	r3, [r7, #7]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d3d3      	bcc.n	8007e70 <IntToUnicode+0x18>
  }
}
 8007ec8:	bf00      	nop
 8007eca:	bf00      	nop
 8007ecc:	371c      	adds	r7, #28
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bc80      	pop	{r7}
 8007ed2:	4770      	bx	lr

08007ed4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a0d      	ldr	r2, [pc, #52]	; (8007f18 <HAL_PCD_MspInit+0x44>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d113      	bne.n	8007f0e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007ee6:	4b0d      	ldr	r3, [pc, #52]	; (8007f1c <HAL_PCD_MspInit+0x48>)
 8007ee8:	69db      	ldr	r3, [r3, #28]
 8007eea:	4a0c      	ldr	r2, [pc, #48]	; (8007f1c <HAL_PCD_MspInit+0x48>)
 8007eec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007ef0:	61d3      	str	r3, [r2, #28]
 8007ef2:	4b0a      	ldr	r3, [pc, #40]	; (8007f1c <HAL_PCD_MspInit+0x48>)
 8007ef4:	69db      	ldr	r3, [r3, #28]
 8007ef6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007efa:	60fb      	str	r3, [r7, #12]
 8007efc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007efe:	2200      	movs	r2, #0
 8007f00:	2100      	movs	r1, #0
 8007f02:	2014      	movs	r0, #20
 8007f04:	f7f8 fdd9 	bl	8000aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007f08:	2014      	movs	r0, #20
 8007f0a:	f7f8 fdf2 	bl	8000af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007f0e:	bf00      	nop
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	40005c00 	.word	0x40005c00
 8007f1c:	40021000 	.word	0x40021000

08007f20 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007f34:	4619      	mov	r1, r3
 8007f36:	4610      	mov	r0, r2
 8007f38:	f7fe fdf2 	bl	8006b20 <USBD_LL_SetupStage>
}
 8007f3c:	bf00      	nop
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8007f56:	78fa      	ldrb	r2, [r7, #3]
 8007f58:	6879      	ldr	r1, [r7, #4]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4413      	add	r3, r2
 8007f60:	00db      	lsls	r3, r3, #3
 8007f62:	440b      	add	r3, r1
 8007f64:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	78fb      	ldrb	r3, [r7, #3]
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	f7fe fe24 	bl	8006bba <USBD_LL_DataOutStage>
}
 8007f72:	bf00      	nop
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b082      	sub	sp, #8
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
 8007f82:	460b      	mov	r3, r1
 8007f84:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8007f8c:	78fa      	ldrb	r2, [r7, #3]
 8007f8e:	6879      	ldr	r1, [r7, #4]
 8007f90:	4613      	mov	r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	4413      	add	r3, r2
 8007f96:	00db      	lsls	r3, r3, #3
 8007f98:	440b      	add	r3, r1
 8007f9a:	333c      	adds	r3, #60	; 0x3c
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	78fb      	ldrb	r3, [r7, #3]
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	f7fe fe7b 	bl	8006c9c <USBD_LL_DataInStage>
}
 8007fa6:	bf00      	nop
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b082      	sub	sp, #8
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fe ff8b 	bl	8006ed8 <USBD_LL_SOF>
}
 8007fc2:	bf00      	nop
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b084      	sub	sp, #16
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d001      	beq.n	8007fe2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007fde:	f7f8 fac5 	bl	800056c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007fe8:	7bfa      	ldrb	r2, [r7, #15]
 8007fea:	4611      	mov	r1, r2
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7fe ff3b 	bl	8006e68 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7fe fef4 	bl	8006de6 <USBD_LL_Reset>
}
 8007ffe:	bf00      	nop
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
	...

08008008 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008016:	4618      	mov	r0, r3
 8008018:	f7fe ff35 	bl	8006e86 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	699b      	ldr	r3, [r3, #24]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d005      	beq.n	8008030 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008024:	4b04      	ldr	r3, [pc, #16]	; (8008038 <HAL_PCD_SuspendCallback+0x30>)
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	4a03      	ldr	r2, [pc, #12]	; (8008038 <HAL_PCD_SuspendCallback+0x30>)
 800802a:	f043 0306 	orr.w	r3, r3, #6
 800802e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008030:	bf00      	nop
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	e000ed00 	.word	0xe000ed00

0800803c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800804a:	4618      	mov	r0, r3
 800804c:	f7fe ff2f 	bl	8006eae <USBD_LL_Resume>
}
 8008050:	bf00      	nop
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008060:	4a28      	ldr	r2, [pc, #160]	; (8008104 <USBD_LL_Init+0xac>)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a26      	ldr	r2, [pc, #152]	; (8008104 <USBD_LL_Init+0xac>)
 800806c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008070:	4b24      	ldr	r3, [pc, #144]	; (8008104 <USBD_LL_Init+0xac>)
 8008072:	4a25      	ldr	r2, [pc, #148]	; (8008108 <USBD_LL_Init+0xb0>)
 8008074:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008076:	4b23      	ldr	r3, [pc, #140]	; (8008104 <USBD_LL_Init+0xac>)
 8008078:	2208      	movs	r2, #8
 800807a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800807c:	4b21      	ldr	r3, [pc, #132]	; (8008104 <USBD_LL_Init+0xac>)
 800807e:	2202      	movs	r2, #2
 8008080:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008082:	4b20      	ldr	r3, [pc, #128]	; (8008104 <USBD_LL_Init+0xac>)
 8008084:	2200      	movs	r2, #0
 8008086:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008088:	4b1e      	ldr	r3, [pc, #120]	; (8008104 <USBD_LL_Init+0xac>)
 800808a:	2200      	movs	r2, #0
 800808c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800808e:	4b1d      	ldr	r3, [pc, #116]	; (8008104 <USBD_LL_Init+0xac>)
 8008090:	2200      	movs	r2, #0
 8008092:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008094:	481b      	ldr	r0, [pc, #108]	; (8008104 <USBD_LL_Init+0xac>)
 8008096:	f7f8 fecb 	bl	8000e30 <HAL_PCD_Init>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d001      	beq.n	80080a4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80080a0:	f7f8 fa64 	bl	800056c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080aa:	2318      	movs	r3, #24
 80080ac:	2200      	movs	r2, #0
 80080ae:	2100      	movs	r1, #0
 80080b0:	f7fa fbea 	bl	8002888 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080ba:	2358      	movs	r3, #88	; 0x58
 80080bc:	2200      	movs	r2, #0
 80080be:	2180      	movs	r1, #128	; 0x80
 80080c0:	f7fa fbe2 	bl	8002888 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080ca:	23c0      	movs	r3, #192	; 0xc0
 80080cc:	2200      	movs	r2, #0
 80080ce:	2181      	movs	r1, #129	; 0x81
 80080d0:	f7fa fbda 	bl	8002888 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080da:	f44f 7388 	mov.w	r3, #272	; 0x110
 80080de:	2200      	movs	r2, #0
 80080e0:	2101      	movs	r1, #1
 80080e2:	f7fa fbd1 	bl	8002888 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080f0:	2200      	movs	r2, #0
 80080f2:	2182      	movs	r1, #130	; 0x82
 80080f4:	f7fa fbc8 	bl	8002888 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	20000f84 	.word	0x20000f84
 8008108:	40005c00 	.word	0x40005c00

0800810c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008114:	2300      	movs	r3, #0
 8008116:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008118:	2300      	movs	r3, #0
 800811a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008122:	4618      	mov	r0, r3
 8008124:	f7f8 ff83 	bl	800102e <HAL_PCD_Start>
 8008128:	4603      	mov	r3, r0
 800812a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800812c:	7bfb      	ldrb	r3, [r7, #15]
 800812e:	4618      	mov	r0, r3
 8008130:	f000 f94e 	bl	80083d0 <USBD_Get_USB_Status>
 8008134:	4603      	mov	r3, r0
 8008136:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008138:	7bbb      	ldrb	r3, [r7, #14]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b084      	sub	sp, #16
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	4608      	mov	r0, r1
 800814c:	4611      	mov	r1, r2
 800814e:	461a      	mov	r2, r3
 8008150:	4603      	mov	r3, r0
 8008152:	70fb      	strb	r3, [r7, #3]
 8008154:	460b      	mov	r3, r1
 8008156:	70bb      	strb	r3, [r7, #2]
 8008158:	4613      	mov	r3, r2
 800815a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008160:	2300      	movs	r3, #0
 8008162:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800816a:	78bb      	ldrb	r3, [r7, #2]
 800816c:	883a      	ldrh	r2, [r7, #0]
 800816e:	78f9      	ldrb	r1, [r7, #3]
 8008170:	f7f9 f8d8 	bl	8001324 <HAL_PCD_EP_Open>
 8008174:	4603      	mov	r3, r0
 8008176:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008178:	7bfb      	ldrb	r3, [r7, #15]
 800817a:	4618      	mov	r0, r3
 800817c:	f000 f928 	bl	80083d0 <USBD_Get_USB_Status>
 8008180:	4603      	mov	r3, r0
 8008182:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008184:	7bbb      	ldrb	r3, [r7, #14]
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b084      	sub	sp, #16
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
 8008196:	460b      	mov	r3, r1
 8008198:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800819a:	2300      	movs	r3, #0
 800819c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800819e:	2300      	movs	r3, #0
 80081a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081a8:	78fa      	ldrb	r2, [r7, #3]
 80081aa:	4611      	mov	r1, r2
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7f9 f916 	bl	80013de <HAL_PCD_EP_Close>
 80081b2:	4603      	mov	r3, r0
 80081b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081b6:	7bfb      	ldrb	r3, [r7, #15]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f000 f909 	bl	80083d0 <USBD_Get_USB_Status>
 80081be:	4603      	mov	r3, r0
 80081c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3710      	adds	r7, #16
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	460b      	mov	r3, r1
 80081d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081dc:	2300      	movs	r3, #0
 80081de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081e6:	78fa      	ldrb	r2, [r7, #3]
 80081e8:	4611      	mov	r1, r2
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7f9 f9be 	bl	800156c <HAL_PCD_EP_SetStall>
 80081f0:	4603      	mov	r3, r0
 80081f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081f4:	7bfb      	ldrb	r3, [r7, #15]
 80081f6:	4618      	mov	r0, r3
 80081f8:	f000 f8ea 	bl	80083d0 <USBD_Get_USB_Status>
 80081fc:	4603      	mov	r3, r0
 80081fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008200:	7bbb      	ldrb	r3, [r7, #14]
}
 8008202:	4618      	mov	r0, r3
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b084      	sub	sp, #16
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
 8008212:	460b      	mov	r3, r1
 8008214:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008216:	2300      	movs	r3, #0
 8008218:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008224:	78fa      	ldrb	r2, [r7, #3]
 8008226:	4611      	mov	r1, r2
 8008228:	4618      	mov	r0, r3
 800822a:	f7f9 f9ff 	bl	800162c <HAL_PCD_EP_ClrStall>
 800822e:	4603      	mov	r3, r0
 8008230:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008232:	7bfb      	ldrb	r3, [r7, #15]
 8008234:	4618      	mov	r0, r3
 8008236:	f000 f8cb 	bl	80083d0 <USBD_Get_USB_Status>
 800823a:	4603      	mov	r3, r0
 800823c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800823e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	460b      	mov	r3, r1
 8008252:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800825a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800825c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008260:	2b00      	cmp	r3, #0
 8008262:	da0c      	bge.n	800827e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008264:	78fb      	ldrb	r3, [r7, #3]
 8008266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800826a:	68f9      	ldr	r1, [r7, #12]
 800826c:	1c5a      	adds	r2, r3, #1
 800826e:	4613      	mov	r3, r2
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	4413      	add	r3, r2
 8008274:	00db      	lsls	r3, r3, #3
 8008276:	440b      	add	r3, r1
 8008278:	3302      	adds	r3, #2
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	e00b      	b.n	8008296 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800827e:	78fb      	ldrb	r3, [r7, #3]
 8008280:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008284:	68f9      	ldr	r1, [r7, #12]
 8008286:	4613      	mov	r3, r2
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	4413      	add	r3, r2
 800828c:	00db      	lsls	r3, r3, #3
 800828e:	440b      	add	r3, r1
 8008290:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008294:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008296:	4618      	mov	r0, r3
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	bc80      	pop	{r7}
 800829e:	4770      	bx	lr

080082a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	460b      	mov	r3, r1
 80082aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082ac:	2300      	movs	r3, #0
 80082ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082b0:	2300      	movs	r3, #0
 80082b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082ba:	78fa      	ldrb	r2, [r7, #3]
 80082bc:	4611      	mov	r1, r2
 80082be:	4618      	mov	r0, r3
 80082c0:	f7f9 f80b 	bl	80012da <HAL_PCD_SetAddress>
 80082c4:	4603      	mov	r3, r0
 80082c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 f880 	bl	80083d0 <USBD_Get_USB_Status>
 80082d0:	4603      	mov	r3, r0
 80082d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b086      	sub	sp, #24
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	60f8      	str	r0, [r7, #12]
 80082e6:	607a      	str	r2, [r7, #4]
 80082e8:	461a      	mov	r2, r3
 80082ea:	460b      	mov	r3, r1
 80082ec:	72fb      	strb	r3, [r7, #11]
 80082ee:	4613      	mov	r3, r2
 80082f0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082f2:	2300      	movs	r3, #0
 80082f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008300:	893b      	ldrh	r3, [r7, #8]
 8008302:	7af9      	ldrb	r1, [r7, #11]
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	f7f9 f8fa 	bl	80014fe <HAL_PCD_EP_Transmit>
 800830a:	4603      	mov	r3, r0
 800830c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800830e:	7dfb      	ldrb	r3, [r7, #23]
 8008310:	4618      	mov	r0, r3
 8008312:	f000 f85d 	bl	80083d0 <USBD_Get_USB_Status>
 8008316:	4603      	mov	r3, r0
 8008318:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800831a:	7dbb      	ldrb	r3, [r7, #22]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3718      	adds	r7, #24
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b086      	sub	sp, #24
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	607a      	str	r2, [r7, #4]
 800832e:	461a      	mov	r2, r3
 8008330:	460b      	mov	r3, r1
 8008332:	72fb      	strb	r3, [r7, #11]
 8008334:	4613      	mov	r3, r2
 8008336:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008338:	2300      	movs	r3, #0
 800833a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800833c:	2300      	movs	r3, #0
 800833e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008346:	893b      	ldrh	r3, [r7, #8]
 8008348:	7af9      	ldrb	r1, [r7, #11]
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	f7f9 f88f 	bl	800146e <HAL_PCD_EP_Receive>
 8008350:	4603      	mov	r3, r0
 8008352:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008354:	7dfb      	ldrb	r3, [r7, #23]
 8008356:	4618      	mov	r0, r3
 8008358:	f000 f83a 	bl	80083d0 <USBD_Get_USB_Status>
 800835c:	4603      	mov	r3, r0
 800835e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008360:	7dbb      	ldrb	r3, [r7, #22]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3718      	adds	r7, #24
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b082      	sub	sp, #8
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	460b      	mov	r3, r1
 8008374:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800837c:	78fa      	ldrb	r2, [r7, #3]
 800837e:	4611      	mov	r1, r2
 8008380:	4618      	mov	r0, r3
 8008382:	f7f9 f8a5 	bl	80014d0 <HAL_PCD_EP_GetRxCount>
 8008386:	4603      	mov	r3, r0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008398:	4b02      	ldr	r3, [pc, #8]	; (80083a4 <USBD_static_malloc+0x14>)
}
 800839a:	4618      	mov	r0, r3
 800839c:	370c      	adds	r7, #12
 800839e:	46bd      	mov	sp, r7
 80083a0:	bc80      	pop	{r7}
 80083a2:	4770      	bx	lr
 80083a4:	20001274 	.word	0x20001274

080083a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]

}
 80083b0:	bf00      	nop
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bc80      	pop	{r7}
 80083b8:	4770      	bx	lr

080083ba <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083ba:	b480      	push	{r7}
 80083bc:	b083      	sub	sp, #12
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	460b      	mov	r3, r1
 80083c4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80083c6:	bf00      	nop
 80083c8:	370c      	adds	r7, #12
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bc80      	pop	{r7}
 80083ce:	4770      	bx	lr

080083d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	4603      	mov	r3, r0
 80083d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083da:	2300      	movs	r3, #0
 80083dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80083de:	79fb      	ldrb	r3, [r7, #7]
 80083e0:	2b03      	cmp	r3, #3
 80083e2:	d817      	bhi.n	8008414 <USBD_Get_USB_Status+0x44>
 80083e4:	a201      	add	r2, pc, #4	; (adr r2, 80083ec <USBD_Get_USB_Status+0x1c>)
 80083e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ea:	bf00      	nop
 80083ec:	080083fd 	.word	0x080083fd
 80083f0:	08008403 	.word	0x08008403
 80083f4:	08008409 	.word	0x08008409
 80083f8:	0800840f 	.word	0x0800840f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80083fc:	2300      	movs	r3, #0
 80083fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008400:	e00b      	b.n	800841a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008402:	2302      	movs	r3, #2
 8008404:	73fb      	strb	r3, [r7, #15]
    break;
 8008406:	e008      	b.n	800841a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008408:	2301      	movs	r3, #1
 800840a:	73fb      	strb	r3, [r7, #15]
    break;
 800840c:	e005      	b.n	800841a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800840e:	2302      	movs	r3, #2
 8008410:	73fb      	strb	r3, [r7, #15]
    break;
 8008412:	e002      	b.n	800841a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008414:	2302      	movs	r3, #2
 8008416:	73fb      	strb	r3, [r7, #15]
    break;
 8008418:	bf00      	nop
  }
  return usb_status;
 800841a:	7bfb      	ldrb	r3, [r7, #15]
}
 800841c:	4618      	mov	r0, r3
 800841e:	3714      	adds	r7, #20
 8008420:	46bd      	mov	sp, r7
 8008422:	bc80      	pop	{r7}
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop

08008428 <__libc_init_array>:
 8008428:	b570      	push	{r4, r5, r6, lr}
 800842a:	2600      	movs	r6, #0
 800842c:	4d0c      	ldr	r5, [pc, #48]	; (8008460 <__libc_init_array+0x38>)
 800842e:	4c0d      	ldr	r4, [pc, #52]	; (8008464 <__libc_init_array+0x3c>)
 8008430:	1b64      	subs	r4, r4, r5
 8008432:	10a4      	asrs	r4, r4, #2
 8008434:	42a6      	cmp	r6, r4
 8008436:	d109      	bne.n	800844c <__libc_init_array+0x24>
 8008438:	f000 f822 	bl	8008480 <_init>
 800843c:	2600      	movs	r6, #0
 800843e:	4d0a      	ldr	r5, [pc, #40]	; (8008468 <__libc_init_array+0x40>)
 8008440:	4c0a      	ldr	r4, [pc, #40]	; (800846c <__libc_init_array+0x44>)
 8008442:	1b64      	subs	r4, r4, r5
 8008444:	10a4      	asrs	r4, r4, #2
 8008446:	42a6      	cmp	r6, r4
 8008448:	d105      	bne.n	8008456 <__libc_init_array+0x2e>
 800844a:	bd70      	pop	{r4, r5, r6, pc}
 800844c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008450:	4798      	blx	r3
 8008452:	3601      	adds	r6, #1
 8008454:	e7ee      	b.n	8008434 <__libc_init_array+0xc>
 8008456:	f855 3b04 	ldr.w	r3, [r5], #4
 800845a:	4798      	blx	r3
 800845c:	3601      	adds	r6, #1
 800845e:	e7f2      	b.n	8008446 <__libc_init_array+0x1e>
 8008460:	08008504 	.word	0x08008504
 8008464:	08008504 	.word	0x08008504
 8008468:	08008504 	.word	0x08008504
 800846c:	08008508 	.word	0x08008508

08008470 <memset>:
 8008470:	4603      	mov	r3, r0
 8008472:	4402      	add	r2, r0
 8008474:	4293      	cmp	r3, r2
 8008476:	d100      	bne.n	800847a <memset+0xa>
 8008478:	4770      	bx	lr
 800847a:	f803 1b01 	strb.w	r1, [r3], #1
 800847e:	e7f9      	b.n	8008474 <memset+0x4>

08008480 <_init>:
 8008480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008482:	bf00      	nop
 8008484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008486:	bc08      	pop	{r3}
 8008488:	469e      	mov	lr, r3
 800848a:	4770      	bx	lr

0800848c <_fini>:
 800848c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800848e:	bf00      	nop
 8008490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008492:	bc08      	pop	{r3}
 8008494:	469e      	mov	lr, r3
 8008496:	4770      	bx	lr
